{"_id":"graphql-language-service-server","_rev":"362-16b803ff27dba6cbf257f13ecad0fdbc","name":"graphql-language-service-server","description":"Server process backing the GraphQL Language Service","dist-tags":{"latest":"2.12.0","next":"2.5.0-alpha.5","canary":"2.12.1-canary-e4221d66.0","alpha":"2.11.2-alpha.0"},"versions":{"0.0.1":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.1","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","options":{"mocha":"--full-trace --require src/__tests__/mocha-bootload src/**/__tests__/**/*-test.js"},"scripts":{"test":"npm run lint && npm run check && npm run testonly","testonly":"babel-node ./node_modules/.bin/_mocha $npm_package_options_mocha","lint":"eslint src || (printf '\\033[33mTry: \\033[7m npm run lint -- --fix \\033[0m\\n' && exit 1)","build":"npm run build-js && npm run build-flow","build-js":"babel-node scripts/build-js.js","build-flow":"babel-node scripts/build-flow.js","check":"flow check","prepublish":"node scripts/prepublish.js"},"dependencies":{"graphql":"^0.9.1","graphql-language-service-types":"^0.0.7"},"devDependencies":{"babel-cli":"6.23.0","babel-eslint":"7.1.0","babel-plugin-check-es2015-constants":"6.8.0","babel-plugin-syntax-async-functions":"6.13.0","babel-plugin-transform-class-properties":"6.23.0","babel-plugin-transform-es2015-arrow-functions":"6.8.0","babel-plugin-transform-es2015-block-scoped-functions":"6.8.0","babel-plugin-transform-es2015-block-scoping":"6.23.0","babel-plugin-transform-es2015-classes":"6.23.0","babel-plugin-transform-es2015-computed-properties":"6.8.0","babel-plugin-transform-es2015-destructuring":"6.22.0","babel-plugin-transform-es2015-duplicate-keys":"6.8.0","babel-plugin-transform-es2015-function-name":"6.9.0","babel-plugin-transform-es2015-literals":"6.8.0","babel-plugin-transform-es2015-modules-commonjs":"6.23.0","babel-plugin-transform-es2015-object-super":"6.8.0","babel-plugin-transform-es2015-parameters":"6.23.0","babel-plugin-transform-es2015-shorthand-properties":"6.18.0","babel-plugin-transform-es2015-spread":"6.8.0","babel-plugin-transform-es2015-template-literals":"6.8.0","babel-plugin-transform-flow-strip-types":"6.18.0","babel-plugin-transform-object-rest-spread":"6.22.0","babel-plugin-transform-regenerator":"6.16.1","babel-polyfill":"^6.16.0","babel-types":"6.22.0","chai":"^3.5.0","eslint":"3.15.0","eslint-plugin-babel":"3.3.0","eslint-plugin-dependencies":"2.0.0","eslint-plugin-flowtype":"2.29.1","eslint-plugin-prefer-object-spread":"1.1.0","flow-bin":"0.39.0","mocha":"^3.2.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.1","_shasum":"63c1bb0e61def9bbed91b9bc982c520179169904","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.5.0","_npmUser":{"name":"wincent","email":"greg@hurrell.net"},"dist":{"shasum":"63c1bb0e61def9bbed91b9bc982c520179169904","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.1.tgz","integrity":"sha512-zAcGheJh9tDZESDnZqRREbcHWkXWG/78IUNuIgjmuuqjXOg6qZzfsTlluGbhqI6UZL9dbzgmFs/ACRQqpep+3Q==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC6hnXG4gBvXmQH7kxWz39J0kLV0T/ou2tipOZ3OgMw6QIgMt5Q0Xh2y/xyHHnDAgzGvV3jAaf0NmbuSde8YIJW//g="}]},"maintainers":[{"name":"wincent","email":"greg@hurrell.net"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/graphql-language-service-server-0.0.1.tgz_1487402957415_0.014773087343201041"},"directories":{}},"0.0.2":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.2","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","options":{"mocha":"--full-trace --require src/__tests__/mocha-bootload src/**/__tests__/**/*-test.js"},"scripts":{"test":"npm run lint && npm run check && npm run testonly","testonly":"babel-node ./node_modules/.bin/_mocha $npm_package_options_mocha","lint":"eslint src || (printf '\\033[33mTry: \\033[7m npm run lint -- --fix \\033[0m\\n' && exit 1)","build":"npm run build-js && npm run build-flow","build-js":"babel-node scripts/build-js.js","build-flow":"babel-node scripts/build-flow.js","check":"flow check","prepublish":"node scripts/prepublish.js"},"dependencies":{"fb-watchman":"^1.9.0","graphql":"^0.9.1","graphql-language-service-config":"^0.0.4","graphql-language-service-interface":"^0.0.2","graphql-language-service-types":"^0.0.9","graphql-language-service-utils":"^0.0.3","nullthrows":"^1.0.0"},"devDependencies":{"babel-cli":"6.23.0","babel-eslint":"7.1.0","babel-plugin-check-es2015-constants":"6.8.0","babel-plugin-syntax-async-functions":"6.13.0","babel-plugin-transform-class-properties":"6.23.0","babel-plugin-transform-es2015-arrow-functions":"6.8.0","babel-plugin-transform-es2015-block-scoped-functions":"6.8.0","babel-plugin-transform-es2015-block-scoping":"6.23.0","babel-plugin-transform-es2015-classes":"6.23.0","babel-plugin-transform-es2015-computed-properties":"6.8.0","babel-plugin-transform-es2015-destructuring":"6.22.0","babel-plugin-transform-es2015-duplicate-keys":"6.8.0","babel-plugin-transform-es2015-function-name":"6.9.0","babel-plugin-transform-es2015-literals":"6.8.0","babel-plugin-transform-es2015-modules-commonjs":"6.23.0","babel-plugin-transform-es2015-object-super":"6.8.0","babel-plugin-transform-es2015-parameters":"6.23.0","babel-plugin-transform-es2015-shorthand-properties":"6.18.0","babel-plugin-transform-es2015-spread":"6.8.0","babel-plugin-transform-es2015-template-literals":"6.8.0","babel-plugin-transform-flow-strip-types":"6.18.0","babel-plugin-transform-object-rest-spread":"6.22.0","babel-plugin-transform-regenerator":"6.16.1","babel-polyfill":"^6.16.0","babel-types":"6.22.0","chai":"^3.5.0","eslint":"3.15.0","eslint-plugin-babel":"3.3.0","eslint-plugin-dependencies":"2.0.0","eslint-plugin-flowtype":"2.29.1","eslint-plugin-prefer-object-spread":"1.1.0","flow-bin":"0.39.0","mocha":"^3.2.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.2","_shasum":"9766d2c45b8ad71b297f3a4f3bc7d64f28b1da79","_from":".","_npmVersion":"3.10.3","_nodeVersion":"6.3.1","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"shasum":"9766d2c45b8ad71b297f3a4f3bc7d64f28b1da79","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.2.tgz","integrity":"sha512-OA0rCrxe5YwgRovpRq+icTgp9aygkmmssYCvssPxKf150eGndSHmT6Y1EOESM+VjclQYgChFsq+QYY29zvMLOg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIF+7D6M9cPKb+q8lnv6DScoWVUasJczgn1w0m/fSnORoAiEA3IaDQjAqR8ig0f9pM+pVDuA0MfvwlNR64GaOS7TiTEU="}]},"maintainers":[{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"wincent","email":"greg@hurrell.net"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/graphql-language-service-server-0.0.2.tgz_1487713056158_0.018320688977837563"},"directories":{}},"0.0.3":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.3","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","options":{"mocha":"--full-trace --require src/__tests__/mocha-bootload src/**/__tests__/**/*-test.js"},"scripts":{"test":"npm run lint && npm run testonly","testonly":"babel-node ./node_modules/.bin/_mocha $npm_package_options_mocha","lint":"eslint src || (printf '\\033[33mTry: \\033[7m npm run lint -- --fix \\033[0m\\n' && exit 1)","build":"npm run build-js && npm run build-flow","build-js":"babel-node scripts/build-js.js","build-flow":"babel-node scripts/build-flow.js","prepublish":"node scripts/prepublish.js"},"dependencies":{"fb-watchman":"^1.9.0","graphql":"^0.9.1","graphql-language-service-config":"0.0.5","graphql-language-service-interface":"0.0.5","graphql-language-service-types":"0.0.10","graphql-language-service-utils":"0.0.4","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.2.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.3","_shasum":"e111cba6f83cc31c7e85bbd827f242d6d1551ad9","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.4","_npmUser":{"name":"wincent","email":"greg@hurrell.net"},"dist":{"shasum":"e111cba6f83cc31c7e85bbd827f242d6d1551ad9","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.3.tgz","integrity":"sha512-G1+j3tLf0NSZxsyMVsLeA61fKlAufejUrA2h/5nAjslMsHZwui3EeCh/ymSW2aaOBWwOl1r2jEvWIRwgdgOzkg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC5cuLTlZ/1ihlXSp3e8ae1Ioopw/Xg/XfSYUw32XCKdgIgDQ42aS7QNKfvRw2KLvoSdrE+okghlqAR0E6lA0HiBnU="}]},"maintainers":[{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"wincent","email":"greg@hurrell.net"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/graphql-language-service-server-0.0.3.tgz_1490747093639_0.9297234385740012"},"directories":{}},"0.0.4":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.4","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"src/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.9.2","graphql-language-service-config":"0.0.6","graphql-language-service-interface":"0.0.6","graphql-language-service-types":"0.0.11","graphql-language-service-utils":"0.0.5","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.2.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.4","_shasum":"8d333d1596ec0c4df13f6abeb01ec37e8887d06f","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"shasum":"8d333d1596ec0c4df13f6abeb01ec37e8887d06f","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.4.tgz","integrity":"sha512-qTBsfBBHibxEREUvM9DXf/jBuZg7ifmCXil0bz2j5bC5myjSXUmYq8R5rfZQHnk0zFbC2oQOlNFXHjI2o5BeUQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHlxtaWvo2e0BNB7RZLvKb0DR9TZnPwWWguRXPYrs8/rAiAE++r4uUeDpDCbrhCqbVVo+7Fk0aWWqvmwPCXkSuiYWw=="}]},"maintainers":[{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"wincent","email":"greg@hurrell.net"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/graphql-language-service-server-0.0.4.tgz_1491111967664_0.3706953190267086"},"directories":{}},"0.0.5":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.5","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.9.2","graphql-language-service-config":"0.0.7","graphql-language-service-interface":"0.0.7","graphql-language-service-types":"0.0.12","graphql-language-service-utils":"0.0.6","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.2.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.5","_shasum":"5c293d623278061ff2e6e06407f4a406cf487215","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"shasum":"5c293d623278061ff2e6e06407f4a406cf487215","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.5.tgz","integrity":"sha512-stsmF1DxYCYeWK3MfbmcxDIIebsvQ5vRNyLqZkbrunnJ5lDUhDpcZOsELA0QW0U1N6OyWf0ksX3T1JUVRGUSAw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGtMoVJFm0osmwvjV97YNL6awWUz8EggTUfv3XpoiiI2AiBUdNsXWQt8WJ5ZFlHgPGEoQA5V5zf7U3l3Tc3U+R77iQ=="}]},"maintainers":[{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"wincent","email":"greg@hurrell.net"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/graphql-language-service-server-0.0.5.tgz_1491350039496_0.6844552031252533"},"directories":{}},"0.0.6":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.6","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.9.2","graphql-language-service-config":"0.0.7","graphql-language-service-interface":"0.0.7","graphql-language-service-types":"0.0.12","graphql-language-service-utils":"0.0.6","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.2.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.6","_shasum":"b38be127497e76c2cf3a72041a09cf2b70764355","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"shasum":"b38be127497e76c2cf3a72041a09cf2b70764355","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.6.tgz","integrity":"sha512-j1fTPphhd+eV7J4CMizJEeCJdbH2QUoT3OjDqIERcpP9RRA+cQXU8r3BnjMsByWPqCeGPqc8A0/RGI5/RQ2x7Q==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAVZ/SufvGGNVSTk3Skp3blqC8txvocqr2Bbu5gRYsu0AiEAn95WR4Lgl4Q1Smx1yFvPk7DDUwQ30JL+jXn6zVpkLDw="}]},"maintainers":[{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"wincent","email":"greg@hurrell.net"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/graphql-language-service-server-0.0.6.tgz_1491873473070_0.04746129852719605"},"directories":{}},"0.0.7":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.7","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.9.2","graphql-language-service-config":"0.0.7","graphql-language-service-interface":"0.0.7","graphql-language-service-types":"0.0.12","graphql-language-service-utils":"0.0.6","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.2.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.7","_shasum":"12fd4558aac49ab8a124958b49c16cc9c021ddea","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"shasum":"12fd4558aac49ab8a124958b49c16cc9c021ddea","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.7.tgz","integrity":"sha512-aKmpviDX5fvG/pFUW1LbsEe9oSCm28mtFaZb9F+St3LtI7DH3E1GNyhJGvC2l0qIzWRU1F6CJGc1thLY5TL0ig==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEfioyvfXB9FR8QNMFuNtVPhEkUFJ/WryyV25GyymvIVAiBxbkpr7vfduEOQTL1yNR/68LTSDxpTQ8KZlwXga88Ipw=="}]},"maintainers":[{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"wincent","email":"greg@hurrell.net"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/graphql-language-service-server-0.0.7.tgz_1492459111755_0.5292443069629371"},"directories":{}},"0.0.8":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.8","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.9.2","graphql-language-service-config":"0.0.7","graphql-language-service-interface":"0.0.7","graphql-language-service-types":"0.0.12","graphql-language-service-utils":"0.0.6","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.2.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.8","_shasum":"7b2d752cd4d8552a4be0c100cfb5110f6c18fb0c","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"shasum":"7b2d752cd4d8552a4be0c100cfb5110f6c18fb0c","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.8.tgz","integrity":"sha512-T2dzWQOOJnR2S1fRIYXLbIB/disA6ocMjkv8kWN6oo1nt78pUEGHynqQArfZenqSk5A6kAuUZwwKfd9TUNYe3A==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDbzMaLcoHFTrj3sviHVW5S4bhwWGJzpOXpqJlGUsOO7wIhAPavUgkjXFHWLjrTr+cOnz+jcJIYzZ5nyfS5KZFdvdoO"}]},"maintainers":[{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"wincent","email":"greg@hurrell.net"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/graphql-language-service-server-0.0.8.tgz_1492502860037_0.7471918838564306"},"directories":{}},"0.0.9":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.9","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.9.2","graphql-language-service-config":"0.0.7","graphql-language-service-interface":"0.0.7","graphql-language-service-types":"0.0.12","graphql-language-service-utils":"0.0.6","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.2.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.9","_shasum":"fcb28c90a58a6924a56e53a6aefb5efa2d882c19","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"shasum":"fcb28c90a58a6924a56e53a6aefb5efa2d882c19","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.9.tgz","integrity":"sha512-39FDT0LIokM/UwioOr/2NNzqqJsVqqijyFiC012v0a7HHN4k2ykaoZaw7bmK5ijUPg/XLI5vTfhs5V6GhwuHbg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCRaTqzAvVpDJQPVH87aYhr2U/h2qEDC24ap06jW4SMiQIgCx36EEF8O0SSo7gCy3IyDkGRIFu6J/xUw3i/XPSRKXY="}]},"maintainers":[{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"wincent","email":"greg@hurrell.net"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/graphql-language-service-server-0.0.9.tgz_1492738489333_0.2010081976186484"},"directories":{}},"0.0.10":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.10","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.9.2","graphql-language-service-config":"0.0.7","graphql-language-service-interface":"0.0.7","graphql-language-service-types":"0.0.12","graphql-language-service-utils":"0.0.6","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.2.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.10","_shasum":"7a373c59715c2a7b5a6f46018341dcf16b8c8fbf","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"shasum":"7a373c59715c2a7b5a6f46018341dcf16b8c8fbf","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.10.tgz","integrity":"sha512-ximPudc207mSbMpc/5QWAj+EoF5sX1mi9pOb5gRVZcS1A6CqkyBhWncBM6fKsWSQHBS0GqM/6BIgFD/hgyJpdA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCpnSIVkO0HjBsG91ZGWTIwK2Bpw/zfI287Du4gKZD9CgIhAPBAcBPr1E8uRdCv3PmFdowjI4Ym1qIC3+S1LdqpcWlk"}]},"maintainers":[{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"wincent","email":"greg@hurrell.net"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/graphql-language-service-server-0.0.10.tgz_1493157239136_0.42641982436180115"},"directories":{}},"0.0.11":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.11","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.9.2","graphql-language-service-config":"0.0.7","graphql-language-service-interface":"0.0.7","graphql-language-service-types":"0.0.12","graphql-language-service-utils":"0.0.6","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.2.0","vscode-languageserver":"^3.2.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.11","_shasum":"28d8e40767c3f72c0e9d0755cda0c5a7b2687c12","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"shasum":"28d8e40767c3f72c0e9d0755cda0c5a7b2687c12","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.11.tgz","integrity":"sha512-x41AAHYoiCEzwtu4+zrhcFpNFaReFX8zb2iCguGjs97J8CSHTUi4FRJ2gwo6ONQw7r0q9TA9kGuFRECkn7+k1g==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCKWp+rlb/BsfNoQY61W2NrljsjsoZWoEQJKPyJ7Hl6NQIgHe2HOFGSF9GTUwy89NITz5inTVpDQwwYdpxagAkWHmI="}]},"maintainers":[{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"wincent","email":"greg@hurrell.net"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/graphql-language-service-server-0.0.11.tgz_1493326404077_0.27328894822858274"},"directories":{}},"0.0.12":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.12","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.9.4","graphql-language-service-config":"0.0.8","graphql-language-service-interface":"0.0.8","graphql-language-service-types":"0.0.13","graphql-language-service-utils":"0.0.7","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.2.0","vscode-languageserver":"^3.2.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.12","_shasum":"5856600497330d8f98a3f5d61f0f119d6223a9a4","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"shasum":"5856600497330d8f98a3f5d61f0f119d6223a9a4","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.12.tgz","integrity":"sha512-LJ3E0ZW9v5V54GU3/o2WOOQ3CHlbwAsULyA4/VkJjq8RbcyXWQqJX4VHRxOP+u3tr0fq7HWpXazSHj1KUTBtYw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCfZuQmCwvN2HDgRUdkYVJ39jIHMf6EFEslOFmV1/KX7AIhAOhqNRF1r9zHMWebyAH9DZj6UV0ijQ5YU2HIioB7PblX"}]},"maintainers":[{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"wincent","email":"greg@hurrell.net"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/graphql-language-service-server-0.0.12.tgz_1493671335795_0.6844889060594141"},"directories":{}},"0.0.13":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.13","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.9.6","graphql-language-service-config":"0.0.9","graphql-language-service-interface":"0.0.9","graphql-language-service-types":"0.0.14","graphql-language-service-utils":"0.0.8","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.2.0","vscode-languageserver":"^3.2.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.13","_shasum":"5b168e73ef21b5c90041b7a86382f45e5ae60f15","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"shasum":"5b168e73ef21b5c90041b7a86382f45e5ae60f15","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.13.tgz","integrity":"sha512-KJ7vv5R7vdajQ7DL1Z423qDqYQr8/nVVXhPMs9mOB46lcCCSVr020W9SPWx+Jawhm0NckG8svrDN3zDnYn3HaA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDV1ZYydTKoCWWo2Pwr+dYd1V5MAU9TJmn+gW7DZlJSNgIhAPVbgdQ14JERNLj+J14WzCuuxneNGZdICF6zWXBU4Ywv"}]},"maintainers":[{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"wincent","email":"greg@hurrell.net"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/graphql-language-service-server-0.0.13.tgz_1493712218948_0.7388198794797063"},"directories":{}},"0.0.14":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.14","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.9.6","graphql-language-service-config":"0.0.10","graphql-language-service-interface":"0.0.10","graphql-language-service-types":"0.0.15","graphql-language-service-utils":"0.0.9","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.2.0","vscode-languageserver":"^3.2.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.14","_shasum":"875576c7ca185933f430b6b70514b44be7bd7159","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"shasum":"875576c7ca185933f430b6b70514b44be7bd7159","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.14.tgz","integrity":"sha512-ODsJp2JrrBRpJxDgCkCBTl/dt4mv3teT2BTgPgIaqDURRed4f/hyCXKdJx7IfNsu7ghWz4GSw0nvEQMfepvVTg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHgfMMh1hD2LV2v8+sVIDI3UEEf5CRKAFxQPQf0s7NyTAiEAvQB4s7mO7uKqvYosIa/VSkfmZsLiDhWjA0WCuv0jzAQ="}]},"maintainers":[{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"wincent","email":"greg@hurrell.net"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/graphql-language-service-server-0.0.14.tgz_1493843383779_0.4253599648363888"},"directories":{}},"0.0.15":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.15","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.9.6","graphql-language-service-config":"0.0.11","graphql-language-service-interface":"0.0.11","graphql-language-service-types":"0.0.16","graphql-language-service-utils":"0.0.10","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.2.0","vscode-languageserver":"^3.2.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.15","_shasum":"800589d032488746ad4499813148676c9b2545ed","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"shasum":"800589d032488746ad4499813148676c9b2545ed","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.15.tgz","integrity":"sha512-DfbYtpVmvD2QDJ2cGB1ABGb2W1oiSrxKVYh02MpzAK3745Ulfo7vX8yJOwZPo3vtaWMU3/8L3lcovGfy8K5G3w==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCqWKtfn2JV+Xbz/5JhwxTvU3JtoRhtbZccNewIK6rWSAIhAIjUP2D3Yt/X7REiMAwY23MTRItnOeBWyxKQ7ytE10yS"}]},"maintainers":[{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"wincent","email":"greg@hurrell.net"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/graphql-language-service-server-0.0.15.tgz_1494621955703_0.24960276600904763"},"directories":{}},"0.0.16":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.16","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.9.6","graphql-language-service-config":"0.0.11","graphql-language-service-interface":"0.0.11","graphql-language-service-types":"0.0.16","graphql-language-service-utils":"0.0.10","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.2.0","vscode-languageserver":"^3.2.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.16","_shasum":"8c0637fa4ed79302a5380aa40a87fa9aacd6dcf0","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"shasum":"8c0637fa4ed79302a5380aa40a87fa9aacd6dcf0","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.16.tgz","integrity":"sha512-PQTAfbMHqx5Ad3jX00j5ghSCbhrAG4LmFDicvdNmrIEywlGk2TRjl3k4BIpTAKOYpB88CyaFw4KNYHbYjtzH6g==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDtpqbYGJjpqDgo3drRLSlvoRtBB2J9PZXXwC5bVVjO+QIhAJUcubV42WjvQT34GhDQt9MCauXEYlHGz6q/TLl9qwkp"}]},"maintainers":[{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"wincent","email":"greg@hurrell.net"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/graphql-language-service-server-0.0.16.tgz_1494956995490_0.7162938949186355"},"directories":{}},"0.0.17":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.17","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.9.6","graphql-language-service-config":"0.0.12","graphql-language-service-interface":"0.0.12","graphql-language-service-types":"0.0.17","graphql-language-service-utils":"0.0.11","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.2.0","vscode-languageserver":"^3.2.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.17","_shasum":"3749ee2e69294008efe11fbffcea6826250723e4","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"shasum":"3749ee2e69294008efe11fbffcea6826250723e4","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.17.tgz","integrity":"sha512-MVvfcIncEueFN5dV4ZE7pgFQQWLWxJMm1JSFKWwFWZeyUDOtoHr/oQYwkKrwA8b3vnNd+wboKDKI9Dda8by9lg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDeOhOcpBilfybObuB0cyc8XIY2wBko/4IADy3xzg+Y6AiEAt71AEnuEoLdiY1nZP3wcaUwfmxY2EmPJhG6556BXBsc="}]},"maintainers":[{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"wincent","email":"greg@hurrell.net"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/graphql-language-service-server-0.0.17.tgz_1494975303934_0.6592908666934818"},"directories":{}},"0.0.18":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.18","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.9.6","graphql-language-service-config":"0.0.12","graphql-language-service-interface":"0.0.12","graphql-language-service-types":"0.0.17","graphql-language-service-utils":"0.0.11","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.2.0","vscode-languageserver":"^3.2.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.18","_shasum":"b69d83256e9db1d7dff4e373b58de424e1fa20ef","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"shasum":"b69d83256e9db1d7dff4e373b58de424e1fa20ef","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.18.tgz","integrity":"sha512-1zQGunSjGE5NzyPkoggr6wCrU17iUBx033j/NQJzGDuwODLmyL18JejvPkBhSMn7szBB/Ohf8h7i7gs3hXCP6Q==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBQn4ugnEczBY7gm0QE18WRf8K1TvyQIbPpvijpLzib7AiAUn5Xd3c0kKqNEYABd9dW4s5GwrDdX5eU1lPNJcCv0Gw=="}]},"maintainers":[{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"wincent","email":"greg@hurrell.net"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/graphql-language-service-server-0.0.18.tgz_1495137821733_0.06531184236519039"},"directories":{}},"0.0.19":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.19","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.10.0","graphql-language-service-config":"0.0.13","graphql-language-service-interface":"0.0.13","graphql-language-service-types":"0.0.18","graphql-language-service-utils":"0.0.12","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.2.0","vscode-languageserver":"^3.2.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.19","_shasum":"e9db928c32ea842bc5bbd5ce71908d35682f3978","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"shasum":"e9db928c32ea842bc5bbd5ce71908d35682f3978","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.19.tgz","integrity":"sha512-Y6i56z2uWoy9wEqbz04AGJHcfbfwfS+xSRPTYA2xs/kfQkfP81HdMn+cLAsD/BJvbKg9zpqNH1CHU1kY5UslGg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD6JOi5Cm/J/8YscgsCB79Aq+xSk1EJLCT5nrmLUal9uQIgAptSQmBZSkdXRJNYy0Z04I+jtWU5aG7NSDU6fnyrEr0="}]},"maintainers":[{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"wincent","email":"greg@hurrell.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.0.19.tgz_1495767389744_0.30461592227220535"},"directories":{}},"0.0.20":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.20","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.10.0","graphql-language-service-config":"0.0.13","graphql-language-service-interface":"0.0.14","graphql-language-service-types":"0.0.18","graphql-language-service-utils":"0.0.12","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.2.0","vscode-languageserver":"^3.2.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.20","_shasum":"bd039f29f2d70915161bfd713100dce16c720396","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"shasum":"bd039f29f2d70915161bfd713100dce16c720396","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.20.tgz","integrity":"sha512-1cgKfHnE4GPJKpYLjsoI6dSmEOkcNnMGwb0f95sFxlGipHphAOJVSXoe2CpWM3I4pFh4bc0csNLmrZN1YhJtVA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGKZ09AXiunmvi/gSj9oM/wopbCjPqgv7EynU2i4quoVAiBRJldVnFBxRrSGlUgu2+MCmI4+lVh8ZhYX8iiMQemUig=="}]},"maintainers":[{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"wincent","email":"greg@hurrell.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.0.20.tgz_1495792129886_0.4128333677072078"},"directories":{}},"0.0.21":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.21","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.10.1","graphql-language-service-config":"0.0.14","graphql-language-service-interface":"0.0.15","graphql-language-service-types":"0.0.19","graphql-language-service-utils":"0.0.14","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.2.0","vscode-languageserver":"^3.2.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.21","_shasum":"1f6c8ba1915a9154dda01e121e4ed0131f8a2816","_from":".","_npmVersion":"4.2.0","_nodeVersion":"7.10.0","_npmUser":{"name":"wincent","email":"greg@hurrell.net"},"dist":{"shasum":"1f6c8ba1915a9154dda01e121e4ed0131f8a2816","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.21.tgz","integrity":"sha512-0yINVqXVJF1XqJEAPT9fWQhLCQdPJHDsN00FkUzLezBuhNVgsJ5xK7n4Fza59ejpe2u6PF44hvRpaj9lasOJSQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAqFI7akdtxqoYUV+48nFZ6fNGs+k9/mQpZv4LmnpVZ5AiEA8LvneTTTjN6wHN2oswPGAbs6HA3vY5uQ64zW4152v8I="}]},"maintainers":[{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"wincent","email":"greg@hurrell.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.0.21.tgz_1495842539543_0.37457867874763906"},"directories":{}},"0.0.22":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.22","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.10.1","graphql-language-service-config":"0.0.15","graphql-language-service-interface":"0.0.16","graphql-language-service-types":"0.0.20","graphql-language-service-utils":"0.0.15","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.2.0","vscode-languageserver":"^3.2.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.22","_shasum":"cef7b1bacb00a88d406b80d5a02d0ca09737cf78","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"shasum":"cef7b1bacb00a88d406b80d5a02d0ca09737cf78","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.22.tgz","integrity":"sha512-t/+/rjyKkYOQOUcrlM0xsaMuJizVt9PdNe4TctWo8B/rurStmCOBNmxcBSttgsWEXmm6K2vhYW0cLJogyqH2oQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDgSBfrwkY77VfXC1sGo8xMo441SyJ5zKPXCs1MMwqUcAiEAqvJh6p3vM8ocf4PmMO0T3nFiU0Jua4LMa2ZdyBvZEgE="}]},"maintainers":[{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"wincent","email":"greg@hurrell.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.0.22.tgz_1496313030885_0.6348556289449334"},"directories":{}},"0.0.23":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.23","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.10.1","graphql-language-service-config":"0.0.15","graphql-language-service-interface":"0.0.16","graphql-language-service-types":"0.0.20","graphql-language-service-utils":"0.0.15","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.2.0","vscode-languageserver":"^3.2.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.23","_shasum":"643a87b014649273587215c44230719db9b989a2","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"shasum":"643a87b014649273587215c44230719db9b989a2","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.23.tgz","integrity":"sha512-54+rcPih9X9McWDwGECwbs2FZpATDy0OiEUQekanOAlNWj6TNdKrAsms+HAfhcMFEL+EiMrEFIDJu/75/Htw9Q==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCL4mpYGS4wJZeCUS8vekGmi68NTF6ZouZEfWG8C16jIgIgOKt+KLY5d4dtoOAov3aDR20CsPP2/6WUBkigrKkyx/U="}]},"maintainers":[{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"wincent","email":"greg@hurrell.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.0.23.tgz_1496708926600_0.7211548578925431"},"directories":{}},"0.0.24":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.24","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.10.1","graphql-language-service-config":"0.0.15","graphql-language-service-interface":"0.0.16","graphql-language-service-types":"0.0.20","graphql-language-service-utils":"0.0.15","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.2.0","vscode-languageserver":"^3.2.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.24","_shasum":"4cffd228cb0af9e10a9cf917ac627f6406662df4","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"shasum":"4cffd228cb0af9e10a9cf917ac627f6406662df4","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.24.tgz","integrity":"sha512-bM8OPz7UjKU/K+N0AlwPzr5UKtrfQ4osQX6HMMJQlr5fuyrn4txnV9nmqxIBsW+jC8IHvswNq6rQi0Z+TPzovQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDUMZFc74H1NJJ/KUVUb8zBz/tAP4PkiQcPLL4p6ihG3QIhAKy9EzF1AeGMer1GMF9DSYBzBh4wPQ7uRlKVZtqYDy+n"}]},"maintainers":[{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"wincent","email":"greg@hurrell.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.0.24.tgz_1496773927917_0.7677358677610755"},"directories":{}},"0.0.25":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.25","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.10.1","graphql-language-service-config":"0.0.15","graphql-language-service-interface":"0.0.17","graphql-language-service-types":"0.0.20","graphql-language-service-utils":"0.0.15","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.2.0","vscode-languageserver":"^3.2.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.25","_shasum":"b3a0147c0c18fee2a13fe63a4691e4d4d1b04980","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"shasum":"b3a0147c0c18fee2a13fe63a4691e4d4d1b04980","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.25.tgz","integrity":"sha512-EAtlkmcj3xSB/NxljBQwSo1UZRDkYC0r++miwS3QU60bacu3PTLeI+XjbuUtZZ75eLvFC7DSOHdpPOaBHLFB5w==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCimRAUWg3puVO6J6LFVuUW5j1go+Aw4nFCkOp2npBH/AIhAMIOCCc3pZUHoeHif8lVQ5j9FK94z7qvFZvion+jNNsY"}]},"maintainers":[{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"wincent","email":"greg@hurrell.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.0.25.tgz_1497063094886_0.2118709646165371"},"directories":{}},"0.0.26":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.26","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.10.1","graphql-language-service-config":"0.0.15","graphql-language-service-interface":"0.0.17","graphql-language-service-types":"0.0.20","graphql-language-service-utils":"0.0.15","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.2.0","vscode-languageserver":"^3.2.1"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.26","_shasum":"09c70ecb76f6c43dc575d0a266a37abb0eeef15b","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"shasum":"09c70ecb76f6c43dc575d0a266a37abb0eeef15b","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.26.tgz","integrity":"sha512-9LcJSwUUCZQDUMF+EEaYdLSCy7vJ84lI+UmW15pWno7EwikS7bHpUeAM9o7eE8tOp5QL37rvbayPr3Y2PSXRCg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFSn7GDw6QsN25pJCl5ye1Ga8qo7lFOM7Ob2fzVX/J8KAiEAnNDLqR9hYiJT5lm0FuB8rk+IkGkH0fAtIwOr/TQ8zTM="}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"greg@hurrell.net","name":"wincent"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.0.26.tgz_1498248861563_0.24319559591822326"},"directories":{}},"0.0.27":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.27","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.10.1","graphql-language-service-config":"0.0.15","graphql-language-service-interface":"0.0.17","graphql-language-service-types":"0.0.20","graphql-language-service-utils":"0.0.15","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.27","_shasum":"c8baccb7a8437dac485e9a19758f09b5dbf5ffaf","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"shasum":"c8baccb7a8437dac485e9a19758f09b5dbf5ffaf","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.27.tgz","integrity":"sha512-m1JIGzy2OIxE0oSj5+QWHUj6qlOlqO9oyyRX2+eCbCmTugZepa26Y8AY8nNS90LUe0WwABTAf0oE/B5oN62o8Q==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIF0IqPZb7Y7J0IFvthNpZiEWa1xf+Sj2tWzawbccDhqQAiAPgphv/nH5swdIOykIDqwj3ih1ewyPgAokNLbJlHGA8w=="}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"greg@hurrell.net","name":"wincent"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.0.27.tgz_1498253500549_0.20794382342137396"},"directories":{}},"0.0.28":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.28","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.10.1","graphql-language-service-config":"0.0.16","graphql-language-service-interface":"0.0.18","graphql-language-service-types":"0.0.20","graphql-language-service-utils":"0.0.15","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.28","_shasum":"90f93290889b8229cc2a516ecc168d279348679a","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"shasum":"90f93290889b8229cc2a516ecc168d279348679a","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.28.tgz","integrity":"sha512-G92ZMub6/psVgPxe+B+FFpaz+D2ydwN6bFpj9cf+zPMDjo6uskmIfzWwSUs8WlpiQq1aOWJz7v19NfNWNI0lMA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCu/tXBGKqIJAE9hXiykTcFJG5V8Z/8iOUcoihler4QgwIgCNOCNR8OF0ERgq3P/dLnxoTN6l7d7Hs6ubQbn8aHQDk="}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"greg@hurrell.net","name":"wincent"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.0.28.tgz_1498366092470_0.4695638513658196"},"directories":{}},"0.0.29":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.29","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.10.1","graphql-language-service-config":"0.0.16","graphql-language-service-interface":"0.0.18","graphql-language-service-types":"0.0.20","graphql-language-service-utils":"0.0.15","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.29","_shasum":"950104cb833daf6d19409ceff94abe53d8212fd9","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"shasum":"950104cb833daf6d19409ceff94abe53d8212fd9","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.29.tgz","integrity":"sha512-JwOGGwm6WYyhndFFvw7CTjRx0ITt/IO0AkE3CzC71XhvUQjv5+NtVRJgKtHX24mdTw/8lMubJy6YRBO59R8tJQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIH5+Fpzf/DTvAYAmlzpNtqR7fvBM2uBhZt5WnfNPws6nAiEAi/AVrmYMYP/iu/69RvFjcyrN+VO3FQtdmWCNro5PtM4="}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"greg@hurrell.net","name":"wincent"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.0.29.tgz_1498457943087_0.03172405273653567"},"directories":{}},"0.0.30":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.30","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.10.1","graphql-language-service-config":"0.0.16","graphql-language-service-interface":"0.0.18","graphql-language-service-types":"0.0.20","graphql-language-service-utils":"0.0.16","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.30","_npmVersion":"5.0.3","_nodeVersion":"8.1.3","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"integrity":"sha512-19VyolVVY6xs2qd0fPe+e6mMpDFQVzd1SUglL6ePCOYrHcIpEoiDVqts8/CFQD9fxSYYOylJzj6++qI6Y6TQ4g==","shasum":"2df5035fda5c9319bc8285fec3c4e49e81af184b","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.30.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDwTZJpYQPC9F+yNyruuVhtsbHdfLJXTo9iyfqsYucNdQIgcPY3oJ7GQR2Ew8igBpw2z6HvPzbUKWt8l2o+GlUD5bY="}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"greg@hurrell.net","name":"wincent"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.0.30.tgz_1498861814603_0.5197180639952421"},"directories":{}},"0.0.31":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.31","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.10.1","graphql-language-service-config":"0.0.17","graphql-language-service-interface":"0.0.19","graphql-language-service-types":"0.0.21","graphql-language-service-utils":"0.0.17","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.31","_npmVersion":"5.0.3","_nodeVersion":"8.1.3","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"integrity":"sha512-VhOxlYH8Tnel9RYB3I/OEW7ChVtXm7609kORuTP+ttr+GoHZFh9M6sLkD9IYopH2HMi2968oQrpGRioYREpwkg==","shasum":"6ef63dfa0a0d8d7617552ee955aa41db66143093","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.31.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDFphxiTWUpToOPid1ckOcMJeGNjkn2eiYa+Mc99CA0hAIhAPxnuuhD68flTiWYpJ/LbwgWDECJGLob4SM82jRDYJVq"}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"greg@hurrell.net","name":"wincent"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.0.31.tgz_1499061955238_0.7447412414476275"},"directories":{}},"0.0.32":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.32","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.10.1","graphql-language-service-config":"0.0.18","graphql-language-service-interface":"0.0.20","graphql-language-service-types":"0.0.22","graphql-language-service-utils":"0.0.18","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.32","_npmVersion":"5.0.4","_nodeVersion":"8.1.3","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"integrity":"sha512-ImRb9L1CoqbYCeAWPxjPMHroBAEi5LaVYtTXuh1rjm+8a29NBJ5EzthHWajx4n0Y071IzPub2XKxgJFpt/qP6A==","shasum":"b17986cdfde3af46be864a76a31847990602050a","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.32.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHn80laxVW9LaPA3A0YNmoa7ycLsslr/H1pQA/6kMPsoAiAYu7GcDttDp0zo+j9B5Q7WUabmdQRG3cIwKY4VVYsKHQ=="}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"greg@hurrell.net","name":"wincent"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.0.32.tgz_1499675766525_0.31565199908800423"},"directories":{}},"0.0.33":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.33","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.10.1","graphql-language-service-config":"0.0.18","graphql-language-service-interface":"0.0.21","graphql-language-service-types":"0.0.22","graphql-language-service-utils":"0.0.19","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.33","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"integrity":"sha512-7XSOwKf9yNuh5ZCPLcCIHk30Zkm6HvQeoJz+JZy/04skVn6+YnK4KWcjMB/WVGmjj4qKgINI+HQi2fYv8UFGRQ==","shasum":"e3a47705ce790a0a61e6f122a7c3170b5c1945af","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.33.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIA0xiySs1LMs302JwnyXHfoEstuqDHh4ZfqO64AOVKduAiAiaNlB/8y6jyZu2kk3uqGJK3PmRFPtwAWZ98L/K8FL7Q=="}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"greg@hurrell.net","name":"wincent"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.0.33.tgz_1500286802819_0.7303060891572386"},"directories":{}},"0.0.34":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.34","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.10.1","graphql-language-service-config":"0.0.18","graphql-language-service-interface":"0.0.22","graphql-language-service-types":"0.0.22","graphql-language-service-utils":"0.0.20","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.34","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"integrity":"sha512-b6QMVonvD7q70kNEStEW9QjLx3HbLErT8lpZ76kcQ3V7pg88tVIXwhcYrAHxBkJB+aXKUnvvzEnkqlAw0/brZw==","shasum":"a251eb0019f4aca267f6bee3dee69220008a5871","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.34.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDWwQD+5dxuAEDb9WFujVUXVsZqBuD54nlhttm8CVD3QAIgNhD45nCki2Q2ahOQ35FPRN2sa+uk9FS6bLvOuRaIOjg="}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"greg@hurrell.net","name":"wincent"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.0.34.tgz_1500287960194_0.47969315061345696"},"directories":{}},"0.0.35":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.35","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.10.1","graphql-language-service-config":"0.0.18","graphql-language-service-interface":"0.0.22","graphql-language-service-types":"0.0.22","graphql-language-service-utils":"0.0.20","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.35","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"integrity":"sha512-Dt2Fq/qea37zgsiTH9/g3hBvrI7BryupwcRLlgWLH8wRtsZ3FYyqTbVbWeyMBSZRIcb4k9nLladcNHVkX6vwmw==","shasum":"ff4147fc086c4a37a356a6df9b577f61d8c96dbe","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.35.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDQm10km5o3/1F30hC2mfL963BUlTm0XXTkuzq1U8MAiwIgRO48m32+wxnVXMq0soaZqcrJVb7xnXQZPJr6pEGTt74="}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"greg@hurrell.net","name":"wincent"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.0.35.tgz_1500500462555_0.6336968161631376"},"directories":{}},"0.0.36":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.36","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.10.5","graphql-config":"~1.0.0","graphql-language-service-interface":"0.0.22","graphql-language-service-types":"0.0.22","graphql-language-service-utils":"0.0.20","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.36","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"integrity":"sha512-v0jWxztt1RMP88JDKHm9uP+N3IN5MEKvhR4PD5l/JOvMXyUCa5R0RpnMQRwvd8JZ0hbktJEEIHULmQd+Q938vg==","shasum":"1f2140b0c53f14f0522c6eadb3877453fbfa80e1","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.36.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCFBO8uDMDQbGs5o141hTbUp6gkxXiM4CMaX7PpOWeEYgIhAKwRLcZfgSacgPwh/4YJVHT4Kcxv/BbbpGn5CtW2Ib4F"}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"greg@hurrell.net","name":"wincent"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.0.36.tgz_1502093468727_0.9806354444008321"},"directories":{}},"0.0.37":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.0.37","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.10.5","graphql-config":"~1.0.0","graphql-language-service-interface":"0.0.23","graphql-language-service-types":"0.0.23","graphql-language-service-utils":"0.0.21","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.0.37","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"integrity":"sha512-BsgHcpAnd9HYpgSHQVNVGS+y78O3yRe+Id7hE0vesgsnf+SpL8EkwF1yESjk5aBUjkhRBf7F+4cYKmTIdB6fJg==","shasum":"4c87efe2dec03ea5da12a129c4f81a87fefeaf4f","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.0.37.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICQjuWqcTGtD7RyvNAbTeSowNDAf+Nz+W2vnsSvzBKYQAiBKvgAWCQiJ72NZPXaDIYSq60MQqhLHw+ND2fAVo4HhEw=="}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"greg@hurrell.net","name":"wincent"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.0.37.tgz_1502094830110_0.6633682446554303"},"directories":{}},"0.1.0-0":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.1.0-0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"fb-watchman":"^2.0.0","graphql":"^0.10.5","graphql-config":"~1.0.0","graphql-language-service-interface":"^0.1.0-0","graphql-language-service-types":"^0.1.0-0","graphql-language-service-utils":"^0.1.0-0","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.1.0-0","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"integrity":"sha512-p3BH3LyFJsn0+8cvGq/oBRx1fmaygSPLFIuSR3gCh0NYTukUzR+hxF5jeT6hbmdAYj7ige2ukPxGgUZRUy1ehA==","shasum":"a0f24878d66c0da2032fec4135f2d9eba6a3f207","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.1.0-0.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDdytVnpWTc4jhnsNrV/NTef83j5p/O+8Jr+/m9uhYFBAiB0o7m3vgwwx8kG99M5UPgD4PpP5r2wFFxld8/gc9FG3w=="}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"greg@hurrell.net","name":"wincent"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.1.0-0.tgz_1502401395746_0.37438491987995803"},"directories":{}},"0.1.5-0":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.1.5-0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"babylon":"^6.17.4","fb-watchman":"^2.0.0","graphql":"^0.10.5","graphql-config":"~1.0.0","graphql-language-service-interface":"^0.1.0-0","graphql-language-service-types":"^0.1.0-0","graphql-language-service-utils":"^0.1.0-0","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.1.5-0","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"integrity":"sha512-aWBtctB62skKNn7Jk+fXrDIts1SlOm7TT18tvenqpmyIFvdWBxJainGbwjRaCOf6+g+RyUfs3CQF+LH95qnjyg==","shasum":"7ed696dd9de29ba82fbba1399d3e304708863e3b","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.1.5-0.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICF317XXJGzYeiY+pFLw9q8iyqJ1m7+EFkTQY/ijWYvEAiANmBaZnox7i7umrOD9aBDeTTl/sK+XmKWWEnIH7wk1dg=="}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"greg@hurrell.net","name":"wincent"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.1.5-0.tgz_1502407906183_0.5200711151119322"},"directories":{}},"0.1.5":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.1.5","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"babylon":"^6.17.4","fb-watchman":"^2.0.0","graphql":"^0.10.5","graphql-config":"~1.0.0","graphql-language-service-interface":"^0.1.5","graphql-language-service-types":"^0.1.5","graphql-language-service-utils":"^0.1.5","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.1.5","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"integrity":"sha512-1V+RfG25Up4X3o56KuVjr/jXHD/SJsBW5r56MwxWo9T4UT2vs30VkxgIGRfhHTqtYTzbS6dhHKLCws6v/lfqIw==","shasum":"adee90e68884aab6fc85638a931b4ed110e8257d","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.1.5.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEIVIdSeX3sPUzySHMbcrfA1APWzeHj50OB4o5kLKHv7AiEAlrwpgpYH7DkLrTpauGo8SkzAeZVsTLqN/YGYM6ryqG8="}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"greg@hurrell.net","name":"wincent"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.1.5.tgz_1502724632073_0.3863461341243237"},"directories":{}},"0.1.6":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.1.6","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"babylon":"^6.17.4","fb-watchman":"^2.0.0","graphql":"^0.10.5","graphql-config":"~1.0.0","graphql-language-service-interface":"^0.1.6","graphql-language-service-types":"^0.1.5","graphql-language-service-utils":"^0.1.5","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.1.6","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"integrity":"sha512-3dca+L5u2Lm18O8PvRn2yzvNUSk8OnJ/3kCo2iavy8uUviqjgEYiTsmOKvt4/xi3M/W9po2kQWHkpOll5+mXhA==","shasum":"b1160ef30e25f349e27bc9c0e9216c2f217a471d","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.1.6.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCW1FLbCzAf5DlpjMO6VNZHggTZsRP3FiLkRzNew/1qoQIhALPuRisf8Tjgr9xEdIdUNrLVe6lHCuW8K4eBIO/bKI9+"}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"greg@hurrell.net","name":"wincent"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.1.6.tgz_1502832528391_0.9985727770254016"},"directories":{}},"0.1.7":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.1.7","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"babylon":"^6.17.4","fb-watchman":"^2.0.0","graphql":"^0.10.5","graphql-config":"1.0.4","graphql-language-service-interface":"^0.1.7","graphql-language-service-types":"^0.1.5","graphql-language-service-utils":"^0.1.7","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.1.7","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"integrity":"sha512-45B5jfOYJ7mERIUbxpQTSciikO2SNDGH9sia0ri1dthltd0fPVybI+QB5620lOUhBAm3w9SpC25OG9btQ6hqow==","shasum":"d0210eb738327cde9c63ebd0bae22ba6dcca816e","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.1.7.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFMqdf5WiGNQkZoBDp0j+V4J7JMI7q8bFZdusqp2ULgiAiEA/DXipQJ71mEI/XjqMKnilcomjGkvUa4wm7jUy0Mnk1Y="}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"greg@hurrell.net","name":"wincent"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.1.7.tgz_1502846606151_0.7352100722491741"},"directories":{}},"0.1.8":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.1.8","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"babylon":"^6.17.4","fb-watchman":"^2.0.0","graphql":"^0.10.5","graphql-config":"1.0.4","graphql-language-service-interface":"^0.1.8","graphql-language-service-types":"^0.1.5","graphql-language-service-utils":"^0.1.7","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"devDependencies":{"babel-cli":"6.24.1"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.1.8","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"integrity":"sha512-Fay3+yj7H5ky0hZ7PJ0cgeDKDJ8qW03SjWO2ycfDyiFKg5AoGshph0Z09Kahj9lBPG+A/Kj/Ojp3T8aLT2d56w==","shasum":"4f2a0dd859811aecc441d15e2c59feb1027562d2","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.1.8.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQClIKua+NF4h/sMuhKl/bFn1WxR4lvbbZGwLseHdfFNXgIgcSJqg8aFGMGEjGF+vuj9u7y80Abe5Qf24pt6DRPigxs="}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"greg@hurrell.net","name":"wincent"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.1.8.tgz_1503027164866_0.9913950418122113"},"directories":{}},"0.1.9":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.1.9","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"babylon":"^6.17.4","fb-watchman":"^2.0.0","graphql":"^0.10.5","graphql-config":"1.0.4","graphql-language-service-interface":"^0.1.8","graphql-language-service-types":"^0.1.5","graphql-language-service-utils":"^0.1.7","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"devDependencies":{"babel-cli":"6.24.1"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.1.9","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"integrity":"sha512-ValpCWQV9IxDSMZjPIzCaJRM8XiHaey/p05bJjo501ZCeoTYiCsnyzRY4yZ/TGtGLI9xvAyGrZCteyum8o7xVg==","shasum":"75797e1a623388a5e5107000b8dd02590f7e8d1a","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.1.9.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBW8aoaHmQXrUsmTNRKvUDD+P6CR7BfokcP/JKMH+z2RAiAZCw1xD1I7/fKQCrqkWSdmHJiHsbndw7ZC5Fjp7cynrw=="}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"greg@hurrell.net","name":"wincent"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.1.9.tgz_1503028233605_0.8139470599126071"},"directories":{}},"0.1.10":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.1.10","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"babylon":"^6.17.4","fb-watchman":"^2.0.0","graphql":"^0.10.5","graphql-config":"1.0.5","graphql-language-service-interface":"^0.1.10","graphql-language-service-types":"^0.1.5","graphql-language-service-utils":"^0.1.10","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"devDependencies":{"babel-cli":"6.26.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.1.10","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"integrity":"sha512-GtDBlSeNRqW6oRsZh5f963aOTOfcwXQPoNrXt0yBjq35dCqxCjulZmZdGwLx48qMucSMYqCGu3reuJeFU2pPfg==","shasum":"9787384a177d0d086b7dd27f3f4bd8392840c77c","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.1.10.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCKvSTwuQ/WNR+TfNuPiVfLz1RCBbIdvJltPRSzcMjd0wIhAIUdNV27o4PATtVk0Q28P0IVu2o8g6r+c5gPrZI3btQH"}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"greg@hurrell.net","name":"wincent"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.1.10.tgz_1503103793108_0.37491614930331707"},"directories":{}},"0.1.11":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.1.11","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"babylon":"^6.17.4","fb-watchman":"^2.0.0","graphql":"^0.10.5","graphql-config":"1.0.5","graphql-language-service-interface":"^0.1.10","graphql-language-service-types":"^0.1.5","graphql-language-service-utils":"^0.1.10","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"devDependencies":{"babel-cli":"6.26.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.1.11","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"integrity":"sha512-PqLBX42lkBl6psCMAuXzankE3ei6GlSJd8jO206/BOfgv2qU5ctHK/Q9cck3wNLFzZYltuLl6IRD6zum3EcHUg==","shasum":"030134daa6ea8569ab82734a812bc7dabe3ffd31","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.1.11.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIQDv5W4Yud0zSO3PQdQXEGFcBL1Ra0W1QyeMSr1zkvGJwwIfVglcktS2p8tdYfUNABPzBtXPyCZrrqCTF336eE+/xw=="}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"greg@hurrell.net","name":"wincent"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.1.11.tgz_1503213518717_0.14551691873930395"},"directories":{}},"0.1.12":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.1.12","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"babylon":"^6.17.4","fb-watchman":"^2.0.0","graphql":"^0.10.5","graphql-config":"1.0.5","graphql-language-service-interface":"^0.1.12","graphql-language-service-types":"^0.1.12","graphql-language-service-utils":"^0.1.12","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"devDependencies":{"babel-cli":"6.26.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.1.12","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"integrity":"sha512-7t06NkXRtkHxZSQAZ6hLmjGMJKBkngx3CcyRy3PuX4p8Ls518M54h0g411omXE4FX14+GEDjvsPZ8ZpCZI4Oeg==","shasum":"49ab8a70df90200bd190e295416501d542de039a","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.1.12.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHO+QAX4PbVFS+lqqhv8DA/UhLuzui66QqBWNI3H1YOmAiBUO+i6ScEsjmX/kgT1Ac0w62uAwoH3Ek03KVECXrCHhQ=="}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"greg@hurrell.net","name":"wincent"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.1.12.tgz_1503336908625_0.1102990536019206"},"directories":{}},"0.1.13":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.1.13","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"dependencies":{"babylon":"^6.17.4","fb-watchman":"^2.0.0","graphql":"^0.10.5","graphql-config":"1.0.5","graphql-language-service-interface":"^0.1.13","graphql-language-service-types":"^0.1.12","graphql-language-service-utils":"^0.1.12","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"devDependencies":{"babel-cli":"6.26.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.1.13","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"integrity":"sha512-9gD7Ys4Rv4J76//vYicm4DKVk8A/CDIZiVV2KmEvQzSoPpx0K1JDhVli11nNB/RLLj9gHyuvG2Ktrg8HPHcLHQ==","shasum":"383d36affb0e6149c1a84cffd0b4bba09d349f76","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.1.13.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDAC6EJt+DqqhM43DRIYdWZSM+EvoIgYxqeGGlhUHF1dAIgFIj0RIbMIRgVshb2PL+hbHs1I0YajLdbxTzVNCjS504="}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"greg@hurrell.net","name":"wincent"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.1.13.tgz_1503542451405_0.8261520829983056"},"directories":{}},"0.1.14":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"0.1.14","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"peerDependencies":{"graphql":"^0.10.0 || ^0.11.0"},"dependencies":{"babylon":"^6.17.4","fb-watchman":"^2.0.0","graphql-config":"1.0.6","graphql-language-service-interface":"^0.1.14","graphql-language-service-types":"^0.1.14","graphql-language-service-utils":"^0.1.14","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"devDependencies":{"babel-cli":"6.26.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@0.1.14","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"integrity":"sha512-fC9C99P/QdNxwtSeNhuxlg/0p6VaiezSU3qFll1OZ7X9CRMX1rvRGEaTVc6hP9FBXZmQtUI31LQEogCZ9UTmYw==","shasum":"78a8a4934f5facd5288f5eeedc3e622b74bb916c","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-0.1.14.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD7SbfkbttUo6tfCJPoZZFZmlHznzl0d6+7tiYobd2ECwIgT88IH72oTk1To7Z46irVlBxrZxcVZZaDztxsL3eB+84="}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"greg@hurrell.net","name":"wincent"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-0.1.14.tgz_1506665571261_0.1942097833380103"},"directories":{}},"1.0.15":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"1.0.15","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"peerDependencies":{"graphql":"^0.10.0 || ^0.11.0"},"dependencies":{"babylon":"^6.17.4","fb-watchman":"^2.0.0","graphql-config":"1.0.7","graphql-language-service-interface":"^1.0.15","graphql-language-service-types":"^0.1.14","graphql-language-service-utils":"^1.0.15","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"devDependencies":{"babel-cli":"6.26.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@1.0.15","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"integrity":"sha512-mJxf6+SYW75b+sKfdd2+hbN74IYVrPeKUEH31v3HqdIffAFhCt/usPBvrx2Yxu+8sdsC4WYxDXatBkciVdA33Q==","shasum":"57808595c8e5a37088bd38dcd6f93e0be112d47a","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-1.0.15.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCbye/485/7tS9NjzUQO01/UMPR6T1W+UkETbrHhlHg1gIgPBvo+qzBcy72Eg13jp4ApdEQoxeslLyH63TqmGKhrTk="}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"greg@hurrell.net","name":"wincent"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-1.0.15.tgz_1506982836191_0.43340306426398456"},"directories":{}},"1.0.16":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"1.0.16","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"peerDependencies":{"graphql":"^0.10.0 || ^0.11.0"},"dependencies":{"babylon":"^6.17.4","fb-watchman":"^2.0.0","graphql-config":"1.0.8","graphql-language-service-interface":"^1.0.16","graphql-language-service-types":"^0.1.14","graphql-language-service-utils":"^1.0.16","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"devDependencies":{"babel-cli":"6.26.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@1.0.16","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"integrity":"sha512-dBVjHRZJ8S4fcmdJQcNI1tWu3ZTDfjQLRQxu3CYzfGoyVG9q8Ne8dBdSMW2Q60biZ460dQmYF3NLElqtj+CWag==","shasum":"ed4d5579fdd18f9ee8c557c92c0695cc331bb976","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-1.0.16.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICDKcO0ekXG6RkWGT3AsWCJVBp1XNwW+UIj6CwBSEQegAiA1WqQJsfCgaMVAGQS5MT2K7KaW9MwejvsBolO9xoeJLQ=="}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"greg@hurrell.net","name":"wincent"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-1.0.16.tgz_1511295879557_0.791614871006459"},"directories":{}},"1.0.18":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"1.0.18","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"peerDependencies":{"graphql":"^0.10.0 || ^0.11.0 || ^0.12.0"},"dependencies":{"babylon":"^6.17.4","fb-watchman":"^2.0.0","graphql-config":"1.1.4","graphql-language-service-interface":"^1.0.18","graphql-language-service-types":"^1.0.18","graphql-language-service-utils":"^1.0.18","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"devDependencies":{"babel-cli":"6.26.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@1.0.18","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"asiandrummer","email":"asiandrummer@gmail.com"},"dist":{"integrity":"sha512-AgvT9lXbWF+E/M2Q0d5e3eTAYp32bUHf6bJDXO/UkvCnAPbG0eePNHn8RoDoJyj5SLetK9XD3yq/PUsSSXQtCA==","shasum":"ee5e8b6b11d5cf421cd2ec1d7bf32151e6ba22cc","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-1.0.18.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIH/zIEhfsI3A4PWxbnRPwINjUnPsE8Tloym/syWSKUV8AiEA3JMNPP0WGt9AXP4XR8x0EZYl155JvAx3WXb8X12pcJI="}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"greg@hurrell.net","name":"wincent"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server-1.0.18.tgz_1515031779623_0.0354799460619688"},"directories":{}},"1.1.0":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"1.1.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"peerDependencies":{"graphql":"^0.10.0 || ^0.11.0 || ^0.12.0"},"dependencies":{"babylon":"^6.17.4","fb-watchman":"^2.0.0","glob":"^7.1.2","graphql-config":"1.1.4","graphql-language-service-interface":"^1.1.0","graphql-language-service-types":"^1.1.0","graphql-language-service-utils":"^1.1.0","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"devDependencies":{"babel-cli":"6.26.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@1.1.0","_npmVersion":"5.6.0","_nodeVersion":"8.9.4","_npmUser":{"name":"lostplan","email":"sol@twitter.com"},"dist":{"integrity":"sha512-fNFXpCGF/ZuyOm8+tJ+Flht0djMm/YM2N9TcR9LxAvBkqaN25y/q/mcCgs8V/Rjyc3t35G3SawU5QC0Jq/Y+RA==","shasum":"270ad727f941ceca6768168caac14a7aeb087192","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-1.1.0.tgz","fileCount":19,"unpackedSize":144932,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDRW4nuTvkefPjK9liWbjj9gZTC+acVnlblnUi59AJH9wIgWGRPthZ9J7EG5KjzN0Kc1ndkzzO9Bg3tm+OISWNvmw0="}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jkassens@fb.com","name":"kassens"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"sol.plant@gmail.com","name":"lostplan"},{"email":"mgadda@gmail.com","name":"mgadda"},{"email":"greg@hurrell.net","name":"wincent"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_1.1.0_1523309927505_0.9781623777344677"},"_hasShrinkwrap":false},"1.1.1":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"1.1.1","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"peerDependencies":{"graphql":"^0.10.0 || ^0.11.0 || ^0.12.0"},"dependencies":{"babylon":"^6.17.4","fb-watchman":"^2.0.0","glob":"^7.1.2","graphql-config":"1.1.4","graphql-language-service-interface":"^1.1.0","graphql-language-service-types":"^1.1.0","graphql-language-service-utils":"^1.1.0","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"devDependencies":{"babel-cli":"6.26.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@1.1.1","_npmVersion":"5.6.0","_nodeVersion":"8.9.4","_npmUser":{"name":"lostplan","email":"sol@twitter.com"},"dist":{"integrity":"sha512-YPDs5wnQk7sh9eB3S5iF4KnGbFpKy7cZHXo+JhCeRlt1we7cx28Hrcx9rPWBu61czQ1tS4AHYnigt3x/FSUJwg==","shasum":"311a8d4ee82e23e050643900f0fd01da8fc11a54","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-1.1.1.tgz","fileCount":19,"unpackedSize":145340,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa1w93CRA9TVsSAnZWagAARZwP/0Sb75rw2xXrDSJumhWx\nlo0E/s7obtE6kzQL9kHoUzXoqvN1i3aVm6h50l6KcC2C87sGY09qKYAicND2\nmFEgmnZOEOeym2udBnHs2EfOcGPV6qNxOrgwgyywgoCujAI+UGFVg9YG8htG\nSFzX5bpqXPE68rQFFaA57FBvJoAwsATgPGkVonK3MMyZV3TM2XH5DieMViXL\nbkSWvTtPwFER0rpsTdrJ5TuXkN8o5yQFpzzQUxZTPUxkxYIC5fZhLMKHfPFU\nj7kF4O7O6BMkYXbcDT292rbwCWTHkmajQ1yzEnZ/Zp3gp62pNez6tbB+UzcM\nbgRzhbi7dTuMSh7oKcR8YTE+fIm4SyLtPLWPhgd3v5bo1Wsgu02crVBPLHl8\nNWIymdfUIMqly6MgwxtJmvL6KkCg56dlWV/Y5a/0HFa1ic0Sle9rnxfH1p1e\n6XKm2G6rX0bOs5GvK+AcyiM/LJo4ZNQeuynW4mmxxEiiZpfXkwrTjXgl/2T4\nOc8ZJ4mVk6+pETqC68S+jwomr8vVEhx+D6j8vBNSkAc9sO31TiXZ66ND7vi1\n+M5DZb67EYfunnIhcD78tJ9P1wK/T9FVmjXhifmjIVu6XyXSjDHvetGhihyz\nh1D4QLbtm1e/PW9pjjnCa8jQCuiMNelOlkyNpVYRin3jo/lKOWo8dw7XJryo\nMv+E\r\n=zCYy\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCpuKKeG7l2ilXK8SY6NXveU6Lyp2tcw/dskdK1fiGeRgIgCv5V5twxIr9IdpoBSeRnU26rXGtS3/Ud87oMFHCM8PY="}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jkassens@fb.com","name":"kassens"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"sol.plant@gmail.com","name":"lostplan"},{"email":"mgadda@gmail.com","name":"mgadda"},{"email":"greg@hurrell.net","name":"wincent"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_1.1.1_1524043639327_0.1109139091643847"},"_hasShrinkwrap":false},"1.1.2":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"1.1.2","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"peerDependencies":{"graphql":"^0.10.0 || ^0.11.0 || ^0.12.0"},"dependencies":{"babylon":"^6.17.4","fb-watchman":"^2.0.0","glob":"^7.1.2","graphql-config":"1.1.4","graphql-language-service-interface":"^1.1.0","graphql-language-service-types":"^1.1.0","graphql-language-service-utils":"^1.1.0","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"devDependencies":{"babel-cli":"6.26.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@1.1.2","_npmVersion":"5.6.0","_nodeVersion":"8.11.1","_npmUser":{"name":"lostplan","email":"sol@twitter.com"},"dist":{"integrity":"sha512-MEs67uy/TRkxbAZQUj9bGL/KHY3Fjb1gHd1oUDbIVbmOEMQQIrxYOfeQz2RCoCU5f9XcUs9F8fLFt/+djQXqjg==","shasum":"a4ec588e9e5a57087bfc264f55b7f61ccf925f6c","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-1.1.2.tgz","fileCount":19,"unpackedSize":145749,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa2MJ1CRA9TVsSAnZWagAAkW4P/1rI0mzuQpvZUnld9o+C\nezwJ7MTcHMA6OfFn2ZBV81gorvGMLOwe+MUAvpqKR1z4bhRIebYVqzDIgKkr\n4U/VhLVVKrGvibm2yX8jaxknhWwlzBwOGg9N7Ri7Wuzuuvg86CHtid7Gwv4C\nJsKalUrQYperYWMXdYWpJzIy4QDnfHnOIonuyK7Q3fqn6/AxOe6nWG0CPs9c\n7/POPQB/mbkFhNztjyqZogtIBnY0CWxG2iOPXpE4Xf7XN1xtCBYEQf8rIbWP\nLZmBhid3/Vanxn5lOOwG3PTk7T2nWB5zJp/WO87bE4VW3coYWgkCU/OgqAfQ\n3YHKFibWXcCFoWuTLxkvfsm5dcGi92dUC9jNhnSeu25b1cPAELaIQSbc06q4\ntbkFv9YWuDWZsDg5bIUAKkaXXjkcLOJbTHeYXIbdNwmcA2fHRagCWW/SBF0J\nJoIJKy5jrv/2pppsi/DZM8r/DrjjlIftB0dABp1UADXge+SeEmxYzpW8IvYT\n+WbUV5k25L03WjwCkjsh6hHICPl+1tll6dTzu8l28Nm3C21ozFcGvjkbaZ4H\nz0SuNQoMBjHQaxXhZARGfeiicsuvrPTwlA+HDXE9m+t8a0mrDBz0Ac6bpncR\nc/P5APKilP3Ws3leK9h82jRZcA3Dy/lCJx/RFFuAknCJRwTE+289FVkCZq9L\nhqli\r\n=kEOh\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGPelptGRmsPDL81RwgKmNsMPnkFRIsP2LGEmZKAdyniAiEA/HVVdQ2na7SCc75C/UCLnvYrJrfWi7p/U/lJVRN0x4w="}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jkassens@fb.com","name":"kassens"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"sol.plant@gmail.com","name":"lostplan"},{"email":"mgadda@gmail.com","name":"mgadda"},{"email":"greg@hurrell.net","name":"wincent"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_1.1.2_1524154996636_0.6610711271463847"},"_hasShrinkwrap":false},"1.2.0":{"name":"graphql-language-service-server","repository":{"type":"git","url":"https://github.com/graphql/graphql-language-service"},"version":"1.2.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"peerDependencies":{"graphql":"^0.10.0 || ^0.11.0 || ^0.12.0 || ^0.13.0"},"dependencies":{"babylon":"^6.17.4","fb-watchman":"^2.0.0","glob":"^7.1.2","graphql-config":"2.0.1","graphql-language-service-interface":"^1.2.0","graphql-language-service-types":"^1.2.1","graphql-language-service-utils":"^1.2.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"devDependencies":{"babel-cli":"6.26.0"},"_id":"graphql-language-service-server@1.2.0","dist":{"shasum":"efca7a229cff49c9da19ca45be081179cc8fdf23","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-1.2.0.tgz","fileCount":22,"unpackedSize":162716,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbFNWNCRA9TVsSAnZWagAAJBkP/16mUwRjnotgq0PlYnOi\nW+b2VSqheTfHCt5w9e/amVqF3mcPwiPDM1x7SI34PV64wp24rszbWY8drKFj\neksA4P9d6vcOsaybsJOm7jOoh2XSHC4d3bRUlEnx+Xkoql/1IjkraswzS569\nai0GLMY95AZbklpyOxme3HAzEoFlkMtBI2XtesxrqV0oi1iNAZA3CE1w31UQ\ng7oXBXEwsqkbSSM7V6rZoCoRpYs4NIx9YpzlGbv7fS98vYQ3JjT+4h+YKeG2\nGij0S9eJIRVChXaEcEcVCcubi71iGGw3Bmb+zF+fSHkUiazuw95OMq3Yfov8\n/JS4xIM2Vjk9GBSfpPv0U1e+zArXiXwmJ1ojpsLaw9E1upef8pDqWVBt4IlD\nTYNVCWdOE4dVdgOq9ykG6sEhnqUBAF+QRa4h2KnvvPPO62W/v7nzybZs/erp\nKDY+KzBb3JO+u7AFtmOpyf60iNLhNy8TKuVCJKqml8fPH2MWrfN0BsjfS9E1\nZP2FwrvOBP19eOGzVCSBQOp5kVZmZNwKQRVS7FHSl5QvIVvyx9LHAPsVdrhs\nyi+ItfT/uwPRQ6qalH8ovGiQM7SMhMxsF+GXL3KOiKDW9xWj0Q5/dyLP6TGj\nwP1tElD65nMa8AXWNdkGGULlRKDLkX0x7HZ3IWTGJVUjJl/gMnlXtdbudm8n\nEWgn\r\n=m8ZO\r\n-----END PGP SIGNATURE-----\r\n","integrity":"sha512-TsFIYrwr199o43hagIt0/74cCoWwWiDS137hZg/9yfv+nvbC0HGRdc5IAVIEwGlqZ9LYutqMlxIKCSvrZXdb9Q==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEP6nRmDToweo1JEIgvRa1APsQJUjYXSli1oViozt7+mAiB9Kj4g2hTYMMH7EpSs7ao2deoH3v0dk71MbVXSd/yYUw=="}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jkassens@fb.com","name":"kassens"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"sol.plant@gmail.com","name":"lostplan"},{"email":"mgadda@gmail.com","name":"mgadda"},{"email":"greg@hurrell.net","name":"wincent"}],"_npmUser":{"name":"schickling","email":"schickling.j@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_1.2.0_1528092045221_0.8046380458174274"},"_hasShrinkwrap":false},"1.2.2":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"1.2.2","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"files":["dist"],"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"peerDependencies":{"graphql":"^0.10.0 || ^0.11.0 || ^0.12.0 || ^0.13.0"},"dependencies":{"babylon":"^6.17.4","fb-watchman":"^2.0.0","glob":"^7.1.2","graphql-config":"2.0.1","graphql-language-service-interface":"^1.2.2","graphql-language-service-types":"^1.2.2","graphql-language-service-utils":"^1.2.2","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"devDependencies":{"babel-cli":"6.26.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@1.2.2","_npmVersion":"5.6.0","_nodeVersion":"8.11.1","_npmUser":{"name":"lostplan","email":"sol@twitter.com"},"dist":{"integrity":"sha512-Fcyw16i3QZ+gHZD3V3ee+0u6AI/rX1oMfsSdaRB9KGQvCszz3yydVnt+QLzz8CBZVOwivLXbS/Mha4ENmIxDUg==","shasum":"edd4840d29eb21d3449318dbff38d3bc5793d1b8","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-1.2.2.tgz","fileCount":19,"unpackedSize":162716,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbHnJuCRA9TVsSAnZWagAAAdEP/i/G7W5Bz52AfbqHGFsI\nVb5S4gt7PUHwwOJMIKkR/bYuh+eoybyC9+Lg9wHKWq7zASCPEdn3mBJRwy/K\nH/bCL7T0K4+W11ozOgIFELj4qAjwy14WotwFNscFKeNa4fBnCg9cOVHhY0LY\nyoMlfh1jQ2UMh2Q4CbpAB0NO9Ki6+b6uG/b24fgbm4SwJS8pEKYAcN4FJcYy\nOFPIyxm29W5Y8afwssngThH6/pdTVG9o7g8LSj3b/hxPgOnQjMULePwqMhVK\nivDRU10DsLgtHa0OOj0g/xd7Hec2Vk/So9PuJH61Vu3AjGQa6Gttz04t8CbH\nwBAK1V/okFIu+RKkEdVW9tknp5P243aAQUFie7YmLDoWKMBF8YXO6WNEQwoa\n0FNdF7nMfwS0qQk3LowzCYEZl1/uaBkv0aRslbKar88pFZ2joSOpJlI1rS6L\n+tVO+cmzEXDDislnuDyTaPFkoV0NgRpv6uRjFWPPDAjCDUkC764XtGiyxCEd\nxWx2TIKewrLwn4B372Rs7617A0oLxbe0NbVJYEfYLQA87wTKdZvvHkWQRPP/\nPD8JGke0tehSBkXGjMq3IolafP3Wx3axLvSt4CDOxNaCEfb5hN2k6hVrjv3r\nxJ/RIMYP79e1iYvrl+t6N7dNOWx8+1VE4h5uDwGk4iqhyzo5IncNdQMsUJF+\nopY+\r\n=MMME\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDL6bfgQjK8seJOuBFnLymV3umLGn2ufKimYeiqOlLQLgIhAM1xrbIcEW8UJnhgw/5yXaNr3NWrRff+WWB9aR3OGV2X"}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jkassens@fb.com","name":"kassens"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"sol.plant@gmail.com","name":"lostplan"},{"email":"mgadda@gmail.com","name":"mgadda"},{"email":"greg@hurrell.net","name":"wincent"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_1.2.2_1528722029583_0.5192073622821498"},"_hasShrinkwrap":false},"1.3.2":{"name":"graphql-language-service-server","repository":{"type":"git","url":"https://github.com/graphql/graphql-language-service"},"version":"1.3.2","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"peerDependencies":{"graphql":"^0.10.0 || ^0.11.0 || ^0.12.0 || ^0.13.0"},"dependencies":{"babylon":"^6.17.4","fb-watchman":"^2.0.0","glob":"^7.1.2","graphql-config":"2.0.1","graphql-language-service-interface":"^1.3.2","graphql-language-service-types":"^1.2.2","graphql-language-service-utils":"^1.2.2","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"devDependencies":{"babel-cli":"6.26.0"},"gitHead":"06a8f3049a69f8c85ce042dec70c4dbb3aa4ef67","_id":"graphql-language-service-server@1.3.2","dist":{"shasum":"9423ede58a5b7bcaa3bbcb42f39a6c9626f6787d","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-1.3.2.tgz","integrity":"sha512-HeI3U6RBDcjvd0EOAQ0moOOFrr8RlgF02JvD2oAjn34Ri9UgHMg2xaJyP+tvLEoJal+v2CYRIVEtRvho+jTjiQ==","fileCount":20,"unpackedSize":166916,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbkZWZCRA9TVsSAnZWagAAEloP+QF7U+yvudaYFGEp1kea\nq65SPNBtP76T+O875iGyOKBCAS8mnvgiMwv21z0JNou56aG7UQAytNk3Ts61\nU8xWfC91uES2BnMOKhTUqYBG6AG7V+RpfxzAtBsCAPmuZlBo2CH+0jaVJfmn\np28Wys4lzCIn3S3dt9ywPy1yXThSJe1+DTeaB1jl8bfdk+HvOLS63eF+cIjE\nYTOlAGjN3D2AqKduKSksqmcJbckrgxD9txOJp/gzlcDHCcX5Cw6/TSXFNeMi\nsI0+jI2UFcSAu41B+1mckr+5LOtTJxz/488PVPdnl3ttRTNB1DsBDfVhKgwj\n8/ON5I5i7x6cSw7ShMoPnwaeUO9k5NgYQjY7E32c0ma3LZWVOi1m89i2HvkM\nLOcC2DN6vgygtr9MTV6BsaEKaMLMHsezCYdfUTILrv+Uz84Z0QP7aH1TWGTk\nrNX4yczm8zyAUk6+6Jr1DNX8MEjcYWuR5LJ0wxt4s8OE7yEU+z0zIET3lNz3\nueWFiF2IsJs15pMA+ND5BSvZIr2EiLjtDwK5NnoknLzx3nX26WXCZS5aDe+H\nO1sERko2fRWw+ChGMRT8KaQn/7YSkiiw353xXN8yZBQ7rKjD5+XoOieolB0D\nPbiZLBy7C2wqjBqg7w753iNvcjpSTDBDCzSX3Gc0SqKHbUYzDzjg8PuAYXA3\njwA2\r\n=ZiAm\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCmzFltXHiQ8GIgELE2kl+o4z3FEB/CaasnTQ/CdgEydgIgGEW/BNLAoWjYuYGK5bFwUOt4d3uv5EDkeJkdPISscfU="}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jkassens@fb.com","name":"kassens"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"sol.plant@gmail.com","name":"lostplan"},{"email":"mgadda@gmail.com","name":"mgadda"},{"email":"greg@hurrell.net","name":"wincent"}],"_npmUser":{"name":"ags-","email":"agomezs@fb.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_1.3.2_1536267672704_0.018616813905306007"},"_hasShrinkwrap":false},"2.0.0":{"name":"graphql-language-service-server","repository":{"type":"git","url":"git+https://github.com/graphql/graphql-language-service.git"},"version":"2.0.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphql-language-service/issues"},"keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"npm run build-js && npm run build-flow","build-js":"babel-node ../../resources/buildJs.js","build-flow":"babel-node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"peerDependencies":{"graphql":"^0.10.0 || ^0.11.0 || ^0.12.0 || ^0.13.0"},"dependencies":{"babylon":"^6.17.4","fb-watchman":"^2.0.0","glob":"^7.1.2","graphql-config":"2.0.1","graphql-language-service-interface":"^2.0.0","graphql-language-service-types":"^1.2.2","graphql-language-service-utils":"^2.0.0","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"devDependencies":{"babel-cli":"6.26.0"},"homepage":"https://github.com/graphql/graphql-language-service#readme","_id":"graphql-language-service-server@2.0.0","_npmVersion":"6.1.0","_nodeVersion":"10.7.0","_npmUser":{"name":"lostplan","email":"sol@twitter.com"},"dist":{"integrity":"sha512-bwFikPFvMrYXFPXR4UWt791WFYyTRjERj/GrVCf5XR3S7xn8bJrRUvCfvErQABTPBYeTNpk8oumJglIM7KOMow==","shasum":"d6a89b77fe501282cbd8c05e1b207b8c6b05aa3e","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.0.0.tgz","fileCount":19,"unpackedSize":165188,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJboRNcCRA9TVsSAnZWagAAt90P/3sZZmQmmUOVDmtxXTgl\n8E2ovyDdV3oIYAmYRHAWu0J5Q/DGLxyhdB8qzMKn3a9I5CiOvAVp4QTyMR8h\nUG8wld872bg4kbfbF3ciwEQwhVkddRGiKgWZkeVu47heccL4zlI/CmqUBgmf\nYT1ZgLaLFlbJmnx8Ym5ftEygNItorTosQAiYFCoUxBXHkuiL6kUuMuSg5Dgz\nK61LeqTCteg9ew8Ts4MIXtSgBALIjh1lQX3tefqhTnOYLpNiM4vZRvfIdpM+\nEYgsayeRevSgGidSHg9WBKCnZDE9nDumRGcEXsHkENXPUBvtY+5PfVqXey//\nss6F4P3zb+7m7mU0edzuvbs5mEfE5JbX1CYKi+98L8nbfpzGKWSPECjtmvJH\nt/eLjk8xbbpsSktrOUtf5CgVlb7KqGFWMvbaiBbX+PSFdU6IWZ0x9MRglONU\n5PWlGm1JYbq/IxbuKf3Iho82pICuU5KmjtMPoSqbaw5gBL2LV2ZcQeJSwO5n\ntyHatEQRKpJpagnojL4hL8kJNsaDcU6CbObT/c/V73KeHNmwh8SCXN79Cfyy\nBhowB5zvazRapYUYtWzrqB47X4qiFOl15lSNVyhsQHAHEaGHIgrFftZh4iT0\nL9ax437/QV/M84Sr4ZrDlRfKn82uF5jzLL0+KWSucedKWG0qeQt19/d9vu+f\nsRAY\r\n=XUAs\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCWpNrXRb4sdMlUWCihOozVsyk3M3ROiNgeZTcvixSY2AIhAOTJSXWi3WlcpxAgl8NWNKIjmi59/E27hiAhYCbj8w18"}]},"maintainers":[{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jkassens@fb.com","name":"kassens"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"sol.plant@gmail.com","name":"lostplan"},{"email":"mgadda@gmail.com","name":"mgadda"},{"email":"greg@hurrell.net","name":"wincent"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.0.0_1537282907364_0.004059488410634193"},"_hasShrinkwrap":false},"2.1.0":{"name":"graphql-language-service-server","version":"2.1.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"https://github.com/graphql/graphiql/tree/master/packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/master/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"echo 'Please run `npm test` from the root of the repo' && exit 1","build":"yarn run build-js && yarn run build-flow","build-js":"node ../../resources/buildJs.js","build-flow":"node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"peerDependencies":{"graphql":"^0.12.0 || ^0.13.0 || ^14.0.0"},"dependencies":{"@babel/parser":"^7.4.5","fb-watchman":"^2.0.0","glob":"^7.1.2","graphql-config":"2.2.1","graphql-language-service-interface":"^2.1.0","graphql-language-service-types":"^1.3.0","graphql-language-service-utils":"^2.1.0","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"_id":"graphql-language-service-server@2.1.0","_nodeVersion":"11.12.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-tNgfXZEv8OLTTf4g4neT3emOsnHKzdqj/bPM7Qo3Zz8vDHsX+A+xqRH17Tdwpb4mZ3sJydXQVrz6QPGKDqVvEw==","shasum":"cdf7c397bcd998b9704de4e97c51ce5c00af1cb1","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.1.0.tgz","fileCount":21,"unpackedSize":186436,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdWY8tCRA9TVsSAnZWagAAKLUP/0EeljaMhbqJjIzX4g09\n7ysc8wCTrMb2IZLUku2eKOOxH0J08iz5JlIsg/Jn30nIeZTBFGsN3xjfHZn5\n5m6FE4MOAZZ9km4rijVW2xPYwytXDcc0ia38N6YPQ8d92TZZy/59m9KNJ7hI\naU0P3x76QE+emeRMZjOucve/ThbjLtMmto89u3/2SIz8CsaXL5x+Y5+m/Rev\nQUYPCr5UQmkvO1QO20hLB2FVLRWKi9D6xrogHt9YutpTGcpNppjueHN0pHI6\nCk8eE3WGNIllIQfLtB5mQ/yQyuJTun46QY///cGK1cn+2XNmXssy7MyrDZbc\ncHFcZqHQPT4m74JHeQFySGh4b46bfG1GKY2HzXJe2j+C+DdhmcheN/J4C6Xq\nMESHsOsZZM+oLY5NfaYMhahYdMT+hZtKY1vHGsRMn7tkVI+WyPiSrzDntdQY\nj+mid+y74AeXr7aOiIDyRwm8g6X3qSDKfdYfVsEGRAb2PBR6ATs3d49a2MyV\nPsM1w4trasjwkPYrKIVt6xYxu8ypVQbWSrot1+PlYw9c9F3brZPJtFdixpaF\ngZ3nMIOKnEeSf9bgNqm3YZspiEFb5QoDme74gCrK2imtmCrgph5avDCvj8NZ\na3ESMlC7AN0FSHxY8I1xfIXHQXIeoKsObTI6z6/Hppl/5X/oBsXScvgnbxNE\nrXT5\r\n=SgQc\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIE8aKsfvxNWUD7ykqW3v+fGcrArfjnZTIfEzRmfI4iImAiB39cSJiyslAbEdJDwfiODqIHbQSLhwa62YhGn397+TIA=="}]},"maintainers":[{"email":"agomezs@fb.com","name":"ags-"},{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"jkassens@fb.com","name":"kassens"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"sol@twitter.com","name":"lostplan"},{"email":"mgadda@gmail.com","name":"mgadda"},{"email":"schickling.j@gmail.com","name":"schickling"},{"email":"greg@hurrell.net","name":"wincent"}],"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.1.0_1566150444437_0.3820522224169087"},"_hasShrinkwrap":false},"2.3.0":{"name":"graphql-language-service-server","version":"2.3.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/master/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"node ../../resources/runTests.js","build":"yarn run build-js && yarn run build-flow","build-js":"node ../../resources/buildJs.js","build-flow":"node ../../resources/buildFlow.js","prepublish":"node ../../resources/prepublish.js"},"peerDependencies":{"graphql":"^0.12.0 || ^0.13.0 || ^14.0.0"},"dependencies":{"@babel/parser":"^7.4.5","fb-watchman":"^2.0.0","glob":"^7.1.2","graphql-config":"2.2.1","graphql-language-service-interface":"^2.3.0","graphql-language-service-types":"^1.5.0","graphql-language-service-utils":"^2.3.0","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"_id":"graphql-language-service-server@2.3.0","_nodeVersion":"11.12.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-nDRFpRH2qhNTQt8qLysosWzummBd9xzVMiSQVf0EvQHh9gwD/KZccGBdryxCtFndcvh0PQ5ODGBlh7HoFXd8xw==","shasum":"3e29edfd799a82a06ed299f45a68da749c3247aa","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.3.0.tgz","fileCount":21,"unpackedSize":190333,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdluUgCRA9TVsSAnZWagAAWywP/AkzVZHBLpsHiut3MagU\nR7IZedYtAcJT9mSLuIvvpsr6m8SS1VZmfLCoB03Fcv4wMzPpc4sTSS0b1Ybr\nVLcs11B1u8A4DXmi63Ofn9NidGXVMSHhQLNe0N0AS1m1ED6+PYz4fAFEbfAT\nPho+ayjRipIBlPNoe3PMpepJb0xjGV97eWhODwGu6PGz8soCjaYW6BXhS4dD\nFJhwUY3TO510qNW0fsjSQqPCV2tG0PxKR/J7eWo819RZADOrMfg7PB9acR2h\ndp8+AM3xMa+Vx8rA4L1rnz9ciwF0NGBz1n0k45Phr9iRm4ZsvtFFk0+nHOzx\nknlpEnOUSDH4NmMg6MWBkkAZRGCTWvi312ut0Yru+QnxdhJx6I9kETLnhRtm\nOruiQq+lB7l5tEMJvzwIUzP5+LHme/dFapXRabsOSTCAlPm7q5IN30ikGT+d\ndFgKXUp+6l+E3kntdDDSZd/yT4GM7a+YbXJ1ftTYKqtoY0R8sQqbewV+y5Fq\nE1bnqJsUDMqoG9KZqfbDiPayRrvcnrBJFOLx6XxLzkwRSiciyMo46wsoLvJ/\nub7OVSSwZJF3mELLTm8LZP5Ap/IbvoJGu+GUSSIhKw3DRkjFKdGq1zKYbpM1\n/8pZ1capnsIInlW98+cwe3Rux71kcfMDkn5SWBFSukPaZHPVKvDQKtmK7tRk\nNkhY\r\n=Avxf\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGFXAjx4AJNxHNXuHBai1juGsWRaW8CVS/lCofKdxrF2AiAKndiOiEzvEhZqzSHn++xd3Dm1jBmFicbUdJ0wKaHzCQ=="}]},"maintainers":[{"email":"agomezs@fb.com","name":"ags-"},{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"jkassens@fb.com","name":"kassens"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"sol@twitter.com","name":"lostplan"},{"email":"mgadda@gmail.com","name":"mgadda"},{"email":"schickling.j@gmail.com","name":"schickling"},{"email":"greg@hurrell.net","name":"wincent"}],"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.3.0_1570170143466_0.40348043380976417"},"_hasShrinkwrap":false},"2.3.1":{"name":"graphql-language-service-server","version":"2.3.1","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/master/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql"],"main":"dist/index.js","scripts":{"test":"node ../../resources/runTests.js","build":"yarn run build-js && yarn run build-flow","build-js":"node ../../resources/buildJs.js","build-flow":"node ../../resources/buildFlow.js"},"peerDependencies":{"graphql":"^0.12.0 || ^0.13.0 || ^14.0.0"},"dependencies":{"@babel/parser":"^7.4.5","fb-watchman":"^2.0.0","glob":"^7.1.2","graphql-config":"2.2.1","graphql-language-service-interface":"^2.3.1","graphql-language-service-types":"^1.5.0","graphql-language-service-utils":"^2.3.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"gitHead":"1a24c79073c70690d4a1b56080a58c8158fb11aa","_id":"graphql-language-service-server@2.3.1","_nodeVersion":"11.12.0","_npmVersion":"lerna/3.16.4/node@v11.12.0+x64 (darwin)","dist":{"integrity":"sha512-qF0Idm17LfoIrKXDRj8XK3WlwMSIf7dH8IWsfuUMz3Aj7Iho+UTj3myKadafXrA4CEpgDVHqJ89x0JJdI5cFtA==","shasum":"415926dfa1e3146c7ba4d8026cf4000058683ff8","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.3.1.tgz","fileCount":21,"unpackedSize":190559,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd3bFjCRA9TVsSAnZWagAAmgwP/3ejGcyg4A7Zsqb9db/D\nSZgSTnr1yzO5gtYlNNZ5NtM1P16GxDcY8EZl0e2Co7CoqOYsokfvP4vkQe4+\nUxB26+E8RRlHbFq3esOWpd5hbrZDUXBninxR1DHD5Ygiv13E1XAbVUiL5MiB\nHpARxu8vpoNT7vhpLuuy5Q0aqUfrQ99d00SNMIs+GFtE2tirYEmw/52rwBRh\nWP6yKRse7g4WbG3o9VPKAfYC25cSPoVw8P9AgG3jpauo743hCfymuN/mUaUl\nj4TpZ7C3a+5CG6Z0Jy164f4AI8EMtw3G2pRWIBO8uGkFEak/5i9t7iaIPCy1\nFPUG2N51HfDwGiOOQH2JBzCFizRfhx19Wg2eZmNisx7FfuNsXDgLkS2T40WE\n8h9pJiAQ1tNpyJ89Qv/DVlq6FGIEToGjRhvfGM8w+2/rfkIY2FIp66BrbD29\n1EEwLJyiDW0R6PqPl8qpEQGae/ijqoxaHKSH+96MqqJKnOOFLZ3lMJKBgQxl\nlUfiMs1SzPqIeMiTVmACvbFG9PJFxmZPkz81TUOHxI5VjIra69CBJ2YzhvKA\noZC6Ex4FRobeEMYIJg/iDelMGyMXJ5A8o6tGVsUTAp20EyQ5uRtLohtL6I2V\nB7eyGGXLnBEPdengadkQS5q57DDLBqvbymtHgZIlDtZf1+ihLLhol9dQhPWZ\nFN70\r\n=MvzJ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDP4fO+lZUk4HdWw/zG4OgU7/pW7cjTxhE2zyhriqIHRgIgRY9x4a2u75mHivA/JK2QuoVtMvDtzlA65F3TPyjymTg="}]},"maintainers":[{"email":"agomezs@fb.com","name":"ags-"},{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"jkassens@fb.com","name":"kassens"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"sol@twitter.com","name":"lostplan"},{"email":"mgadda@gmail.com","name":"mgadda"},{"email":"schickling.j@gmail.com","name":"schickling"},{"email":"greg@hurrell.net","name":"wincent"}],"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.3.1_1574809955123_0.05980713168025997"},"_hasShrinkwrap":false},"2.3.2":{"name":"graphql-language-service-server","version":"2.3.2","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/master/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","scripts":{"test":"node ../../resources/runTests.js","build":"yarn build-js && yarn build-esm && yarn build-flow","build-js":"node ../../resources/buildJs.js","build-esm":"cross-env ESM=true babel src --root-mode upward --ignore __tests__ --out-dir esm","build-flow":"node ../../resources/buildFlow.js"},"peerDependencies":{"graphql":"^0.12.0 || ^0.13.0 || ^14.0.0"},"dependencies":{"@babel/parser":"^7.4.5","fb-watchman":"^2.0.0","glob":"^7.1.2","graphql-config":"2.2.1","graphql-language-service-interface":"^2.3.2","graphql-language-service-types":"^1.5.1","graphql-language-service-utils":"^2.3.2","nullthrows":"^1.0.0","vscode-jsonrpc":"^3.3.0","vscode-languageserver":"^3.3.0"},"devDependencies":{"cross-env":"^6.0.3"},"gitHead":"ed12bf7719e73c4c339779988a0e10b65be1d34e","_id":"graphql-language-service-server@2.3.2","_nodeVersion":"11.12.0","_npmVersion":"lerna/3.16.4/node@v11.12.0+x64 (darwin)","dist":{"integrity":"sha512-X7S6q2j0WNxqJ4nvsZYyUeZgewDItDRjbBuLQyX8wM7tnZE1Z4pnmGvCU2/WDXH9lq1YNld20vOVggYkjgpi7A==","shasum":"e8b8a25748e3053f33ef000b0499733eb9f61932","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.3.2.tgz","fileCount":32,"unpackedSize":209559,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd5dwJCRA9TVsSAnZWagAAkNAQAJ8oBmHEdyVLaOxovnYb\nauvTfWJGccgGF1rGLnndb7ycIOkAOrbMPGgHVrA4gEtGJZSYb8/t6Up8V6LT\n3oJ7ttjdUhMsEPdZxv31yIojufU7vtVYXMZmjTTBLzMh7MAPBcClXi7gJ+i8\nHaWDVmwZ2EsniDqQEkCmWvdinxSSB6c+EkfOrAHtcvCOUrs0HpiYBzH6Vhvw\npwLmXNARvZxdwSkoeDdxNsTFE2LH+2UCiRoXpTT1t179tfhbPPeAywW3ZH+M\n81JemQHp/zEgxOQqs8yv9GPoXd5dKu3JvKOvZ0a2a8T24zIsOBC2W32kZkW+\n0p8sZljz7CCnVyVQlgD4tGSBiWP3bAS18xdAE453SeZplOtMnHh1DyTy2R3N\njKJBAK0wEQjlvMau/woTHj5p3go+RE7zq2QxPHUu9sf17h+UWDwnE8Hc5o4A\n/sVYoKK1f/byhIWvVzFlMFNvhmY8JPM1zyWFhkT82TFX+ujA/DgdxF+obISo\n3dfbsawaypyfqcqiPa8IZPaKlBqSVMgP5WI5Lx+ss+uazpRZnW9pDYr6YBM/\nvKxx/i6ThOlsB3Njy+ou27M2oUmqPAiqtv4XGAIt7AGxuJjW9Z+LeWe7viyj\nYHkYEAznq2JOmoSWG9F56OyNikUAsjL4k/Gb5+oqc1g5sUcDzSPoXXJIyu97\nCd/8\r\n=GXAF\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD7S4Lr3+RXit5OpZ5SwfCpbGVPjkuLPKxr3Gn2yeLmggIgLOWFBeBYyX4B2Elt5LMLWekdPuoD0spNSKVpfWCq7+c="}]},"maintainers":[{"email":"agomezs@fb.com","name":"ags-"},{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"jkassens@fb.com","name":"kassens"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"sol@twitter.com","name":"lostplan"},{"email":"mgadda@gmail.com","name":"mgadda"},{"email":"schickling.j@gmail.com","name":"schickling"},{"email":"greg@hurrell.net","name":"wincent"}],"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.3.2_1575345161195_0.9241158583873541"},"_hasShrinkwrap":false},"2.3.3":{"name":"graphql-language-service-server","version":"2.3.3","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/master/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","scripts":{"test":"node ../../resources/runTests.js","build":"yarn build-js && yarn build-esm && yarn build-flow","build-js":"node ../../resources/buildJs.js","build-esm":"cross-env ESM=true babel src --root-mode upward --ignore **/__tests__/**,**/__mocks__/** --out-dir esm","build-flow":"node ../../resources/buildFlow.js"},"peerDependencies":{"graphql":"^0.12.0 || ^0.13.0 || ^14.0.0"},"dependencies":{"@babel/parser":"^7.4.5","fb-watchman":"^2.0.0","glob":"^7.1.2","graphql-config":"2.2.1","graphql-language-service-interface":"^2.3.3","graphql-language-service-types":"^1.5.2","graphql-language-service-utils":"^2.3.3","nullthrows":"^1.0.0","vscode-jsonrpc":"^4.0.0","vscode-languageserver":"^5.2.1"},"devDependencies":{"cross-env":"^6.0.3"},"gitHead":"6b091a7fd9793d1492023af1d3e1a8cb5a0509fb","_id":"graphql-language-service-server@2.3.3","_nodeVersion":"12.13.1","_npmVersion":"lerna/3.16.4/node@v12.13.1+x64 (darwin)","dist":{"integrity":"sha512-BhowdUs2wHqp2NiSHTlNLg3kysU1xpxSzU9bzootXBsND7osd+7V7repDrAxOHrLWcrLd0+wRwdPCZFPCYr4yg==","shasum":"7558df19cdf3e690a844f8d497dfbde0c112aba5","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.3.3.tgz","fileCount":28,"unpackedSize":193588,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd7lMkCRA9TVsSAnZWagAA4o4P/jVDObnBrOaC00K0bkm4\nx0poW1FrVYIpPXtMGWaSWTsEGkdemWClwxqOxLVH8s32tFAHw7pBHGXLkjP2\nGo7KcBZ9PBd7Mn0uIxOXnupiHkq+OEe86TzUMIlxRP7Ah01FDYIEDm+9LMoy\n9EEywojSiSECpExaWVW6AfRfSjV8n++V+9msa379PAbvHKDgTTFMXi5sCNDa\n6Bd+yuJHp3V2IE5cKYrnTyL0iOzFzDg4o146Etl4ix4o7LCg9mjb+mgk1I5R\n1aHGcntvqx+UMdRwCsdWZ3n1A9AWs3dbKUUXmvC98WcdPi+1nVWRHHP2p0vu\n/zPFBoKt1F8A1XwjXYrNS/MeMmMPAubfefRhayN/DYyVTLbf8Y+DGOcFrWji\nLK7uEFBmrgkYijBDos7wA54+1lg+B7YrZAjBvJymnUsze26h6Hftt9DLIv+/\nbB16ty7pmCm3wDyee2QJIUerCIWy1oG221oQNyRfgGrV3uknREwdfXkWU5zs\nr0uMtEv6hzdxfvaLpTBo61Pc3DYnF2E3JUZ/CQQ0k5k3aHWuNdg+Hx67qLvB\nEOdTzuQDnxZAa19vXcf3xyJhx+EdX69ufWQu1Er1eICjLZHJwhfHX00Ea01K\nIrGL/OhuE5xxd6+EdLX9fkLC2AUYZbiMPzlVdNRhZZT6wHaz/ga4CuvPiPnV\nFlwk\r\n=Ycfv\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEfN2QNl3q99zvjjVvh0vodUZARU66rbkwApi9ti3vH+AiEAgG3jKCpkEIp8kq/RR8e9nE8hgIgqeYtE2yt+5Auv5l0="}]},"maintainers":[{"email":"agomezs@fb.com","name":"ags-"},{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"jkassens@fb.com","name":"kassens"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"sol@twitter.com","name":"lostplan"},{"email":"mgadda@gmail.com","name":"mgadda"},{"email":"schickling.j@gmail.com","name":"schickling"},{"email":"greg@hurrell.net","name":"wincent"}],"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.3.3_1575899940244_0.2646018872173763"},"_hasShrinkwrap":false},"2.4.0-alpha.0":{"name":"graphql-language-service-server","version":"2.4.0-alpha.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/master/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^0.12.0 || ^0.13.0 || ^14.0.0"},"dependencies":{"@babel/parser":"^7.4.5","glob":"^7.1.2","graphql-config":"2.2.1","graphql-language-service-interface":"^2.4.0-alpha.0","graphql-language-service-types":"^1.6.0-alpha.0","graphql-language-service-utils":"^2.4.0-alpha.0","nullthrows":"^1.0.0","vscode-jsonrpc":"^4.0.0","vscode-languageserver":"^5.2.1"},"devDependencies":{"cross-env":"^6.0.3"},"gitHead":"917c3931634cf27eb31a0383ff7c15ffd902d221","readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/master/packages/graphql-language-service).\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.4.0-alpha.0","_nodeVersion":"12.13.1","_npmVersion":"lerna/3.20.2/node@v12.13.1+x64 (darwin)","dist":{"integrity":"sha512-r1zQ1LNznefDCpyJo6WMsvWPxAr3fqTLDZDpZmJuT+ozCFyHvoObvn2W5ZkU8FuuN2tlEhCNQDTVGaRdwqw0/Q==","shasum":"33a8868d2d57fc9947073186bdc340bf6a207fbe","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.4.0-alpha.0.tgz","fileCount":60,"unpackedSize":229834,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeIxnJCRA9TVsSAnZWagAAtpYQAKHohDARetbt/EJnpwf+\nbKXG1i2/pNNeUQ38xMIwyIsAfPFUWu7CldPY7BAG/GP7AEn8tPj8Aap2gczw\n5yI3ICJG0VT2M+F9+Hp1cHjGGWkL0NwnSCGsHcU2yb5nMnmkKOnbgHJTntze\nbFGSLmD+z6FRMYjWIHR6e7HMUGDnYSHWojdHkFCF8X2+MMkXoPiczFNIEhny\nLO3EuRkjX3oyZh3NslFzSKU6+YvKh9IpPMhUVEJfRoY+DyDRGSDDWtfV9Acw\nNvJag2/00gD9CD06v+Y3i3czqFyM608hLbxMiLbf1zJbWL68Z7B3gBm2A3oK\nv/bGEWrnzRtDcN2G/bSTMvCKBzlbiGBE0sDEFQ8FF6zyrjOVUlw5BymeUI5S\npmLTrf8SjFybIxRbr7kjKBNUy2LjrbgX/SMclS/Uc2HncdInMwh0M8duE4Hi\nd3TqYzB7IAxQf3Vbr5YQBeMEXH9JZT8486WjELExFTz64ivZKmUMA9UZY0rO\nsa9PFfZG9mH1eIO+otMWFL8MvuSBCeuArYtpcTbmRrIcUjT6+je3hCmh7nax\nr1NumX816xIoZ+G0WJE0EqoFgF0raaP1o3lYN2tTtyIx5ZL7NVS6MRpKuYhR\nFSkxzMe+KDAItZ/TWxeXTC4rxl3YmUuWE7bWIdcmvExiQdBnh5L4SKviDq6J\nONba\r\n=Pfz4\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDiE8PjJlGkRkmfHPJMsy8ollxthlC1697nnnu3B48myAiEAtVveNfpH6oTax/pWVXFMCXxKT40eytHaJSPHTea+8l0="}]},"maintainers":[{"email":"agomezs@fb.com","name":"ags-"},{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"jkassens@fb.com","name":"kassens"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"sol@twitter.com","name":"lostplan"},{"email":"mgadda@gmail.com","name":"mgadda"},{"email":"schickling.j@gmail.com","name":"schickling"},{"email":"greg@hurrell.net","name":"wincent"}],"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.4.0-alpha.0_1579358665501_0.6076600166605195"},"_hasShrinkwrap":false},"2.4.0-alpha.1":{"name":"graphql-language-service-server","version":"2.4.0-alpha.1","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/master/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^0.12.0 || ^0.13.0 || ^14.0.0"},"dependencies":{"@babel/parser":"^7.4.5","glob":"^7.1.2","graphql-config":"2.2.1","graphql-language-service-interface":"^2.4.0-alpha.1","graphql-language-service-types":"^1.6.0-alpha.1","graphql-language-service-utils":"^2.4.0-alpha.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^4.0.0","vscode-languageserver":"^5.2.1"},"devDependencies":{"cross-env":"^6.0.3"},"gitHead":"dfd2eb817086de87a860bc9230a79ac4bd547c24","readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/master/packages/graphql-language-service).\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.4.0-alpha.1","_nodeVersion":"12.13.1","_npmVersion":"lerna/3.20.2/node@v12.13.1+x64 (darwin)","dist":{"integrity":"sha512-uVI9N+fo8Di/VrpFjkcoX+OldUfY+OREDOXJpLfh7KJUIQe6tfah0AoONo6pvHM5PtA4QdEHBkeHdj95qTDL7g==","shasum":"a7114d48fcd09664d65dc6efc8e24b3237ee683f","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.4.0-alpha.1.tgz","fileCount":60,"unpackedSize":230364,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeIx1JCRA9TVsSAnZWagAARD4P/jYK9MwSVb4w11mN/H/A\nCvfiZHkFZkJ+X/D2osPQ/Xll7FAu2k4ugtQ6+gx0XLvj+Sgl6oNVBJ0V8uMO\nLyMS4xT+ZbAWY/eOXHgdf/CpEVUHHtuqAyXaK5F2KGf3/U2Wm2ZB2XS/gX/X\noBxe1OH9Ya5vpt3x6Gb9lEx72IqgLqSNFLvSrdkujM8je+3ahnIgHn3M51Lj\nYJuaPf+PeZoja86WdEG4jhsHwJ5px0OL/lfLUMotlF/7UbERBZdH8mKX0D9K\nVVxamDk8yb2Jcsar/u6AJg1WNCPe94LzEkCwKlD/A4B0j8iGIO7F7FDs9cYq\nrS3UigUUJw4zDZA1NNJVKNutQHDTPwIPl1J6Vr4yekGH/N6Qr8ySkLreWNih\n1x8a1RxlPXDsjj6k0VfdDpQSk2k1UwF0K3ooO3Bjr+HMPqDzhjPD+iDDJ0ZH\nVunKbhz6WSIAqRrf2NaNg9LKqOH+5qGxC16H1Rx9+qDJu7IvlP3hFDpYvDRv\no9+B/jqxvcUYNxRrAuyc8Hgy3Ew0FiVEPtmU2wTC7HM94kYcXxGhJSfCPj86\nKqGZj1AX0J0x4VvFNDeKJAAOm7McgHEe3DC93+qql1EH67M+1qoB228qa5Ko\nNX/keI2KNOWZOdcKjfqBid7+6u2AwqIzYv/BVoiym4zDn6HEjvUPBkLcMV/3\nAKlL\r\n=tkwg\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDYvqbyeDFh+m81KgMY/mNnVGclrEj2LYZRjAMCtSM0eQIgTbQzeYkYPKJr5RCZLIDDAsW4zACWzuD1AK6BvBSKF8o="}]},"maintainers":[{"email":"agomezs@fb.com","name":"ags-"},{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"jkassens@fb.com","name":"kassens"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"sol@twitter.com","name":"lostplan"},{"email":"mgadda@gmail.com","name":"mgadda"},{"email":"schickling.j@gmail.com","name":"schickling"},{"email":"greg@hurrell.net","name":"wincent"}],"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.4.0-alpha.1_1579359560798_0.7257926550039999"},"_hasShrinkwrap":false},"2.4.0-alpha.3":{"name":"graphql-language-service-server","version":"2.4.0-alpha.3","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/master/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql"],"main":"dist/index.js","module":"esm/index.js","typings":"dist/index.d.ts","peerDependencies":{"graphql":"^0.12.0 || ^0.13.0 || ^14.0.0"},"dependencies":{"@babel/parser":"^7.9.0","glob":"^7.1.2","graphql-config":"3.0.0-alpha.17","graphql-language-service-interface":"^2.4.0-alpha.3","graphql-language-service-types":"^1.6.0-alpha.3","graphql-language-service-utils":"^2.4.0-alpha.3","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"cross-env":"^7.0.0"},"gitHead":"330de751977bc479a8f82103f8bb5620787f58ae","readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/master/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```\ngit clone git@github.com:graphql/graphql-language-servic-server.git\ncd {path/to/your/repo}\nnpm install ../graphql-language-service-server\n```\n\nAfter pulling the latest changes from this repo, be sure to run `yarn run build` to transform the `src/` directory and generate the `dist/` directory.\n\nThe library includes a node executable file which you can find in `./node_modules/.bin/graphql.js` after installation.\n\n### GraphQL configuration file (`.graphqlrc.yml`)\n\nCheck out [graphql-config](https://graphql-config.com/docs/introduction)\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.graphql'\nextensions:\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `loadConfig`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/docs/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  config: loadConfig({\n     // myPlatform.config.js works now!\n    configName: 'myPlatform',\n    // or instead of configName, an exact path (relative from rootDir or absolute)\n    filePath: 'exact/path/to/config.js (also supports yml, json)'\n     // rootDir to look for config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n    rootDir: '',\n  })\n});\n```\n\nThe graphql features we support are:\n\n- `customDirectives` - `['@myExampleDirective']`\n- `customValidationRules` - returns rules array with parameter `ValidationContext` from `graphql/validation`;\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n## Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://github.com/Microsoft/language-server-protocol/blob/master/protocol.md) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                  | Stream                       | IPC                                         |\n| ---------------: | ---------------------------- | ------------------------------------------- |\n|      Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|   Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|          Outline | `getOutline`                 | `textDocument/outline`                      |\n| Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n| Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n|      File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.4.0-alpha.3","_nodeVersion":"13.11.0","_npmVersion":"lerna/3.20.2/node@v13.11.0+x64 (linux)","_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"dist":{"integrity":"sha512-3rrulNd4clqkmZnAYx2wHrBEDxBHRyOA0+fa4WhivuaDR5mdANsoBC9h/eA0uEgMsCnDUqORBMU6tWoy+52vgw==","shasum":"fc362238759ff580714fe699b6c3ccf66bd84c93","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.4.0-alpha.3.tgz","fileCount":68,"unpackedSize":253026,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJedUNQCRA9TVsSAnZWagAA2/kQAIbhA6Yxx0lwH09dVxkk\nk3jF3H1M232luFZHwI8z5Gn3aespruczqczoyURt0FqtQA+NpWsjvMYbHxIj\n6QIvjLZg0n/7KKk+LqtW/fkE2C9nJJzVplJs6VOoGBjo6Yljdq1Y8J6r8rLZ\ndbTrii5E79qSj8MjlOYuO+ij8i8P8NuCPbFQzI+cBP5tfCug2gkJO27RMlDc\nKY9iFEDizDCkzZu2AslicDYugI/BUut+komA2po1kzIKB83lD+CevVWRmQzC\nl6kTem7Slvif+FjOdChH1x0Pf97JIN5qpBjazmXoqvvVwtQTEOZDZyUW7QC4\nZrlTvuN4X9+4dIAbSq+Dt+eETpXqJs4gOuYHTZTh4VM67iyoB172Y9TLAz/d\nO5/iN5dw+FNJndZvHu8IgNrczM2PmdaoAwYsjIMGJJwvpSkdxv+aNSpXwr3a\nAqc76hyYElVwTaaKh2B4DjaLPQvanheTkQc+8bnAHx9j85KtY7Khwl+ZdXJY\nnzdyaMUZeYuEGnuM/sXw8wDP8E5KgCM7zEggkA6T/5PJxPnzNi5ntaYw5wL7\ns/4nvAaX4wUBSF9YUDCVjvinbpPgMPO9pMnD8miBovJBR+gBUlEoJPOAmsEy\n4bgDQNt+p6z6i4Ftyh6akBVhy9iYYtYI/qnlwTc2C4OXtuzr9OHSgWTlhtOe\n1jdn\r\n=e5yU\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCs8agJVWFwkj9FVFVi29FgaYF3LLa/Lkjpw0vPwhFDmgIgDCwS3baj3SwN8/3C7sf/85VvcjXoj4yKUu5WuKgBqPk="}]},"maintainers":[{"email":"agomezs@fb.com","name":"ags-"},{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"jkassens@fb.com","name":"kassens"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"sol@twitter.com","name":"lostplan"},{"email":"mgadda@gmail.com","name":"mgadda"},{"email":"schickling.j@gmail.com","name":"schickling"},{"email":"greg@hurrell.net","name":"wincent"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.4.0-alpha.3_1584743247985_0.2790783091558766"},"_hasShrinkwrap":false},"2.4.0-alpha.4":{"name":"graphql-language-service-server","version":"2.4.0-alpha.4","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/master/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql"],"main":"dist/index.js","module":"esm/index.js","typings":"dist/index.d.ts","peerDependencies":{"graphql":"^0.12.0 || ^0.13.0 || ^14.0.0"},"dependencies":{"@babel/parser":"^7.9.0","glob":"^7.1.2","graphql-config":"3.0.0-rc.0","graphql-language-service-interface":"^2.4.0-alpha.4","graphql-language-service-types":"^1.6.0-alpha.4","graphql-language-service-utils":"^2.4.0-alpha.4","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"cross-env":"^7.0.0"},"gitHead":"c4d82b0e5263e9d516bf28f423d321d81a13356a","readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/master/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```\ngit clone git@github.com:graphql/graphql-language-servic-server.git\ncd {path/to/your/repo}\nnpm install ../graphql-language-service-server\n```\n\nAfter pulling the latest changes from this repo, be sure to run `yarn run build` to transform the `src/` directory and generate the `dist/` directory.\n\nThe library includes a node executable file which you can find in `./node_modules/.bin/graphql.js` after installation.\n\n### GraphQL configuration file (`.graphqlrc.yml`)\n\nCheck out [graphql-config](https://graphql-config.com/docs/introduction)\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.graphql'\nextensions:\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `loadConfig`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/docs/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  config: loadConfig({\n     // myPlatform.config.js works now!\n    configName: 'myPlatform',\n    // or instead of configName, an exact path (relative from rootDir or absolute)\n    filePath: 'exact/path/to/config.js (also supports yml, json)'\n     // rootDir to look for config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n    rootDir: '',\n  })\n});\n```\n\nThe graphql features we support are:\n\n- `customDirectives` - `['@myExampleDirective']`\n- `customValidationRules` - returns rules array with parameter `ValidationContext` from `graphql/validation`;\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n## Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://github.com/Microsoft/language-server-protocol/blob/master/protocol.md) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                  | Stream                       | IPC                                         |\n| ---------------: | ---------------------------- | ------------------------------------------- |\n|      Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|   Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|          Outline | `getOutline`                 | `textDocument/outline`                      |\n| Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n| Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n|      File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.4.0-alpha.4","_nodeVersion":"13.12.0","_npmVersion":"lerna/3.20.2/node@v13.12.0+x64 (linux)","_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"dist":{"integrity":"sha512-yycX4jSomKCljTBKZTjZMdFnLf+cm/y0MsIVI34SP2im585wPWl7qD78TfHMlXKYK13rtFoHNdHfVCmoldOv+w==","shasum":"63f1b1ad86143da0e50aa4f26c5c691eb0040341","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.4.0-alpha.4.tgz","fileCount":68,"unpackedSize":254833,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJehoylCRA9TVsSAnZWagAAAmoP+wVFt4f3ZwEgbYAoB+gw\nK0Ab9Tww0/zdiRy1HH7bibxGoRiL0RkF6KIC+SgjCXCcaIfA1W/GLHDrKlCG\nm5U9S+LyeVpKg7HF+G9Kg1D79UgM6EDUoTRDh9PUL+o+ezSVpQ7++reZ10KB\nuHH+Jl873wDqm9UC3r3ev9KUToTLtY/i9lJxhezTQXGR0YsNuTaqGl7LsyfU\nCS9uTIxjEvEALqzhtRt1lBHeMmEIyrdBwIODZ+2Cois0Hz+4P9m2N4K8cYTj\nniWfoTiqS9jlyEp4OlTs0uOHS6u1i8zqH3pV0HJpN5zmSHoIn7g8r6U/fF6f\n9dago8KAt2f270PnyiM9+fVNQIgEYYI4itFevTcmeSAgWZ+y7PvKtS9DbIhy\n0x7aCvIxr3c2qS93d+PZcuoCBMbiqd2ZKJbfzmcgvwJGBFkcyCwgrAgx0w00\nWzq1YeM3Jh0+DS8/cdhdTCRC2Xmfw6zgh1JEfIpszZEM7jH0iepHhVcilhtI\n8jAgn4rlqtqyWvgpcK05hbmOux/u9jMPS9sNufZJF0/XuqSfRX3l/j4y7Lc3\nhwt/DZyHL98Z9iSQ2tzdXfHIwtpPijLeykFwVxo857MB+q4vNtFUZagnMI4T\nxAyFBxDbE3B9YU2myMarPycyK1jpoJWZS627oO2xp7kikXPiYUDpxmc3nOjX\n90o2\r\n=bmmx\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDql9VqmZWU7gk16fFrZwlLf2MdU9HnQFJ9gp1gaHDDFQIgBjMQKxb5Zo9Z5QhMWMP2evcQDUA1lkBHOCSMBwmDs8Q="}]},"maintainers":[{"email":"agomezs@fb.com","name":"ags-"},{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"jkassens@fb.com","name":"kassens"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"sol@twitter.com","name":"lostplan"},{"email":"mgadda@gmail.com","name":"mgadda"},{"email":"schickling.j@gmail.com","name":"schickling"},{"email":"greg@hurrell.net","name":"wincent"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.4.0-alpha.4_1585876132879_0.7777387903210782"},"_hasShrinkwrap":false},"2.4.0-alpha.5":{"name":"graphql-language-service-server","version":"2.4.0-alpha.5","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/master/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql"],"main":"dist/index.js","module":"esm/index.js","typings":"dist/index.d.ts","peerDependencies":{"graphql":"^0.12.0 || ^0.13.0 || ^14.0.0 || ^15.0.0"},"dependencies":{"@babel/parser":"^7.9.0","glob":"^7.1.2","graphql-config":"3.0.0-rc.2","graphql-language-service-interface":"^2.4.0-alpha.5","graphql-language-service-types":"^1.6.0-alpha.5","graphql-language-service-utils":"^2.4.0-alpha.5","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"cross-env":"^7.0.0"},"gitHead":"b8f9af6a35ce599d381c77ace06a239144618680","readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/master/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```\ngit clone git@github.com:graphql/graphql-language-servic-server.git\ncd {path/to/your/repo}\nnpm install ../graphql-language-service-server\n```\n\nAfter pulling the latest changes from this repo, be sure to run `yarn run build` to transform the `src/` directory and generate the `dist/` directory.\n\nThe library includes a node executable file which you can find in `./node_modules/.bin/graphql.js` after installation.\n\n### GraphQL configuration file (`.graphqlrc.yml`)\n\nCheck out [graphql-config](https://graphql-config.com/docs/introduction)\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.graphql'\nextensions:\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `loadConfig`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/docs/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  config: loadConfig({\n     // myPlatform.config.js works now!\n    configName: 'myPlatform',\n    // or instead of configName, an exact path (relative from rootDir or absolute)\n    filePath: 'exact/path/to/config.js (also supports yml, json)'\n     // rootDir to look for config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n    rootDir: '',\n  })\n});\n```\n\nThe graphql features we support are:\n\n- `customDirectives` - `['@myExampleDirective']`\n- `customValidationRules` - returns rules array with parameter `ValidationContext` from `graphql/validation`;\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n## Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://github.com/Microsoft/language-server-protocol/blob/master/protocol.md) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                  | Stream                       | IPC                                         |\n| ---------------: | ---------------------------- | ------------------------------------------- |\n|      Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|   Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|          Outline | `getOutline`                 | `textDocument/outline`                      |\n| Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n| Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n|      File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.4.0-alpha.5","_nodeVersion":"13.12.0","_npmVersion":"lerna/3.20.2/node@v13.12.0+x64 (linux)","_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"dist":{"integrity":"sha512-uS7a8Tb1rR5W7uusTamuapbJu4OxNkoNnNzTdO6OHtR/B3j34AosvRmZVOi/vmPKoSd7GeVP+gnD6jnn64f2NA==","shasum":"fbe77e09361950c93a1dcf97ab05c28bbcdf291e","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.4.0-alpha.5.tgz","fileCount":68,"unpackedSize":255173,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeinmQCRA9TVsSAnZWagAAF3gP/jGtOv2uXjEFtWgaGO8Z\nVkX62i0IZjutP530VuGcDyVlOJs1m0Ir4eCc8TlkhCyABARuSvkdCck+N91L\n6nVekDM1CYq4i/1RT0tmNItcUv57S7ZVHuNeyXUvOWDuAczwnTqkOXGTnqND\nUOrElPT2z6IxIMAOAkxBfGJiAFPzpyBf+YoSRX2CumcOTZApqlBmDGiOnixT\nqoAZhvpEoEyUnsDDTa6ekWEvoNIfx+SvtH6PVGSQvrvu1Sai1u4etE44nJjL\nzTJE88HkrCRqsNxxN+0Bi6f7FHqnrGmy9HqSSANyOc6CpiyVmdH/q2QIA/Cy\n9sgG8HZnD//veQpi2O6NWPljiI5weh60ml7vapToJuRQiIkDZ1ZZQKDoCNsH\nZHVx54j2k2yyb3/7myBRhSlXkT/+GJK5+UXJWqU4l3qjFDg2tSvTsWQyb93F\nFBCEUL0n7EZBc5oToAwkIzIRQpd8T369bdZkCChItYEhByMmlzYeNlrW71II\ny9q7ZhJYKdacBvNA1xCvU0tzna6iKEc2pABSmmD6t+EwUqxtD+anbCa1V2Qn\nibpgtTd6ClMOPE/eAu04xXn4d1XFjhk6gIdpmHi2xkua8SaMA0j1KthRLqzQ\nSisA9AmbDJk4pdeCMEjaPvPUDjYpVTBzfjpSShc680NuEXH2dqqsZJeL6qsO\ny/Ch\r\n=FjE0\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICQryXhBUXs/WhQWZ7arZAQ5VOh4+cLC6C3lOiPfgVcaAiEAqGH4miCnxRqwmEYFHSVBDTMomzB7APOLTWIxJwI5h3Y="}]},"maintainers":[{"email":"agomezs@fb.com","name":"ags-"},{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"jkassens@fb.com","name":"kassens"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"sol@twitter.com","name":"lostplan"},{"email":"mgadda@gmail.com","name":"mgadda"},{"email":"schickling.j@gmail.com","name":"schickling"},{"email":"greg@hurrell.net","name":"wincent"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.4.0-alpha.5_1586133391702_0.030316282827978824"},"_hasShrinkwrap":false},"2.4.0-alpha.6":{"name":"graphql-language-service-server","version":"2.4.0-alpha.6","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/master/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql"],"main":"dist/index.js","module":"esm/index.js","typings":"dist/index.d.ts","peerDependencies":{"graphql":"^0.12.0 || ^0.13.0 || ^14.0.0 || ^15.0.0"},"dependencies":{"@babel/parser":"^7.9.0","glob":"^7.1.2","graphql-config":"3.0.0-rc.2","graphql-language-service-interface":"^2.4.0-alpha.6","graphql-language-service-types":"^1.6.0-alpha.5","graphql-language-service-utils":"^2.4.0-alpha.6","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"cross-env":"^7.0.2"},"gitHead":"f49a0c1d96aea8f39695b93b49bdd80af13d8535","readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/master/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```\ngit clone git@github.com:graphql/graphql-language-servic-server.git\ncd {path/to/your/repo}\nnpm install ../graphql-language-service-server\n```\n\nAfter pulling the latest changes from this repo, be sure to run `yarn run build` to transform the `src/` directory and generate the `dist/` directory.\n\nThe library includes a node executable file which you can find in `./node_modules/.bin/graphql.js` after installation.\n\n### GraphQL configuration file (`.graphqlrc.yml`)\n\nCheck out [graphql-config](https://graphql-config.com/docs/introduction)\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.graphql'\nextensions:\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `loadConfig`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/docs/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  config: loadConfig({\n     // myPlatform.config.js works now!\n    configName: 'myPlatform',\n    // or instead of configName, an exact path (relative from rootDir or absolute)\n    filePath: 'exact/path/to/config.js (also supports yml, json)'\n     // rootDir to look for config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n    rootDir: '',\n  })\n});\n```\n\nThe graphql features we support are:\n\n- `customDirectives` - `['@myExampleDirective']`\n- `customValidationRules` - returns rules array with parameter `ValidationContext` from `graphql/validation`;\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n## Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://github.com/Microsoft/language-server-protocol/blob/master/protocol.md) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                  | Stream                       | IPC                                         |\n| ---------------: | ---------------------------- | ------------------------------------------- |\n|      Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|   Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|          Outline | `getOutline`                 | `textDocument/outline`                      |\n| Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n| Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n|      File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.4.0-alpha.6","_nodeVersion":"13.12.0","_npmVersion":"lerna/3.20.2/node@v13.12.0+x64 (linux)","_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"dist":{"integrity":"sha512-gf4w8dH4P1XG16t+mkCDnfj4mEx5OpQAu3Owvsh8QNqXuUiZDFDjyRXwnkFwPUt1xl0dCzOoDDdVIOJtYbVzFw==","shasum":"62d0efde8dbc4877af07e019b9ea33009b0278bd","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.4.0-alpha.6.tgz","fileCount":68,"unpackedSize":255417,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJekLLsCRA9TVsSAnZWagAAleoP/RzzpMDNS3f3yvSDP1bO\nbqtsWRtbFH20G18yR+8uHHZzIPkd4op0ThtS8NL42hO2JiGhpo7JLetLrkAf\n5LQIuT5AmNuYGgpEfArydSXId/ivA3trm1pfPr2xpGRlewnd3NNjOJUDLxng\nA6W7f1WS9KtID7QsHCWGQKyJVMMbtG7n+2M7MNJJpWcezveoQiCpA3yD77n6\nDGsIFGqBj8QLTT6xf3ohJYqqNRk29kIPGVXXTZuhUH5HR1NNzPokmpozoabl\naQ8FVjRJZGq40abkV2j1KiJLifM2S+efPRUlGSbxl4o3j2f0uZq4DWeFEkVt\nkqL0loojdOpjTHZk4tBFnKTUHHNQqYc0ee+WPEB6qTjbxa8L/XHW052tiKu4\nEEQd85Qah0xTXke6Mwrbf88NgPj3pNo6I11XKlcGbjlrwRF02og6qowDfiMB\nD5OdRSRqKOB8sboeAMa3+mq9KzRn1KcynVMTbP+UuerpvHqsOqMuzQ9jSbDq\nhwQADlxxp30OVfmRPEFUeftRhw6VVdjIcJSGIqgeKLRXxnrJMV+ka04xYmmi\naXa6X2NWzmPz2w5FH1ux4BQrbrYRIZCZZuNbLbhBM7QZiPQ843wetrDuUscU\n7abGvMUt33hc49UYtjiooe/8EEhXWeySywnaj2tTKTiQjONZqyhKz7N17/Lg\nrcku\r\n=Jsaz\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDDSS/dohCFaL6NEzSbqXEnTVZegma/QgtOYiary3MoxAIhALECx4rBqWAk342aUBCmEbXXrJrvMOcyZ0Nv5LKaDaff"}]},"maintainers":[{"email":"agomezs@fb.com","name":"ags-"},{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"jkassens@fb.com","name":"kassens"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"sol@twitter.com","name":"lostplan"},{"email":"mgadda@gmail.com","name":"mgadda"},{"email":"schickling.j@gmail.com","name":"schickling"},{"email":"greg@hurrell.net","name":"wincent"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.4.0-alpha.6_1586541292134_0.47711310756676895"},"_hasShrinkwrap":false},"2.4.0-alpha.7":{"name":"graphql-language-service-server","version":"2.4.0-alpha.7","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/master/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql"],"main":"dist/index.js","module":"esm/index.js","typings":"dist/index.d.ts","peerDependencies":{"graphql":"^0.12.0 || ^0.13.0 || ^14.0.0 || ^15.0.0"},"dependencies":{"@babel/parser":"^7.9.0","glob":"^7.1.2","graphql-config":"3.0.0-rc.2","graphql-language-service-interface":"^2.4.0-alpha.7","graphql-language-service-types":"^1.6.0-alpha.5","graphql-language-service-utils":"^2.4.0-alpha.6","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"cross-env":"^7.0.2"},"gitHead":"9e8aaae1c497fe9a8226332e3ef3cee4e22cde09","readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/master/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```\ngit clone git@github.com:graphql/graphql-language-servic-server.git\ncd {path/to/your/repo}\nnpm install ../graphql-language-service-server\n```\n\nAfter pulling the latest changes from this repo, be sure to run `yarn run build` to transform the `src/` directory and generate the `dist/` directory.\n\nThe library includes a node executable file which you can find in `./node_modules/.bin/graphql.js` after installation.\n\n### GraphQL configuration file (`.graphqlrc.yml`)\n\nCheck out [graphql-config](https://graphql-config.com/docs/introduction)\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.graphql'\nextensions:\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `loadConfig`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/docs/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  config: loadConfig({\n     // myPlatform.config.js works now!\n    configName: 'myPlatform',\n    // or instead of configName, an exact path (relative from rootDir or absolute)\n    filePath: 'exact/path/to/config.js (also supports yml, json)'\n     // rootDir to look for config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n    rootDir: '',\n  })\n});\n```\n\nThe graphql features we support are:\n\n- `customDirectives` - `['@myExampleDirective']`\n- `customValidationRules` - returns rules array with parameter `ValidationContext` from `graphql/validation`;\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n## Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://github.com/Microsoft/language-server-protocol/blob/master/protocol.md) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                  | Stream                       | IPC                                         |\n| ---------------: | ---------------------------- | ------------------------------------------- |\n|      Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|   Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|          Outline | `getOutline`                 | `textDocument/outline`                      |\n| Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n| Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n|      File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.4.0-alpha.7","_nodeVersion":"13.12.0","_npmVersion":"lerna/3.20.2/node@v13.12.0+x64 (linux)","_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"dist":{"integrity":"sha512-3bk1haH4NtR7BkmZmvpP6Ecu1SlvCjOtGV0RiQV4pajgSHrXMNkUZwjIpQfsgVjhNvIeoS4PO0H7UlXDhN9+RQ==","shasum":"489028862296be6b054d28fbc3786875279ceeda","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.4.0-alpha.7.tgz","fileCount":68,"unpackedSize":255661,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJekMhmCRA9TVsSAnZWagAAJ3QP/jbbKd/d/7bx/KhTRAy5\nhsMFMkVQWABMgrFE+oEPm1sNXsUqBDpfSoV+0IMCV/Am05Vp1ZJF/pDAZ5+Y\nHLUpr+PTotXWKIIIdL8gZJaAIrQmBiT2PIBOSaDTm8g/9OSeWbtovtoghqN1\nF+samRGzMbhuADxSvNdr+yf5RO4jPAysVf0eXB+91xDYTE2GIX7ilr4mqx7h\n8K4nEYQ5UvhHoIXv4cxyPnHeQh2NyWivVcJVqz7sBf2ZCSERyPHjYwmGqJoZ\nntM2zHTR7W3hgCIZGMnj+F9PUp766RoBXK1eyt+HMEfLNEJ8W2jJVKkGKIyr\nRkBCncM9XyDKbrS7LpSTKKJ2tvFaLBIoO10DOrfRPlyrI1rRx5zxLepT88fL\nO9deFTq1FcIV/bKslPLeMmABi2UepIsv+FE4ohK+Qo/yuXZqg7xmfJsAcfqI\ny9S9Ovv6zVc6ImaPxLNah4J2DvIDH8Rgh0wgsFMzW/5xWAdQBkWLobqWGAqv\nJqcI/atm4qfh8c3E0pody6v/AM9USpPC535vNW69j1hYUAMbj1jUAENVeYyL\nHrlkWY57w2fZpoUXzGi41NoyqZpyCylsr8zK2Ibbog6Cu6g7lUnECMmqTrR0\nuFTYw31zbL5XGMpcjNcrkavin3IEmSFCVsG9bOQILnzuP6BFnLMXAZPvFRlK\nfcBb\r\n=h3EM\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFnXqFjcnutGKxQB9xP79KtaqJTdUY6hWxvOwK/Lyx+xAiEA3K+6wGkFBHCNQsJxr3/c9f0JjZQJ1Uj/teDUtXRyiTs="}]},"maintainers":[{"email":"agomezs@fb.com","name":"ags-"},{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"jkassens@fb.com","name":"kassens"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"sol@twitter.com","name":"lostplan"},{"email":"mgadda@gmail.com","name":"mgadda"},{"email":"schickling.j@gmail.com","name":"schickling"},{"email":"greg@hurrell.net","name":"wincent"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.4.0-alpha.7_1586546790543_0.6651339519894173"},"_hasShrinkwrap":false},"2.4.0-alpha.8":{"name":"graphql-language-service-server","version":"2.4.0-alpha.8","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/master/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql"],"main":"dist/index.js","module":"esm/index.js","typings":"dist/index.d.ts","peerDependencies":{"graphql":"^0.12.0 || ^0.13.0 || ^14.0.0 || ^15.0.0"},"dependencies":{"@babel/parser":"^7.9.0","glob":"^7.1.2","graphql-config":"3.0.0-rc.2","graphql-language-service-interface":"^2.4.0-alpha.8","graphql-language-service-types":"^1.6.0-alpha.6","graphql-language-service-utils":"^2.4.0-alpha.7","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"cross-env":"^7.0.2"},"gitHead":"ce926bb7ab1e6fbf978ec53a0449c33869073c7d","readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/master/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```\ngit clone git@github.com:graphql/graphql-language-servic-server.git\ncd {path/to/your/repo}\nnpm install ../graphql-language-service-server\n```\n\nAfter pulling the latest changes from this repo, be sure to run `yarn run build` to transform the `src/` directory and generate the `dist/` directory.\n\nThe library includes a node executable file which you can find in `./node_modules/.bin/graphql.js` after installation.\n\n### GraphQL configuration file (`.graphqlrc.yml`)\n\nCheck out [graphql-config](https://graphql-config.com/docs/introduction)\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.graphql'\nextensions:\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `loadConfig`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/docs/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  config: loadConfig({\n     // myPlatform.config.js works now!\n    configName: 'myPlatform',\n    // or instead of configName, an exact path (relative from rootDir or absolute)\n    filePath: 'exact/path/to/config.js (also supports yml, json)'\n     // rootDir to look for config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n    rootDir: '',\n  })\n});\n```\n\nThe graphql-config features we support are:\n\n- `extensions.customDirectives` - for example `['@myExampleDirective']`\n- `extensions.customValidationRules` - a function that returns rules array with parameter `ValidationContext` from `graphql/validation`. The graphql config must load the module itself.\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n## Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://github.com/Microsoft/language-server-protocol/blob/master/protocol.md) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                  | Stream                       | IPC                                         |\n| ---------------: | ---------------------------- | ------------------------------------------- |\n|      Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|   Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|          Outline | `getOutline`                 | `textDocument/outline`                      |\n| Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n| Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n|      File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.4.0-alpha.8","_nodeVersion":"13.12.0","_npmVersion":"lerna/3.20.2/node@v13.12.0+x64 (linux)","_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"dist":{"integrity":"sha512-sRqPvdHG9ybjRzh2UWvOhtxVq9q7iCtmQ5iXYZyB5wmLjVnvWE8qJzmS9sOPi+tgWwIAdrlXtIUtUJzFdUhwcg==","shasum":"32e733e7decdd6bbf575fd9ddf389325eef0f49c","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.4.0-alpha.8.tgz","fileCount":68,"unpackedSize":258579,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJewJ6RCRA9TVsSAnZWagAAq9sP/0DVTaqDuiFPKfUm1EHF\nS6iAV9XAs+Z5VzBt8KUKqAIvydKcAlIhzRePDKJ7rZKLiGI4XdJ0SAcMImp6\nyHr2dyhWm/E1NImEIverI+Toa0p4VY4ZkdBdtFDsyBsQmQsuI0RgjcMQaAl5\n5wVbd3m2Hft8/qNTAdwPrQY2hrHWyEVfpxIRuQH2hhduibbbcV90FGq/oH/+\nYKRovISJhzGBWxmefmrRfFs2eKZMMdrWICgL41Yex2bjjPg39D8ZAeE4/NgO\nph2d3ORTxBjiT5V6OFQ+sNKo1YoJA5ALhh3Uc3r8afzfufAshd2+xU2UtgWh\n8072OTq3yELtWPwgVri+fOiFTqTJ9OgQ9f2cTz+OEaQ/CszNITo/zIDgmBrv\n3oGJBND6L2bcXkmVTu86IUDZiugMuUQH8LcR7Kr7qQ/dUm15TBDBQm9zCZCX\naTpJVsk8Uju5gvTbN9AgJS5jv2e9fxbLExYK2E2oRv7YS30RKqffUm9NLkVC\ndlvy32SvvZrk84MzE7Vxtb/2QHZ9Jyh/OGlGkDqfL7OD88Yj/lBZTS1ROjvH\nxljtAy9QdoaFwZ0uO/mSnJyJ+95hO62RgC+cj7+DbDBeNb67YGccyyxp81jF\ni3zkwn7c2zISkjYRxyNX0ZcvOUK6PROdn0Ko/f4L+E6cdZ86ebzz7Ie0+YQk\nPLYF\r\n=6Pe4\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHcq6cWr92eSPg5Ntre5SkAFPfXLegHfjcMPGUKHpK85AiEAluJV3pscrNZEw+57A6VTdnysmnPTkwNPmAGuBv4/uPA="}]},"maintainers":[{"email":"agomezs@fb.com","name":"ags-"},{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"jkassens@fb.com","name":"kassens"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"sol@twitter.com","name":"lostplan"},{"email":"mgadda@gmail.com","name":"mgadda"},{"email":"schickling.j@gmail.com","name":"schickling"},{"email":"greg@hurrell.net","name":"wincent"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.4.0-alpha.8_1589681809406_0.3243620472507929"},"_hasShrinkwrap":false},"2.4.0-alpha.9":{"name":"graphql-language-service-server","version":"2.4.0-alpha.9","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/master/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"dist/index.d.ts","peerDependencies":{"graphql":"^0.12.0 || ^0.13.0 || ^14.0.0 || ^15.0.0"},"dependencies":{"@babel/parser":"^7.9.0","glob":"^7.1.2","graphql-config":"3.0.0-rc.2","graphql-language-service":"^3.0.0-alpha.1","graphql-language-service-utils":"^2.4.0-alpha.7","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"cross-env":"^7.0.2"},"gitHead":"cd3bdee6a501430a2bf0a72928b404fab366252f","readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/master/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```\ngit clone git@github.com:graphql/graphql-language-servic-server.git\ncd {path/to/your/repo}\nnpm install ../graphql-language-service-server\n```\n\nAfter pulling the latest changes from this repo, be sure to run `yarn run build` to transform the `src/` directory and generate the `dist/` directory.\n\nThe library includes a node executable file which you can find in `./node_modules/.bin/graphql.js` after installation.\n\n### GraphQL configuration file (`.graphqlrc.yml`)\n\nCheck out [graphql-config](https://graphql-config.com/docs/introduction)\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.graphql'\nextensions:\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `loadConfig`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/docs/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  config: loadConfig({\n     // myPlatform.config.js works now!\n    configName: 'myPlatform',\n    // or instead of configName, an exact path (relative from rootDir or absolute)\n    filePath: 'exact/path/to/config.js (also supports yml, json)'\n     // rootDir to look for config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n    rootDir: '',\n  })\n});\n```\n\nThe graphql-config features we support are:\n\n- `extensions.customDirectives` - for example `['@myExampleDirective']`\n- `extensions.customValidationRules` - a function that returns rules array with parameter `ValidationContext` from `graphql/validation`. The graphql config must load the module itself.\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n## Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://github.com/Microsoft/language-server-protocol/blob/master/protocol.md) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                  | Stream                       | IPC                                         |\n| ---------------: | ---------------------------- | ------------------------------------------- |\n|      Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|   Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|          Outline | `getOutline`                 | `textDocument/outline`                      |\n| Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n| Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n|      File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.4.0-alpha.9","_nodeVersion":"13.12.0","_npmVersion":"lerna/3.20.2/node@v13.12.0+x64 (linux)","_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"dist":{"integrity":"sha512-sMPZi2F65ob0VI8X+svHX1VwiRpl3VU8koWzJ5Qc58v14CT08eGE/MFEnefxVxPz2TPHE2aBCvdEBBJ7K7oojQ==","shasum":"288d5317d8dc4e8b6b620ce8a6daa37f4d279940","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.4.0-alpha.9.tgz","fileCount":68,"unpackedSize":258461,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJexFUwCRA9TVsSAnZWagAAreoQAJdo48EVUSwdHhgfJFk0\nNczYFiKnK0h4Qj3vG5qhhxWNe/qDhRyqFDG5bDRX/ZInzNHXeGKGeDDrdB2J\n/OHUiWZRzLYhxz2BV4OKSHB/QULtxgOOS9BixxPMwr+ZmwFN/P90kMMNp0WL\nitVWVC3icYQav4TWcQVwEkiMypG5QdjeTiuqDT79T6QcFtShgTDBAp6uQq7R\nE7GoClb2ci1ae9cmD+pU8+myNPmIryzQ8Bcpnxtt0yrLVyLZkfSTV2xEtvjU\n/4PDGlC1LQoXAieAFaitz6MYxm+wSDk9D36DHQcbfk73//95evh5GxnyZxcg\nhYTbTXVV1u6oeHUOH8J2KKWXhoK6EjliA1SmorNq/uLXZlx9rfQCqicV8sor\n8KgCspyaZ4AIyhmaKHB4aSFZTF9FMP9D8PjRH2kfjywQ+5RLvBJ5xEE82cjN\nFM1r5To+gSeBmjxXKGtrfxBF+KFLhayUmpHZAJ4q+Dn1LNHLP3zaCaYtUAVP\nHzfSesUxGpIcsKFge+yX9RJl9gaxauAO0Sj/2wG9ZOx/QGqlYCbMCEe/iATd\nBbNFR8ilD+QmAli2wfYxvlbXTwfGtMAxW9UH8G6wFYIohkGxbebVaBQaFcvJ\nIJDYJknuhKRmFTTKyRgG04hvcyEbto1CSvy672klqGJ4g6rBFvhzuQebvvxS\nuqQp\r\n=ySLP\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC87ltWeGU4ZWUDBra9jM07LjlY0JcYXN9y65gwQKNe3QIhAI5rmQ9Xo2SYetkvK0rUvBAcDZDfpy08b/fkInGhidIF"}]},"maintainers":[{"email":"agomezs@fb.com","name":"ags-"},{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"jkassens@fb.com","name":"kassens"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"sol@twitter.com","name":"lostplan"},{"email":"mgadda@gmail.com","name":"mgadda"},{"email":"schickling.j@gmail.com","name":"schickling"},{"email":"greg@hurrell.net","name":"wincent"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.4.0-alpha.9_1589925167620_0.6785898878970538"},"_hasShrinkwrap":false},"2.4.0-alpha.10":{"name":"graphql-language-service-server","version":"2.4.0-alpha.10","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/master/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"dist/index.d.ts","peerDependencies":{"graphql":"^0.12.0 || ^0.13.0 || ^14.0.0 || ^15.0.0"},"dependencies":{"@babel/parser":"^7.9.0","glob":"^7.1.2","graphql-config":"3.0.0-rc.2","graphql-language-service":"^3.0.0-alpha.2","graphql-language-service-utils":"^2.4.0-alpha.7","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"cross-env":"^7.0.2"},"gitHead":"c1afc2eae6de740983d960e92d2df5e5f17270e8","readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/master/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```\ngit clone git@github.com:graphql/graphql-language-servic-server.git\ncd {path/to/your/repo}\nnpm install ../graphql-language-service-server\n```\n\nAfter pulling the latest changes from this repo, be sure to run `yarn run build` to transform the `src/` directory and generate the `dist/` directory.\n\nThe library includes a node executable file which you can find in `./node_modules/.bin/graphql.js` after installation.\n\n### GraphQL configuration file (`.graphqlrc.yml`)\n\nCheck out [graphql-config](https://graphql-config.com/docs/introduction)\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.graphql'\nextensions:\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `loadConfig`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/docs/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  config: loadConfig({\n     // myPlatform.config.js works now!\n    configName: 'myPlatform',\n    // or instead of configName, an exact path (relative from rootDir or absolute)\n    filePath: 'exact/path/to/config.js (also supports yml, json)'\n     // rootDir to look for config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n    rootDir: '',\n  })\n});\n```\n\nThe graphql-config features we support are:\n\n- `extensions.customDirectives` - for example `['@myExampleDirective']`\n- `extensions.customValidationRules` - a function that returns rules array with parameter `ValidationContext` from `graphql/validation`. The graphql config must load the module itself.\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n## Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://github.com/Microsoft/language-server-protocol/blob/master/protocol.md) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                  | Stream                       | IPC                                         |\n| ---------------: | ---------------------------- | ------------------------------------------- |\n|      Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|   Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|          Outline | `getOutline`                 | `textDocument/outline`                      |\n| Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n| Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n|      File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.4.0-alpha.10","_nodeVersion":"13.12.0","_npmVersion":"lerna/3.20.2/node@v13.12.0+x64 (linux)","_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"dist":{"integrity":"sha512-z2MnImiphGX3FBuAhl9Ahx1vAJL6pKQr5bw2hLYw35R6XgsJIVlwUTwW2nqgdovFDzOODrckQIZladYUAp4QFA==","shasum":"a26b98c4cbc364abb84d9936b7b793f095ce6994","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.4.0-alpha.10.tgz","fileCount":68,"unpackedSize":258708,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJez/SmCRA9TVsSAnZWagAAc0cP/0MlUC4af7lqlKdwOdTT\njkr21Lm4z4AgB18L0iyKJ/PZLp1sB4LCHD1BRF2MTAcSjzmQrn2QbsMrmMaM\nCVP6na4ptErTbZqgEIb/iji1E0Rukzg6UjgdLt0kSLquibovIHKlu2iPQZps\nY0gr+6/zfY+6AvTFhoy2YxES/LMKuVDqNI2rgYFMjsttSLxFwfYkgl+ptgHK\nTsfkx88Dj+93MTak7JZ4/pjd3RtnAPQl/jAV20stXQbTPy69iYEojXIjRLrb\nUNF8YXfMo0Pw6kd2pc164SdbyMllkTJDCDnpOnMbepTkvdsrgDiElcij7SJR\noYij64BjUwQC3q8BnaNCfSzIHPqtTvpuWS6v4IjRcGqwGFCCHnMHSpxiYVw4\nAQFVwrqOeWgzrJ+tcirASmSDkbwxnjgrUunSo4ZMOQklBGOJm60NCR4Fh2us\nNBWB67Aastu6vjs41zNz0IW/n1gIqiMCVhQIpuBZ0P4mDDJyx3kAe0Jc+Qvg\ntu0ww2r7PzT8bpxsutglMZMr+XCQQj4OQ4h/XDqV3TzOWs3SUF1MCHjQtdtR\n0IBI5SKCvEWb7X4+dgtZGgUPnS7iPVk2R3M+jX+USQ4RBJsazTs3DUS1zIiN\nORBalqtCJtCAM9XSU/Y49QQ4J6u/BuOXqok14ZVOMBV9os5vlSDB+LK6IOUC\nAza3\r\n=TQ4w\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCrvfWfs+tAVq0ZxBCfBSfWisz6httZ92fQlNfDFTOFLwIgP7cmv1RfGZCIkdN6ev9Pi0TGRXtFa9j9orD12YN+dqo="}]},"maintainers":[{"email":"agomezs@fb.com","name":"ags-"},{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"jkassens@fb.com","name":"kassens"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"sol@twitter.com","name":"lostplan"},{"email":"mgadda@gmail.com","name":"mgadda"},{"email":"schickling.j@gmail.com","name":"schickling"},{"email":"greg@hurrell.net","name":"wincent"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.4.0-alpha.10_1590686885719_0.412553735752865"},"_hasShrinkwrap":false},"2.4.0-alpha.12":{"name":"graphql-language-service-server","version":"2.4.0-alpha.12","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/master/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"dist/index.d.ts","peerDependencies":{"graphql":"^0.12.0 || ^0.13.0 || ^14.0.0 || ^15.0.0"},"dependencies":{"@babel/parser":"^7.9.0","glob":"^7.1.2","graphql-config":"3.0.0-rc.2","graphql-language-service":"^3.0.0-alpha.4","graphql-language-service-utils":"^2.4.0-alpha.9","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"cross-env":"^7.0.2"},"gitHead":"9ce01b17e5046cf12fba89146cbf70df84d3d6af","readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/master/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```\ngit clone git@github.com:graphql/graphql-language-servic-server.git\ncd {path/to/your/repo}\nnpm install ../graphql-language-service-server\n```\n\nAfter pulling the latest changes from this repo, be sure to run `yarn run build` to transform the `src/` directory and generate the `dist/` directory.\n\nThe library includes a node executable file which you can find in `./node_modules/.bin/graphql.js` after installation.\n\n### GraphQL configuration file (`.graphqlrc.yml`)\n\nCheck out [graphql-config](https://graphql-config.com/docs/introduction)\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.graphql'\nextensions:\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `loadConfig`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/docs/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  config: loadConfig({\n     // myPlatform.config.js works now!\n    configName: 'myPlatform',\n    // or instead of configName, an exact path (relative from rootDir or absolute)\n    filePath: 'exact/path/to/config.js (also supports yml, json)'\n     // rootDir to look for config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n    rootDir: '',\n  })\n});\n```\n\nThe graphql-config features we support are:\n\n- `extensions.customDirectives` - for example `['@myExampleDirective']`\n- `extensions.customValidationRules` - a function that returns rules array with parameter `ValidationContext` from `graphql/validation`. The graphql config must load the module itself.\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n## Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://github.com/Microsoft/language-server-protocol/blob/master/protocol.md) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                  | Stream                       | IPC                                         |\n| ---------------: | ---------------------------- | ------------------------------------------- |\n|      Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|   Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|          Outline | `getOutline`                 | `textDocument/outline`                      |\n| Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n| Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n|      File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.4.0-alpha.12","_nodeVersion":"13.12.0","_npmVersion":"lerna/3.20.2/node@v13.12.0+x64 (linux)","dist":{"integrity":"sha512-s6bb9FE1/lSINhQ60enCFX3I3bjvl8uu+2t5Q+L1Vi5Bu5Jcyb3KiiduuwAYAMkb+cRr6LNCw9rZdtvobCKDRA==","shasum":"f3215da8f4d77a48c32370daeaeb62805e316bd7","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.4.0-alpha.12.tgz","fileCount":68,"unpackedSize":257021,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJe2P2qCRA9TVsSAnZWagAA0tMP/34bwcR7+EMy5l0K+U4K\nbBTGGjyjjYKXfJ5HRX/+PiRfyXlEJ7t+njbx/TRjAbSuglAoccEYgW300e27\nPDg4nvwF91TnUqskrWGBARE5IMweZEHAfk/8Hmrh/BfTffYOAAzsSSFWsTQA\nHnxAGKJ04wMCfn1EniAFvW+AoQy/J2ZFD0jsnCUnRdaJ64AY2+0T3AJoNC8e\nL+1RB5un284NsNkSj4z08cmNJg+UhMBWcBW3m0RwAKduHN1HTeB0GZKNR0Nq\nUd45cKvlx5o4zG8B4W1DH4EWzMASCSAfE6VAfcBuuWPGNk4vzQdltxutqUFm\n9XV1h2Z/6k/hhD9H6W0jJuxKOMjNpIfpBsx1PDxcB7+WBgON13Dy1oLqihcG\niqtkR8LhSmpfMtvuUmeCdboQ73UjlmKh4T/6y8mF81xdNwoZMk77Dl31lHFZ\nve3/j67llzIhe07nV04G+juQHwPobvtb6arEgphoxRB8c3mxmcDyC0tGEKAb\nLHqqLZ3cJLvheFSFHqtdbzVH5f1WksRqoTGFKnBbNMOkBkOUd1HBvigOvIcW\nTwzFHl4XaLSnI2Yx7YeLEgvk3YHOMv/bkZK2BNwr5U9a++Y7w5HoeEb/47Pp\nmcRKz/ZbY0rkW1zO5SNgQMfzsq5hkAFCmDDtbb6jFLcIhTxm3dqDNGSV3/Li\n3xUc\r\n=8TFe\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIF4HhGVC1p0REcpmZbQfGTEMg7SYOBTlg9Sr5dny9SWIAiEAnw3MsYnhqiQsILeg9I2Nd/Bt4WUxulyJAubN2sQixT0="}]},"maintainers":[{"email":"agomezs@fb.com","name":"ags-"},{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"jkassens@fb.com","name":"kassens"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"sol@twitter.com","name":"lostplan"},{"email":"mgadda@gmail.com","name":"mgadda"},{"email":"schickling.j@gmail.com","name":"schickling"},{"email":"greg@hurrell.net","name":"wincent"}],"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.4.0-alpha.12_1591279017456_0.6494076601327496"},"_hasShrinkwrap":false},"2.4.0":{"name":"graphql-language-service-server","version":"2.4.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/master/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"dist/index.d.ts","peerDependencies":{"graphql":"^14.0.0 || ^15.0.0"},"dependencies":{"@babel/parser":"^7.9.0","glob":"^7.1.2","graphql-config":"^3.0.2","graphql-language-service":"^3.0.0","graphql-language-service-utils":"^2.4.0","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"cross-env":"^7.0.2"},"gitHead":"294fd834efe485132744c0cd9d24690a61b45501","_id":"graphql-language-service-server@2.4.0","_nodeVersion":"13.12.0","_npmVersion":"lerna/3.20.2/node@v13.12.0+x64 (linux)","dist":{"integrity":"sha512-wQDpKfNNC0LDucr54aT5nNkVpdR6F6Tt1cbV8zH4t8WJKe9GscXntE7lfG2zVC7Zm3jTDi6BhrqFVC32ZsOQmA==","shasum":"9337931826ee92decf2cc3069b949ff20a00b686","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.4.0.tgz","fileCount":68,"unpackedSize":257199,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJe4lipCRA9TVsSAnZWagAADncQAJxSyM5xo2j0DHO324Sz\nmShgHca+w52BWkBXYZLQPft2UiltW233tUchIAQ5HvVLr2ifugg8eRlDRdF1\nnaXrXqoiioG6speKlP3UfKRgS8YHB85Q5JKkf3qMccKoAQNDcOH1UlWiwFlE\n+/AVT4V/QceHS6BaiFNWQ7qT4iWV1ShpJc9krNmAmdvvd7ttFhi4Y9gcrYOP\ntdVUm2guKKTVdSQWt5cuK0iwVKMODWvnwut6AM9P1FFOShGQon86mA8ZNeec\n5D3+F/zOT9hawNM9/LImaP4wnTev0Ghnh+0Z9DrwN2BoUpxURh2+qv1eMSpF\nyMlEsVJZqLeqMR9UKZ3UP9Q4S03hSI4jhal4XFxJ3BJMyRtgix2lknI6Mck4\n/JajWAcgw8mHjn7EiasDQoCi6rPt8SvxVBZNkmw/8xF09CsSfhgEUfL5/9FU\nH4UG2tBgyOSqf5gkxwbmwelznutXPT9ugYRDNdTFJ0EOESkYbGz4AxsXGJCa\ntRjPrWs5mVN97QVOHK3/BrAPkLnbmxWciDia6jS9Iq1CtVe6m3W68f9TuUyr\nUAKzh5/uWvfUxa6j5Jvq0gmIrZ0xUS8HM42N14YWwmjZEuLQtg4v0NN7kIL9\n5klI6qiyADoP1XoKh+4ignR8oEEqiTebKN8cIfpB9bAOgieMzEqgaguAhwFQ\nZ6HL\r\n=Czcv\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCFrHOHGAFpcphGaaDSHKAMR/NkpXbcM9Q7QjR66bVlggIgK2Ni0Uk0oJinEaF0O0/PAbUJSfL8FDcWnKwwjOLtT8k="}]},"maintainers":[{"email":"agomezs@fb.com","name":"ags-"},{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"jkassens@fb.com","name":"kassens"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"sol@twitter.com","name":"lostplan"},{"email":"mgadda@gmail.com","name":"mgadda"},{"email":"schickling.j@gmail.com","name":"schickling"},{"email":"greg@hurrell.net","name":"wincent"}],"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.4.0_1591892136673_0.156271212394397"},"_hasShrinkwrap":false},"2.4.1":{"name":"graphql-language-service-server","version":"2.4.1","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"dist/index.d.ts","peerDependencies":{"graphql":"^14.0.0 || ^15.0.0"},"dependencies":{"@babel/parser":"^7.9.0","glob":"^7.1.2","graphql-config":"^3.0.2","graphql-language-service":"^3.0.1","graphql-language-service-utils":"^2.4.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"cross-env":"^7.0.2"},"gitHead":"0fc7c7caac890198118c6a19ae77f10944987ed2","_id":"graphql-language-service-server@2.4.1","_nodeVersion":"14.5.0","_npmVersion":"lerna/3.20.2/node@v14.5.0+x64 (linux)","dist":{"integrity":"sha512-fA4ZBB0hfERwCDA9p49Z325Zm5kafyW8PyAeDhoJ3tdSiwY8MRzK52d0HLUx6+AZmEVyYOkVjKhXeD4V6IV6Sg==","shasum":"1baea9095e92109dd51beb2126b5053664039ee2","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.4.1.tgz","fileCount":68,"unpackedSize":261817,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfLGo9CRA9TVsSAnZWagAAZmsQAJ+Isfe6xgbvGaWsBvQe\nT/jqawgl4kKme+k5EKStHwtJ64EOffL+Ex653vQG+VKB5q29G8NarkkloW2m\nQ7UByrdQ6774fJYXDkhoms49hAHWhaAdylZg56+YTX4F19tnQj5armuVwQNr\naocL42MUI4INTLStHXfxfFxF5YLxcwwAU5UNODLJMXrfGMRAUI7wKZOSBvKP\n50rFhkOaskI8hPW6SAC5qulF32Umg8l5KKjIIbnc8lfsbEPeQoEFE+/PlMoJ\nveSNGxvrjqAu93w0lb2fPyfGiEuep7aA/kcFdMQUodYvM5rLb1LHPJQBI1YI\ny7lXmEbiZqwr9wGelmUiXQ++ZQu8vLMEDhC94w1zVuFJAwlegq7uJYikesRh\nCZgEFk+ysKZopqkbxk/5nObWmzbId41y4qb+suKYzraNlxnZw0mFDxBWtpJ4\n6iu/eBYnsZQlFL5wOmIdewHVSOFpmVp3tMXNfwNxmrSdmevtst6QgMPDCxgn\nIywfRkcFr4gcBN3GZvkvN+uESjuMt8XjtdwuUlsDySj6K+aDOysgctlazO+v\nKhZGXf3WnXOI7OTTgl4NOpjkw3iH42uQl1TpB/0PKKicsR+mjWBbrMGsjMl+\nSQyBxCySqUrWyeKpbCPJzlKlaDLnfkc0j8gpnz7MirGodSmUNHH1cLwMUoxy\nAbd4\r\n=Lm2f\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIQDW0pwSW60zETNpF0UJdNLXZOQqzr0zVDzjWXPdHs0k4QIfCLRk1mNtnczQWN5L2R3Cw6dRIYa2Yu2pv/t0gQuuzA=="}]},"maintainers":[{"email":"agomezs@fb.com","name":"ags-"},{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"jkassens@fb.com","name":"kassens"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"sol@twitter.com","name":"lostplan"},{"email":"mgadda@gmail.com","name":"mgadda"},{"email":"schickling.j@gmail.com","name":"schickling"},{"email":"greg@hurrell.net","name":"wincent"}],"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.4.1_1596746301046_0.6883245582572364"},"_hasShrinkwrap":false},"2.5.0-alpha.0":{"name":"graphql-language-service-server","version":"2.5.0-alpha.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"dist/index.d.ts","peerDependencies":{"graphql":"^14.0.0 || ^15.0.0"},"dependencies":{"@babel/parser":"^7.9.0","glob":"^7.1.2","graphql-config":"^3.0.3","graphql-language-service":"^3.0.2-alpha.0","graphql-language-service-utils":"^2.4.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"cross-env":"^7.0.2"},"gitHead":"6288caae5e7271f4f15455b8526a64d69001decd","readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```\ngit clone git@github.com:graphql/graphql-language-servic-server.git\ncd {path/to/your/repo}\nnpm install ../graphql-language-service-server\n```\n\nAfter pulling the latest changes from this repo, be sure to run `yarn run build` to transform the `src/` directory and generate the `dist/` directory.\n\nThe library includes a node executable file which you can find in `./node_modules/.bin/graphql.js` after installation.\n\n### GraphQL configuration file (`.graphqlrc.yml`)\n\nCheck out [graphql-config](https://graphql-config.com/docs/introduction)\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/docs/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js (also supports yml, json)',\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n- `extensions.customDirectives` - for example `['@myExampleDirective']`\n- `extensions.customValidationRules` - a function that returns rules array with parameter `ValidationContext` from `graphql/validation`. The graphql config must load the module itself.\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n## Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://github.com/Microsoft/language-server-protocol/blob/main/protocol.md) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                  | Stream                       | IPC                                         |\n| ---------------: | ---------------------------- | ------------------------------------------- |\n|      Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|   Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|          Outline | `getOutline`                 | `textDocument/outline`                      |\n| Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n| Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n|      File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.5.0-alpha.0","_nodeVersion":"14.5.0","_npmVersion":"lerna/3.20.2/node@v14.5.0+x64 (linux)","dist":{"integrity":"sha512-sj/u9tPTO6s8d6k6UpML+X9IoCwLGO8ZpP2Q0Ie1bOCzCcbz8dQE5chQleXJ+9LUxXEPovOYn5+6NsXjG8j+Bg==","shasum":"94fb0fad89aa8fe39d453e1022a58ab639d7a135","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.5.0-alpha.0.tgz","fileCount":76,"unpackedSize":303934,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfMMauCRA9TVsSAnZWagAAVakP/3TiaFl+tW4jUT3Ja3FM\notpUYHtKG3weUP4MuTCeyOLiIQ98tILLLmL6JmYreAv3hHIElFjg98JKFvDd\nfkhmvxDpgJRrU3PHqjr7/OpghcV4Ra6uH3tiqtKiU6RGkP8UM1eIQ1QGRcVn\nPygsBDgvgayyo+ajLeb0H5/My1UsJWN6v4q82c2wyV9CKH5HyCIcgnnKzt82\nVYnPtr/DUNSG51tm6FBexfwBua0p3JnkGZ/bDp0xm3SPsXVG9CmOXifNt462\nYISKKVtoRUh5rOBtYiy8SnzQVq7Y4sqByiUcM1e5wyQKpdLEdR0UYI9uWzM/\nvm4OZWAL034Vvg/3Cac2Lwsmerl5eiUw5jnbLKkchEStpeOUANRVNdBlU1rU\ncu2tCMNbmSBxP9A8JqPczde2FEFpAkZQMLdXK3YwGOZSmHGNVXrEEPGdO4HY\nfgLq5d77lDsIMN7LQQOjI8V80OXUVAYE9horRtRTF9xLDqBB9z+MPqEcB2F7\nrcAKUehEI2X8MRyvh+ofTScy+xQUxXtVTvt0RS+45WiQwmghxext9Ryc2LQw\nNpnyGPFMGQqePLTy09e3D4CIBf22crHLezfdqI0ItEPRS8XGsLAgs6/KIDiF\nWI/Qu7vJiVurT0Im73bBKtjWFnKbPpcm2yMm1bASITiNujKQolFF+JN7u5SN\n0ylb\r\n=KT0+\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDQawLgPGPMSgkzmdGRGrstlL8NBIhHNb22ir+5trEvfQIhAIgXkeQZgU5FVxrWioBWYWKiy6j0llps1RD/83LnaG0a"}]},"maintainers":[{"email":"agomezs@fb.com","name":"ags-"},{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"jkassens@fb.com","name":"kassens"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"sol@twitter.com","name":"lostplan"},{"email":"mgadda@gmail.com","name":"mgadda"},{"email":"schickling.j@gmail.com","name":"schickling"},{"email":"greg@hurrell.net","name":"wincent"}],"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.5.0-alpha.0_1597032109960_0.8795294339517936"},"_hasShrinkwrap":false},"2.5.0-alpha.1":{"name":"graphql-language-service-server","version":"2.5.0-alpha.1","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^14.0.0 || ^15.0.0"},"dependencies":{"@babel/parser":"^7.9.0","glob":"^7.1.2","graphql-config":"^3.0.3","graphql-language-service":"^3.0.2-alpha.0","graphql-language-service-utils":"^2.4.1","mkdirp":"^1.0.4","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2"},"gitHead":"f6ba7647620b3233ac358221e6e3ed75ae1787ff","readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```\ngit clone git@github.com:graphql/graphql-language-servic-server.git\ncd {path/to/your/repo}\nnpm install ../graphql-language-service-server\n```\n\nAfter pulling the latest changes from this repo, be sure to run `yarn run build` to transform the `src/` directory and generate the `dist/` directory.\n\nThe library includes a node executable file which you can find in `./node_modules/.bin/graphql.js` after installation.\n\n### GraphQL configuration file (`.graphqlrc.yml`)\n\nCheck out [graphql-config](https://graphql-config.com/docs/introduction)\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/docs/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js (also supports yml, json)',\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n- `extensions.customDirectives` - for example `['@myExampleDirective']`\n- `extensions.customValidationRules` - a function that returns rules array with parameter `ValidationContext` from `graphql/validation`. The graphql config must load the module itself.\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n## Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://github.com/Microsoft/language-server-protocol/blob/main/protocol.md) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                  | Stream                       | IPC                                         |\n| ---------------: | ---------------------------- | ------------------------------------------- |\n|      Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|   Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|          Outline | `getOutline`                 | `textDocument/outline`                      |\n| Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n| Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n|      File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.5.0-alpha.1","_nodeVersion":"14.5.0","_npmVersion":"lerna/3.20.2/node@v14.5.0+x64 (linux)","dist":{"integrity":"sha512-rGb/LghR+bWwglzAD/SMl/+0y87I9smvUuhC3V/mb12ZOFDOba0zK4KQDl5fi2+nd/5yarz1yUdwyDHHGMRv0A==","shasum":"f20ab07ce565348f4e63098044e07133c229c464","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.5.0-alpha.1.tgz","fileCount":76,"unpackedSize":304955,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfNEuUCRA9TVsSAnZWagAAvVIP/A2Sy0rT1kExrlZjHT9Y\niCRbU7qjzbyBdRCyUHL0M/9t5auJskLRe3bG0qGgZpWIl0wLvzBOqAeV4HGA\nVqcGj1jf+dy2JYclZYDJsi1ZkgYcL8QzrkfvLOOzc8scmbfXMWhs+BoKlgMW\nXZn436SDs9+rNIRzls136c2WQxlN0cQkgElYMw7tBPJ1irs78eljfw6Hzy1D\njPrpHZeRoGiIdA3IRaNMNsm36i0j/QYwPoUSwQuUghU00pNkFZ/mWQjaDNuN\nkgL0bOk5dJ7JLjzEN/wffV0cJ0HpP6gcnG122ne5PPqjEVAtHKBZri5foz6A\ncpaKot+GurHwKuJOEOwPUl6l/zeixBDLwSMcbP9koLA6Lszn+dr+AZILcy7D\nUt7B87A9CHRqRbz6XWhlDuSa29VVld6k7FSTLatSbf+VnrCdh7+OBa8CTxCW\nGFDv4FaROST5smU7KlyjsUnoJyXS/8PHMHFdHmREUoq+3naLltyv7eVuz3Y0\nM0v7pB/EwvNoZzK1NriidcgVA0zBqdQkY6cbVIH0M3Msh/D8fjZ9fmwve1xF\n8a0W+q79rFibM21DeHUhbSl+xfbrocQNSJllT4sypQ6K2cNFmk3IvpCjhQdB\nlVtxAg68qQFuQNh70C/uaIg0xMBjTUS01Qwtz8nUMnYZGqrtcHkDD6sLpHII\nLIXp\r\n=vjKa\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBxWn/JJWPNYQ4Q2lEIIskXaMIb6EPSRAz5Ft6fq2FZrAiBZ6xjXOCntVixoEfH5oGRaztHEf94TTGAfK+kBDDr9eQ=="}]},"maintainers":[{"email":"agomezs@fb.com","name":"ags-"},{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"jkassens@fb.com","name":"kassens"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"sol@twitter.com","name":"lostplan"},{"email":"mgadda@gmail.com","name":"mgadda"},{"email":"schickling.j@gmail.com","name":"schickling"},{"email":"greg@hurrell.net","name":"wincent"}],"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.5.0-alpha.1_1597262740496_0.18959193418769527"},"_hasShrinkwrap":false},"2.5.0-alpha.2":{"name":"graphql-language-service-server","version":"2.5.0-alpha.2","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^14.0.0 || ^15.0.0"},"dependencies":{"@babel/parser":"^7.9.0","glob":"^7.1.2","graphql-config":"^3.0.3","graphql-language-service":"^3.0.2-alpha.1","graphql-language-service-utils":"^2.4.1","mkdirp":"^1.0.4","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2"},"gitHead":"2de91ba08920927624ec6f6c8d86b6abc46b6d26","readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```\ngit clone git@github.com:graphql/graphql-language-servic-server.git\ncd {path/to/your/repo}\nnpm install ../graphql-language-service-server\n```\n\nAfter pulling the latest changes from this repo, be sure to run `yarn run build` to transform the `src/` directory and generate the `dist/` directory.\n\nThe library includes a node executable file which you can find in `./node_modules/.bin/graphql.js` after installation.\n\n### GraphQL configuration file (`.graphqlrc.yml`)\n\nCheck out [graphql-config](https://graphql-config.com/docs/introduction)\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/docs/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js (also supports yml, json)',\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n- `extensions.customDirectives` - for example `['@myExampleDirective']`\n- `extensions.customValidationRules` - a function that returns rules array with parameter `ValidationContext` from `graphql/validation`. The graphql config must load the module itself.\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n## Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://github.com/Microsoft/language-server-protocol/blob/main/protocol.md) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                  | Stream                       | IPC                                         |\n| ---------------: | ---------------------------- | ------------------------------------------- |\n|      Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|   Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|          Outline | `getOutline`                 | `textDocument/outline`                      |\n| Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n| Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n|      File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.5.0-alpha.2","_nodeVersion":"14.5.0","_npmVersion":"lerna/3.20.2/node@v14.5.0+x64 (linux)","dist":{"integrity":"sha512-De86nABVmlPa/9reZgk9fMy+IikfVxbYXu7M96S3U4cK6wp0LNX9EwJ74U5ZJj6pXZqXW578zx9cw9lAqkadEQ==","shasum":"741e91d31a02522fc82e7090eef93ec314b2b8ab","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.5.0-alpha.2.tgz","fileCount":76,"unpackedSize":305199,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfNFqACRA9TVsSAnZWagAA3J0P/iR0SPjkKxYo77nIRWmH\nxI79Y48Ce+6faVlcq3cUrZ78gL6Y7Y0S6RE5tvUZDk0YiJQb75iPJzkaGaqU\nJVYYx0zSw0I3I0Sp4Tqmpl2luCa7hudLdO4oJ87WZnNgz9lPW25RlMZUZAoW\nK5ClQZiNA6mWP42/4P/bf5W8WsO7CmSto4jfBSjMO8/GwGW266c7q0P/ik3y\n+iEPODO/FSlY1EVbXaimz1QvM8DBV1zEMATV/5YUr6qVONExTiuxvrn2na1f\nWk+uYkWolG2KapzjwmJAP4e0eNkomTtcmbNcynwsBOeUqJ0f8rDkoJoV5DMK\nH8uKsWrN4Gmid1ai+L65e4fyi84Hi5IOMj02gmx6rDrSi8v5Ns2mtw4kDoxM\nxcSywieGK9UmfZAm13r6s6YKZqTClU68MIpJauFMYOAryDL3omO/2eqEZq2t\ntwHgHycm1ycqk9Aa8HS8nGuado2XGVWFBTt55AAZTKr7+Vrt//j2psTSaD4b\nmNEA18KxCdDmw8KCcWRLA9187VHj7F+u7IvR5g+as4KQ8NDETg66yP8hCZEa\n0rSSWsT0xZfBY3sEwFTzdIFE7oaY2IbChIgcjmayh8O5CoPg4EY5Afjkv5xD\nutWYvEYQe/+PqYkjAiWJLLzoWW4ieMLzJjgEgWJghvnQJppcpNud43wsKGAX\nO1LU\r\n=1J9J\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCIBEoDzrVjOb2IoYXxWVsciEfxeXNHdA8V48H+YiMe6QIgH+sVlrhUOHHitTefm/zwO/aJZ/v73L91YSN3oYsJAoc="}]},"maintainers":[{"email":"agomezs@fb.com","name":"ags-"},{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"jkassens@fb.com","name":"kassens"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"sol@twitter.com","name":"lostplan"},{"email":"mgadda@gmail.com","name":"mgadda"},{"email":"schickling.j@gmail.com","name":"schickling"},{"email":"greg@hurrell.net","name":"wincent"}],"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.5.0-alpha.2_1597266560419_0.05048918334850394"},"_hasShrinkwrap":false},"2.5.0-alpha.3":{"name":"graphql-language-service-server","version":"2.5.0-alpha.3","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^14.0.0 || ^15.0.0"},"dependencies":{"@babel/parser":"^7.9.0","glob":"^7.1.2","graphql-config":"^3.0.3","graphql-language-service":"^3.0.2-alpha.2","graphql-language-service-utils":"^2.4.1","mkdirp":"^1.0.4","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2"},"gitHead":"c6adf4ceae81f9c7eb475cbc3f6230f4926023bb","readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```\ngit clone git@github.com:graphql/graphql-language-servic-server.git\ncd {path/to/your/repo}\nnpm install ../graphql-language-service-server\n```\n\nAfter pulling the latest changes from this repo, be sure to run `yarn run build` to transform the `src/` directory and generate the `dist/` directory.\n\nThe library includes a node executable file which you can find in `./node_modules/.bin/graphql.js` after installation.\n\n### GraphQL configuration file (`.graphqlrc.yml`)\n\nCheck out [graphql-config](https://graphql-config.com/docs/introduction)\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/docs/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js (also supports yml, json)',\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n- `extensions.customDirectives` - for example `['@myExampleDirective']`\n- `extensions.customValidationRules` - a function that returns rules array with parameter `ValidationContext` from `graphql/validation`. The graphql config must load the module itself.\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n## Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://github.com/Microsoft/language-server-protocol/blob/main/protocol.md) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                  | Stream                       | IPC                                         |\n| ---------------: | ---------------------------- | ------------------------------------------- |\n|      Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|   Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|          Outline | `getOutline`                 | `textDocument/outline`                      |\n| Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n| Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n|      File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.5.0-alpha.3","_nodeVersion":"14.5.0","_npmVersion":"lerna/3.20.2/node@v14.5.0+x64 (linux)","dist":{"integrity":"sha512-xt+CjU8A+usoQ2mFD+4xVkI/8TSXj1UjLB2tdlDrM35ITgr7pfzpjPHUsJrdJ0JXJdTIvqgEuOj2bSsnLb+Cpw==","shasum":"4b6eb430541434c0c837fa3ba99938a06d2a5e9b","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.5.0-alpha.3.tgz","fileCount":76,"unpackedSize":305443,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfQVI8CRA9TVsSAnZWagAAv5QP/iFK4hABxCnOvz6VEOnm\nMT4uA6e7qq3YcylVbNu9nu3sksfLD8svbYTih502zfE5h7NrWA7P9SZQJbMS\nrgUNJ1RbrZzL1CV1wYOFcJg0WD+xIx8JreZZiepNal05RiW/g6UsTSUj25pO\n4dGqLONlTr4Yn9QrCSpeCrk2Emnvb4qw7mbDaU53ubBkumTCNJKC3OTSUUmW\nJpQ/aKrnxpya9R7RjyKp/zEhwMRPVkzq4ydDT0cndCbn6L4KFl4FYEMdYK9K\nhHVNe5l/aa88PnSWmQH6GxYvs6Xq8clVlCQsfFSoSbMnfO83KrxCjTqWnJZ+\nY2hYPaOoKxZoz58pSs8IvjkAhLkrO9T1Q6dOEAWMzwmItML1QT9bG41FvfFs\nw9LjB6PlI36Kk5BB187uV/j0o/4BwJ4fp+JgFRP74rbze6C97nNoFz4cXSzC\nBPFwl9iphn+GPmNtbO1xaVPtWoxsCYsFaM84qT4neXNCZIx8SBzG7SZEhWwm\nCFc645LkekqBe34/gcBRTXYCURmTuepo8Fuq/sDc4Gt+je43S/UdRAUX6TlF\n/SIv1dhkfpN9YzpI8vkxJVyMG+e4hyRpkjfgU2YQwOM3SnoPAxfipm+evipM\nSFCmW0ycxhrz0WUJOEqKl660bmsRKubczWWWpBSvQjbu1m7ViVV2gmBq4VxV\n8p9O\r\n=Hdp6\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCofR52dOLHXEXYhiWuylft5/LanKGo5fTwSvNoBd0g9gIhAMV+vUSBEQLimEeiVWhoHyBm8uoSz5AOQtnpsve1iZIw"}]},"maintainers":[{"email":"agomezs@fb.com","name":"ags-"},{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"jkassens@fb.com","name":"kassens"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"sol@twitter.com","name":"lostplan"},{"email":"mgadda@gmail.com","name":"mgadda"},{"email":"schickling.j@gmail.com","name":"schickling"},{"email":"greg@hurrell.net","name":"wincent"}],"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.5.0-alpha.3_1598116412018_0.06927381311345426"},"_hasShrinkwrap":false},"2.5.0-alpha.4":{"name":"graphql-language-service-server","version":"2.5.0-alpha.4","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^14.0.0 || ^15.0.0"},"dependencies":{"@babel/parser":"^7.9.0","glob":"^7.1.2","graphql-config":"^3.0.3","graphql-language-service":"^3.0.2-alpha.2","graphql-language-service-utils":"^2.4.1","mkdirp":"^1.0.4","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2"},"gitHead":"6114f2af3cc645677e6ebc8438dbec05d7ff1705","readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```\ngit clone git@github.com:graphql/graphql-language-servic-server.git\ncd {path/to/your/repo}\nnpm install ../graphql-language-service-server\n```\n\nAfter pulling the latest changes from this repo, be sure to run `yarn run build` to transform the `src/` directory and generate the `dist/` directory.\n\nThe library includes a node executable file which you can find in `./node_modules/.bin/graphql.js` after installation.\n\n### GraphQL configuration file (`.graphqlrc.yml`)\n\nCheck out [graphql-config](https://graphql-config.com/docs/introduction)\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/docs/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js (also supports yml, json)',\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n- `extensions.customDirectives` - for example `['@myExampleDirective']`\n- `extensions.customValidationRules` - a function that returns rules array with parameter `ValidationContext` from `graphql/validation`. The graphql config must load the module itself.\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n## Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://github.com/Microsoft/language-server-protocol/blob/main/protocol.md) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                  | Stream                       | IPC                                         |\n| ---------------: | ---------------------------- | ------------------------------------------- |\n|      Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|   Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|          Outline | `getOutline`                 | `textDocument/outline`                      |\n| Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n| Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n|      File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.5.0-alpha.4","_nodeVersion":"14.5.0","_npmVersion":"lerna/3.20.2/node@v14.5.0+x64 (linux)","dist":{"integrity":"sha512-cv7OSJiRQT+VBssK14lcqtvgK3QmDmpgkUCz0qau+ZhPvbklPLDy0dUS4qZUFHOl4mUD+9dwCmlwlLzcA3PNFQ==","shasum":"e83fa9b4f6d3206f9153b7680319d0fe502bbb91","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.5.0-alpha.4.tgz","fileCount":76,"unpackedSize":315853,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfRdSfCRA9TVsSAnZWagAA/tEP/3RRYwdP3ncknuveuhG1\nBLChEG31y8ubtNkPMoaH84MWROBqsX5YdwLXHyX1LJC2I4jXGH6FO0k4Xa5s\nGsIc0pGqnh2Yg4yiuv57X0Vccbcw8wZzUA+QxmxnMUox5VPOvZYgda8Fg7D3\n6yYztg39ZpkuVSVR1Iv7MQDlnKO6kkNzDlH1/M0DMd3MfuGq8q//N0Ygcgkc\nqAKrcnxnnG9uDjTBxiyEnNVSl4qa1yOL9XeMHqNJsjJ/0KOLAPN61t6cnrWD\n0soxb3j4uZJB85dJMkps62S5afWswGmYimdFu0CbwseTuk0XLQM+sQB9KiM+\npOPAIXjHPZYT7TqYCy1pC2EVxXR+pXDTUdhoz5ZC6vp3fKEGfV4lsbdFTtL5\nsPfvUu1jAUaLEzq5xQqvjvcTG6D4Nie3GXtcukEGAdax3qsstKG48c6Mb55x\nojf2MKqL3J79wNStQnZ/vTSYC6+JKStzRHEH9IEdV69DV8LnhgAEQg1iOWgT\nKWjwPmBEq68KEn50rptj4g4ksWSgdWRZ78s6vhO2FCvBEcOS2C/mbxsSYrD3\ncxSYk1Gi06ZOiqiQ9LCnTOQ3BBnIQPA6r2gRhjXmhKP/6NXt769L7uqr9Se0\na77t5So7p+4dnygRS/p//W+tadvnqX2Zh1BP27+Nz2CM6HVI9YiFCsnrywVs\nlv0Z\r\n=T3zK\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCYrfmlf0oXnVMxiZT/QCSZnsgDed6Uxe+rYSsQVJ/+/AIhANYhZryY9pybLyBkB5yAY6MsBGEfgAok8NEk9hCz9DQO"}]},"maintainers":[{"email":"agomezs@fb.com","name":"ags-"},{"email":"asiandrummer@gmail.com","name":"asiandrummer"},{"email":"jkassens@fb.com","name":"kassens"},{"email":"lee@leebyron.com","name":"leebyron"},{"email":"sol@twitter.com","name":"lostplan"},{"email":"mgadda@gmail.com","name":"mgadda"},{"email":"schickling.j@gmail.com","name":"schickling"},{"email":"greg@hurrell.net","name":"wincent"}],"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.5.0-alpha.4_1598411934886_0.9604041833286154"},"_hasShrinkwrap":false},"2.5.0-alpha.5":{"name":"graphql-language-service-server","version":"2.5.0-alpha.5","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^14.0.0 || ^15.0.0"},"dependencies":{"@babel/parser":"^7.9.0","glob":"^7.1.2","graphql-config":"^3.0.3","graphql-language-service":"^3.0.2-alpha.3","graphql-language-service-utils":"^2.4.2","mkdirp":"^1.0.4","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2"},"gitHead":"cbe5d323230a2c4b043c127a612acc4eb65e0123","readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```\ngit clone git@github.com:graphql/graphql-language-servic-server.git\ncd {path/to/your/repo}\nnpm install ../graphql-language-service-server\n```\n\nAfter pulling the latest changes from this repo, be sure to run `yarn run build` to transform the `src/` directory and generate the `dist/` directory.\n\nThe library includes a node executable file which you can find in `./node_modules/.bin/graphql.js` after installation.\n\n### GraphQL configuration file (`.graphqlrc.yml`)\n\nCheck out [graphql-config](https://graphql-config.com/docs/introduction)\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/docs/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js (also supports yml, json)',\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n- `extensions.customDirectives` - for example `['@myExampleDirective']`\n- `extensions.customValidationRules` - a function that returns rules array with parameter `ValidationContext` from `graphql/validation`. The graphql config must load the module itself.\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n## Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://github.com/Microsoft/language-server-protocol/blob/main/protocol.md) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                  | Stream                       | IPC                                         |\n| ---------------: | ---------------------------- | ------------------------------------------- |\n|      Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|   Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|          Outline | `getOutline`                 | `textDocument/outline`                      |\n| Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n| Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n|      File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.5.0-alpha.5","_nodeVersion":"14.5.0","_npmVersion":"lerna/3.20.2/node@v14.5.0+x64 (linux)","dist":{"integrity":"sha512-ah5VJ6jbDgAicbSbD7mHRTabGiZRHPRTTlcAYrLdx9g1LvMUM/enVJOS9jLKoXS9W79eTQHtRuGI77z7/qTBqA==","shasum":"63bfa1071a473fd5f5de7543e8a7a0f23f446012","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.5.0-alpha.5.tgz","fileCount":76,"unpackedSize":316141,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfW5r6CRA9TVsSAnZWagAAFScP/RxdQwhGLvtYdexA+OHS\nRjQxhirgUGM87wqpySg+8c34aFCk4sEtt0ElPjI7mvJ9hOkDB/nva1tDI56S\nF8799J9HvzhHen8D6Zkmlv/lUsI/HMs9V+mv1zicBE3RHYN+hpRtwpbZ/M6F\nr19P44k3JBRBndjAdDonikqpQH9+qlwqFN7dJP4Kg5a0hcYWBnoB3bTT+rVF\n30e1xNqWBdbzJm6mlVVC0juxz6nP3+1jgBzqm9iZLKlVGglMJIWfiqqOQ5zm\nL+QOMU4/cwLlc5sAIqEOd4kYi6lY2holBd/CxMK+F6wwS7py12UGMeoi8MDn\nxC7JdIwhU83g4uDWZ2hgUbe/SL+RSAcLS3hGbaXz0lRNetH4kui5pw7jniuu\nWZzcT49Go+ruAyFRMq97VayXViHRe5W/lhzAqcRxyaagRdB59JGf5fZYJePZ\nqIZiIukRNgGybtsQ7W1nZolwNsY+nYRTfs24CUPvFl9fM3DMAzweF8T4vflc\nAkhqtTDawcl/UY/RlRdB/Q0jz4NeT3uLVxsLHX8iLgRW1GeKaE6bLpYn7Gqu\nlc4ThDKQWZf9DfJunkcA9/Yv3HHoiXAHtgZXb+FkXsmJRjQ8H2Q+F8lfSRKw\n5yqNNXyU+srkSnjsPxjEZXBJe29Ys6GFqKw/4R79nPQ0LCzmvmCv35Bl86bL\nbkQj\r\n=DqQZ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDZ5NqDg+b4Xk7/ZjSsmX+UAy2FInqSkvObD6gu+MoAfQIgULnl6REH2c0V+wDfQsSWahzC3UWZHxDqR/0PX9e4RJ0="}]},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.5.0-alpha.5_1599838969981_0.18975755720052057"},"_hasShrinkwrap":false},"2.5.0":{"name":"graphql-language-service-server","version":"2.5.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^14.0.0 || ^15.0.0"},"dependencies":{"@babel/parser":"^7.9.0","glob":"^7.1.2","graphql-config":"^3.0.3","graphql-language-service":"^3.0.2","graphql-language-service-utils":"^2.4.3","mkdirp":"^1.0.4","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2"},"gitHead":"71ee5fa6d57d55c231925601f4dcbf6c1824b373","_id":"graphql-language-service-server@2.5.0","_nodeVersion":"14.5.0","_npmVersion":"lerna/3.20.2/node@v14.5.0+x64 (linux)","dist":{"integrity":"sha512-c7b/o/B0C9oGY1SdIi0DA9hayI3BJuOHrf/Jxc3HDE/RDJJ37yYTVcngW03yNHBoS0LhAJvjJ8RhVnA1f+r1rg==","shasum":"83ee1b2d7b300abf044dbcea618a7e45def9f0aa","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.5.0.tgz","fileCount":76,"unpackedSize":317301,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfZNSICRA9TVsSAnZWagAAuIkQAKIAUm8U8mw/FqbyTJFj\nQvKL4JZbUVWwDtj2F2WK9NHKxciyPGWLoZHQkJ7t3m96zOyiGTEM38+2xZxg\nU7Wr+1awCqGJWZFT3AV/r9eU0yDEYgCdvAqm1pQzv9PwY2JpKYc4lA0B/zgK\n2DJBwRAXsS0hcRYDYYuB4Z6NfqEu0NfxyaG/2mmizUWKAqU08R40bvrJtlz6\n5DfVC9BNues0Gzlak/XtzO/6oX0boxdglEOQyqFZfsNRgVuIhiuaUIWISivh\n4VkWOJpqHp/x5maJTyjL6lO8Lu/L8ybH+iPjzDm7Dlo3HWidQoPjrdYevfsM\nfjdhu0KF1f5KgSG5u2N0+s5g9ZFiWlzoxcYPJu2FaqqpLUlwHeBSQ0CG7sgm\nmeUlPgClUwA4Dy8W195Rnd9sHG4o4+pp4nWQJPDFA1VOpO9KVgblykILFXiz\nxpBMDaQr3JBQim2C4N8HBVO36QcgA9BQdX8X65PTt6zm5KG/Rdk2wJbh5FTV\npKSyUIL2ozub8Xd1XPatKTuRZEHt6Zxm9MwN7EhETj4HSwYiatOXySjzvzhU\n+fZMmENW89bfyLgl76B04qW8Syjejn4MDZe36yjeWsvpi66cGQ/2WFRhK2pg\nN124Wq5goL0c2m8hINSQMrR+xXO4sWVNAnqr8W18URgmZKKVkc8oBVO9qKFk\nRZ/1\r\n=hU+x\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDpeIJgsetLmYpCVo9ipZ9jYY8lzdoICgtG8l8nMOvYjAiBcYTx480Eajk2IPhmrNTCUqi5lNHHxnXd1zEBekJ85GQ=="}]},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.5.0_1600443527598_0.5002553211863265"},"_hasShrinkwrap":false},"2.5.1":{"name":"graphql-language-service-server","version":"2.5.1","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^14.0.0 || ^15.0.0"},"dependencies":{"@babel/parser":"^7.9.0","glob":"^7.1.2","graphql-config":"^3.0.3","graphql-language-service":"^3.0.2","graphql-language-service-utils":"^2.4.3","mkdirp":"^1.0.4","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2"},"gitHead":"de0021b4ae8d998b1f66314ad8722c166dcf74ad","_id":"graphql-language-service-server@2.5.1","_nodeVersion":"14.5.0","_npmVersion":"lerna/3.20.2/node@v14.5.0+x64 (linux)","dist":{"integrity":"sha512-4H8YTdAHcWkP9rL8tpOAN721rymbX9UDUC9Qzr+kvVPKXPfC1CY8YG76/XzFseS7QHQYHQx9QIrI1uGuG+GTNA==","shasum":"3337b679d142c537d241e551f54fed27e86f4a00","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.5.1.tgz","fileCount":76,"unpackedSize":318273,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfZ4XOCRA9TVsSAnZWagAArOcP+waxAgnkYNaO9IKjuZLo\n8D3FyCkt/x8p8PDXfqnaMGmj8FtWiTly4ET2Y4yMmkLMKc9GTObg5QqWL3Ao\nlxUBuDW+/FVYkjjy+gZjv8PVAzI0M79pJxQxcOd0jS3s96eORrm8a9GxKEH6\nWmYDTyaN2NvyJeg157qsh/t2LXDFmVOg2urcgehcGsBPLPpPAUfM2tYgoxQh\n3j1RQD/Lo/2v0COWv9TVsCiraO9EsRGZUQTSl6ny8hOnQCBk8Qt6c/KscT7u\nWNwfxt1fWpG0BIaU15LrRpTUmI/0fbs+7JNQhgZCkxRfXDDNqD7TKzU5LTOb\nCO/GxynvFPA1ne565jISvjaKAbTtQaosW27M9G7PLvvHDf6SK8q+a79NIDmw\n15IaN26TEDiDuXc36j/jBKRcIJ7MYpmBu150e/2rLKMcg/KoCoCtdBPdHE7s\nqaTVBz55Mt/nn3C99DZw6+A06orkZfrPkKqjdm52qTn5GFkDavDIlqsCLdFs\nD80OtLrqvz3mK9GPuFvut2kY1UXjmWjdDBKwxOGGKDpQYNK0iPQdJPnpGmAi\nvlnl9qdxhcpiTRf2+4Z00AOEN+JWrUZSH9nUfeBo71C1dkz1q077NPGTdpvX\nVxsLGlEJm9vB9YsOI++WnzrXtw/qqAOXcN8u3voe82vY0w8ZPynEZNVAcKHo\ntC26\r\n=BF+w\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFgifIaSU8bqZWhtFhM6V99Qb2uKkYND0oECP7NtYVt2AiAZGMJAsluqdShdzAkP0jxGBt0DlHMra0F9cD0thiQbxQ=="}]},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.5.1_1600619982344_0.3148871097472634"},"_hasShrinkwrap":false},"2.5.2":{"name":"graphql-language-service-server","version":"2.5.2","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^14.0.0 || ^15.0.0"},"dependencies":{"@babel/parser":"^7.9.0","glob":"^7.1.2","graphql-config":"^3.0.3","graphql-language-service":"^3.0.2","graphql-language-service-utils":"^2.4.3","mkdirp":"^1.0.4","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2"},"gitHead":"2a48066e55de2eca8cb40654de8181fe5364aeaa","_id":"graphql-language-service-server@2.5.2","_nodeVersion":"14.5.0","_npmVersion":"lerna/3.20.2/node@v14.5.0+x64 (linux)","dist":{"integrity":"sha512-oZNLHBAhMlkFi/x697eMSq5y+WJB1p5u3WhAS6P+fBGusZiydpSKefLy0KXz4A4ym52jtM4llIankWSjRW+iNA==","shasum":"836ff368a702ffdf95a25b0bfa4fe46b8bc9691d","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.5.2.tgz","fileCount":76,"unpackedSize":318739,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfZ5f1CRA9TVsSAnZWagAAlugP/1m86VL+zXwC+D2Iaxp9\nGpJdDNcYJm+O2iF7/RF6FX70W3hVKrNQy8O8RxhH4KLhAh9eHfPqmmHcFPNj\nzv4RTIg4PIOfiE0VpDCUEaZrNN5/uYHVV5gSF5wRfcn7ULrh/D/2jqLvZFXS\nSF6cxw+aqIeSGfMzT05zfCtBy6ncflfwlSBV7tqHPz+X8NbROk4wUjLEQ8R/\n3vx6JZS8tab9eMTOjKyaPcm1Ub/7xAIPWOqY67SxO8Oo2xlhU8D2myCBA+eo\n+oG5TH+BoLivrZa5TaaWK503n7Kaq+orm76SykYAGtieYIOGJlacTD8QlCjp\nWxTzO9c3+YTq9sGSsavqBo4SYQir0VEdu9VPKZ4MK5Dry8lXZ4Bgef6oCgir\ngsDJvCGvR0KKXUuxlTlPsy5CgAFOJ2HBNoSNFY8JhdhwxG0iEmP3V77DkF15\nbL73H1mNWFAPIsCta2JlbKmmNDEseUJpRO1OtUbnpNWbKkEgw3p+GpLXH/lL\nw6wwhLBsix7K24GwuAynMPDsYiQpQgVDGju+4KAfk8QK8g0Qdq3notIOS241\nH8wK8RAtfveArUDCzUyuA2CnT9n7UaSYxXDg9XkG2x01oOiOqrJg7cwVvisF\nlN0F+thZAsOk4jfoVQGcBzEb2iaMOiHaRNKpWukhfz6TmP6A33DKuOUdnhDt\n/G3i\r\n=H8st\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBMqGEBfCX6Q0YTVTsdNm91jkD7Pk1rqKUMrE0EPQAawAiAyg658CksuovaFmIbG0iVMUezC2cW7fPQ6tY0FOS0tOg=="}]},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.5.2_1600624628705_0.9408229727327952"},"_hasShrinkwrap":false},"2.5.3":{"name":"graphql-language-service-server","version":"2.5.3","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^14.0.0 || ^15.0.0"},"dependencies":{"@babel/parser":"^7.9.0","dotenv":"8.2.0","glob":"^7.1.2","graphql-config":"^3.0.3","graphql-language-service":"^3.0.2","graphql-language-service-utils":"^2.4.3","mkdirp":"^1.0.4","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2"},"gitHead":"f0226dd05084a65a4286dd957717e446a01ce3bc","_id":"graphql-language-service-server@2.5.3","_nodeVersion":"14.5.0","_npmVersion":"lerna/3.20.2/node@v14.5.0+x64 (linux)","dist":{"integrity":"sha512-18OQTK8AH/DVvznyD3xQfTdd5ckC7bsdKc9E4BHzscwFuqjLRz/xSwx09OejR//oKdwRtlcqYOXlB+G+3lQtcw==","shasum":"7bea6239aedee40ce1a9b3a47e94311d0df8729f","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.5.3.tgz","fileCount":76,"unpackedSize":327057,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfa58UCRA9TVsSAnZWagAA0n8P/0+5cUobD19DzKlSIXOm\n8vuqPuni7QaQUgjmg/UJokOH8OnrvPLnEdTBlJeeF08ddXsvG2KFg6x7yOI4\nQbLrx1PFeH7xGau6k2so1yPA7/h2x7Vb00mrnT++cwCWJZphrNGg6aQP5a5B\nu2dlYiOOnFHVzm2HS6SefHuzrUYh64ut0+V6Gi6Ine5/HHxXDOmPo6E1LSSn\n+xhkcqa3zI5yP8Tlg6CHCv/4Z/RJtLwHXjIv4NrHUZJu/0z4TKmudUj329We\nd1PxC98O7If38xjqAH84CeFL3l/7tLCX3nBqM/phFPoGuAjts2sRz5wkq7pU\nRkouX0TLTpTq2jNKYQfP7e5hH2z91D+FaqfeQ+dwzuhi/jt5dgM8FdfnxId8\n8oaZKEl3UUNNRcm5I8Mb7N3hhUi/rmML06YMFPUq0sZ4Gp4r2J4R1UnEPtiy\nFh09JRMPrsvKLIwOjE0tAk9a1HmfWKMi9Xu/WnE7el8kNAUFHoBbJ9aS8DXS\nIDtPm1NekIJ2qFhUppiArftGw8VxZ6rGB0fLCr5B/2RxZgU2YswM4MaMMfO9\nYUr3I1G80C8Tk0L5R1ciWTHsZS6FpOWIclPNqNauBv7Gno/n7coxFWmfhX9W\ngqo8OLapnUdXOSdCyo+rrb4+zVri2ahXSy1mN7YEoQUzfYV+ZUEizLMmnP/l\nSmHA\r\n=RKVO\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICo3+2G49tbZ9hW79gtAT5L0PE0mIyxA/yOrXeEwYOpzAiBBhglMLYGhGzA9oQwUZR2JvEw0C9IFWMQauWFnzp55jQ=="}]},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.5.3_1600888596472_0.317627932792363"},"_hasShrinkwrap":false},"2.5.4":{"name":"graphql-language-service-server","version":"2.5.4","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^14.0.0 || ^15.0.0"},"dependencies":{"@babel/parser":"^7.9.0","dotenv":"8.2.0","glob":"^7.1.2","graphql-config":"^3.0.3","graphql-language-service":"^3.0.2","graphql-language-service-utils":"^2.4.3","mkdirp":"^1.0.4","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2"},"gitHead":"39f5e45a9d2bb469260b62ff8057cc988d853470","_id":"graphql-language-service-server@2.5.4","_nodeVersion":"14.5.0","_npmVersion":"lerna/3.20.2/node@v14.5.0+x64 (linux)","dist":{"integrity":"sha512-Mb6cbeoOR01ww/QYlgC6V4LZUyjNzfBBemdnYEZLSEZByYI2LwkzGMfnYtNhcMiuBy3VfoVgNA+ZYKoi/kSJ6g==","shasum":"0fb676ffbd514e337f2c23baf7bcf4ce47d6d08a","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.5.4.tgz","fileCount":76,"unpackedSize":326911,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfa7X4CRA9TVsSAnZWagAAPIUP/1YfYOApq74pfKSB6u/s\nmV7IJrOmZfK5jFR8mNh/XxGRIghJEMPbAnrnE+dbqljawx3psxF9TQ5CsLi8\nc+OzfEaVHuHMBTS1AkJLMMy5jc/SxQv/RiFuum3VQoVyp0FGJfT7/ar5HqmO\ngkunHkn44bEvDq3H6LhWsB6rNJKlVUKVECyB4QLKWR9CPG0rD+yJs3M0aHeD\np1FIUC4ZxUhJ511UF3Ol1a28E+lvBq83TLoIh0WRxdOWi1B9ksaId7BcyMYh\nlBsMhqj9EccVQQpe+xuv594atZRwZoCallnwMbjoYhuDMZje0gcWo7LzKQOf\n8oywmfecKYAOBXLnCkVEvHHzA8Y9ubsFFcK3tUNqvcvFsOeaqSyRJqvdD2jD\npY4hk8tvdMJKMLH1StYg2mYWeTyXXvOsBcgQXHyEqda796CsUrMBOtaxUyFZ\nnaV3f/fEzzTAam79RXBovfNqV2Cm6yZw3htmRhxzUS550OSwpBuWDmL5+beT\n1nGcGJWyz/9akuL6xqV9CxGgHBcwEOXAeuYHofIMRPsmdqbD2+tLgevUp7py\nvbZCqSUoj4Ydbki0/HRMzMYtBzOsj/DsduqSxAIw7bVlNmsTrV4W618nxIRp\nDpIFq8dFANaY+3tH46mEc9I8tq32gEZq79AVnHRVHN5e+vYzbv/q64rfmcoa\nFVgO\r\n=sM+o\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICfIYxb8SKxL4Fre0h7+XS2LGIbZpNT2/t3TIi8XDx1CAiEA9UyzRwxRDeS0q4nO25hN9CAXtdy3SWg4E9/iifHZCf4="}]},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.5.4_1600894456185_0.6381518798119579"},"_hasShrinkwrap":false},"2.5.5":{"name":"graphql-language-service-server","version":"2.5.5","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^14.0.0 || ^15.0.0"},"dependencies":{"@babel/parser":"^7.9.0","dotenv":"8.2.0","glob":"^7.1.2","graphql-config":"^3.0.3","graphql-language-service":"^3.0.2","graphql-language-service-utils":"^2.4.3","mkdirp":"^1.0.4","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2"},"gitHead":"96a387b4b205780d11add31a6dbe720cd534a933","_id":"graphql-language-service-server@2.5.5","_nodeVersion":"14.5.0","_npmVersion":"lerna/3.20.2/node@v14.5.0+x64 (linux)","dist":{"integrity":"sha512-HkWIE/9yKTBYFq8ECuHnLRtcJpb/T8ZsmJaGF7aQTcvlXTdeTNg7NTgc1GMe64OQtTd56JHD9l8WQ2jVCTlqXw==","shasum":"2158ff07add8cf34b81d36956c1f3fadb675b968","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.5.5.tgz","fileCount":76,"unpackedSize":327113,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfjvFjCRA9TVsSAnZWagAAcsEQAIL8LHkWA4IGY464r3cx\nQ5ekCK/PAbn/R6BDnVSbUVt9v0M2+NSKKRtHEL4ChIDWuwkJG5pB0xotjbr/\n8W/4VUbTHrAo+hU0DjnDawPABByAxuz6XHxlJ/9ZwgpqNN9Rwlg05UUNsBht\nPP0O/RQOgFDeoVUYBg97kYYTGqPq57bqO0mc69t+P7Ghes3vfhdSzvmBncqr\nVE1Zm9g3HwL2PWmw1OU87I2khzUJircLgNMS4AfxykTjNELVhTUinqQV6ptj\nxVfMZn6h3xoBPzzfqViKfP73zba5wX6eA+qA0tUAXA9jTyoSheoK1K/xa894\nBgA4twx2e5QjMFlRrDChH835QfVKHKrSrOKejLOIrzmzhuGaGPNGvZHze5RV\nj+S4mkGXy+HWGfy9ggE4nTYJThK2a3a16ZLuNj6rETdQCvt9H1KJQb++DwrS\nX9eyXp3Dbi2NcveZHWbEh4gSE+pcHjBTlOupx9vUcTxDiOKt6ZDhwKwnbIKo\nPWJcF1UZ6sb/foj+bjMtokb4yeJJR0LHmIpnneDuzUYpWMjhqYyK7N3Hv5L4\nB6JJ9/bDsk85FOW0IkN6FqKfdjqKN0Q1L+cNNHWqUG2YUD1Sb29TGKnpsSHR\n0cva5pFxZ9DZf3x+Zn24vRZbq+OIij3n8aIHo4VNd+ivK17qJqpi+OuD6KUv\nfdaY\r\n=vCia\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDO5Np5KoNXclBgVAdiPrrnTisUrozkZBnnrO2WtG5eWwIhAKcI4BNlVOZPHG2bB5qhZkFKF+ezEYa/DDlDBcNwDTTJ"}]},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.5.5_1603203427208_0.49685838271746463"},"_hasShrinkwrap":false},"2.5.6":{"name":"graphql-language-service-server","version":"2.5.6","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^14.0.0 || ^15.0.0"},"dependencies":{"@babel/parser":"^7.9.0","dotenv":"8.2.0","glob":"^7.1.2","graphql-config":"^3.0.3","graphql-language-service":"^3.0.3","graphql-language-service-utils":"^2.4.3","mkdirp":"^1.0.4","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2"},"gitHead":"3cecc3de80aade25d762d3bef15cfeca229322f7","_id":"graphql-language-service-server@2.5.6","_nodeVersion":"14.5.0","_npmVersion":"lerna/3.20.2/node@v14.5.0+x64 (linux)","dist":{"integrity":"sha512-/M5j6lQcJ3noIEEfowUvjKH17KJfaRGP7g1mo2kn3WxegSu3mIcMitP64VRwQRIsPqJzBBJPQtQ558L2jvjJTg==","shasum":"55698b244664eb0f2131dc59e88d5f481c26353e","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.5.6.tgz","fileCount":76,"unpackedSize":329154,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfwpt5CRA9TVsSAnZWagAAocIQAJ4HnngLBNOsnDMJkeB0\noytdwDztzWDQW/hxxZtdqcLBJTXsEbBSsLr/LcwBf1gBddzIVtS9cyGaXpki\ny2U1awRBcMFjAfj7saf+acyTjZSmj5PDnesLrgsN34yoWmYJBgKnnT4al8uD\nRgTi/Vkl71++bIsb3Oyb61t7X1j2/hrvZM0RIkxA45WvRX+7zVz2A1Zqm48H\nB9OaGTScUZmtWKMuE7M0lGqNmrIZu6SvTlsq8xjgKxITZTETNuJgZsyzeKSO\nNBqXlyxWUSWu5OWULTM1VT7eQ5iAZPC73qaHNPNkmm6IMrPy1Yz75K1UyPiO\nPxJ/oZds/HEDQV9oINRLIExp6Cwy+uyN5ymMuHWgVLUBMvwezG7ZTj4DKn30\nzszdGx3j+iosRnr1esgtiqV0c7EiCY/3ndg/3ZS9J/5Mvmt/76aLnQ1TyB4v\nf1W7dgOqjO0bv8C8X7Nb6iH8EuY1QeLHx7UKuhBuVJothcBZQtA6oKBGGg9H\ni/OOjKxBG3XiOxwOa4MKxW0X6TAUEen6TgLfZprcHp6ltd0hCjeBdngL0TQt\nYJKcGASoC3SN+fTJj83xrhjfLIYtOfHZ7+r/WSq6V4HVHU/vl46svAQfTktL\nOJbNw6LdlmLBkaU96mmGFhCstghqlFZpK1knsnaOJkEhoEzZBrudzUSZEBGt\n8Kv9\r\n=hSiX\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEqRyZZYFcWV+joQd0UmTRjiI7UrPV3MUrC4ZZu+2zyaAiBx9ATiDYSxgr74YY54FMYDhcEX6lfvoU1dHeQuLXfqwA=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.5.6_1606589304955_0.4900196111651067"},"_hasShrinkwrap":false},"2.5.7":{"name":"graphql-language-service-server","version":"2.5.7","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^14.0.0 || ^15.0.0"},"dependencies":{"@babel/parser":"^7.9.0","dotenv":"8.2.0","glob":"^7.1.2","graphql-config":"^3.0.3","graphql-language-service":"^3.0.4","graphql-language-service-utils":"^2.4.3","mkdirp":"^1.0.4","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2"},"gitHead":"dc2c78eb892a08945f712b7859070cb10e411ca0","_id":"graphql-language-service-server@2.5.7","_nodeVersion":"14.5.0","_npmVersion":"lerna/3.20.2/node@v14.5.0+x64 (linux)","dist":{"integrity":"sha512-NvGf5r7VefVY06R/1nNXJpwVQqrjU5enESK3sSlXl0Pi8OzfeXcEh8ZAxGKO0NvGRxKTqwUys+JKUvQVXzTAhw==","shasum":"ccd2feb0f98949fe65e50c83fdae6a32e29cbe49","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.5.7.tgz","fileCount":76,"unpackedSize":329545,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfz8vMCRA9TVsSAnZWagAA6fUP/0MqixOK4ZrtgzyfSMmR\nU0hEbwjK2lirIQUkik8jXBGiiOmU3wwCEvBmrjssf0LizJ7kW5YOFfl3reNV\nW/FdA76YbJU9AXGAMV1sY2MRiQcSEbZToT7qozD+xGasBLNbN+d4o8cjvut6\n8HRzOi4ibQ4fwXErbkOCtkvexlpnWq7JOolHLMncL4+T/dx3wy5vNsUBZztG\nuStKpeB3cnPAhjALQyfAtG4vf7vXl57DfsZJeem8pHfuyqmOK1dCHTKXDuVP\nEW7yMGdEBqXmXbVbehiWEyWLJCqQzyNChkXxgegD4yBdnACNaIfWLjomDHjy\nHjXClvdfNdyV54SikWrlawWxE/vbOEoZ0d0cqQd4QTEuV6a2fimJi1KFKNia\nLFznr0vau/6n2YXdpedMwF9gaqU+4BoGaarRxE+D3JT5MpPVpPcPYGi3fJvO\nx/TT7lOkJz0TVA8TmnXnHczxsJvYsaQ24dfxWJCvGtMwkgYrRcY4Pcbx7GQz\nZDPzgT9k3V2kOExpQeAxsNklleKTTh/lL6YTVjF2pfXTZsrNQHQzop2j9rZZ\n2DAh4xgVBUaPu50o6qF/oieLQ5VAqqS4Eufl8OKdowXZ4GqwMtidTOtOiDtV\nGT52+2L9aUcmAsT3UAlryIObUxletck1HmhBsMy16NSAzYLRkt43I6V5l05f\nwzi7\r\n=DB9O\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGe/1p8Tsc8H/lvGQHC0T9aX4/dk54oSGo6maWRkS9CuAiEA+kuWcRjhCUnNHjBuPb+/OtC0NS6bDGAx37X5Ra76RNs="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.5.7_1607453643911_0.71526467911596"},"_hasShrinkwrap":false},"2.5.8":{"name":"graphql-language-service-server","version":"2.5.8","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^14.0.0 || ^15.0.0"},"dependencies":{"@babel/parser":"^7.9.0","dotenv":"8.2.0","glob":"^7.1.2","graphql-config":"^3.0.3","graphql-language-service":"^3.0.5","graphql-language-service-utils":"^2.4.3","mkdirp":"^1.0.4","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2"},"gitHead":"ed6c94cb8240fd89324104f0a9a40ce80a2dd71c","_id":"graphql-language-service-server@2.5.8","_nodeVersion":"14.5.0","_npmVersion":"lerna/3.20.2/node@v14.5.0+x64 (linux)","_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"dist":{"integrity":"sha512-HVNIz2czOCy4JNMakwP9yDUPP4zJeBCdMoXdtYZ9hi+lN4aDxy13AfZUiFBnvpwHkblScrPVXgB9qLoL/Upo4Q==","shasum":"514847eb15f4e3baee99edfb29340bdacb868853","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.5.8.tgz","fileCount":76,"unpackedSize":329766,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf6gEwCRA9TVsSAnZWagAAfckP/3WvIM3ktXz5IWmxip9l\nhNZbj5gavtY3wD/NVSJ0AxOTQ5vJU7LYlvwNT+VP7ZSoYlEbvsBS9AHoOpuA\n3Ofm25lo8dw5wqAomgCXfeNSkgrJJ8pFaNxrNAClziX9bgBdoo3687/0RyRr\nF/Q0r6ZoZJjBPI5SZCUAY8DWWlWyOHhppwpC5ZyVI/lAg4suL84Fau2hToC/\nJSVedxYBzjwZYnwbQ/e/ixncERjk+6j2xF3ZW67A8xQnX5Qbt+00LIl8zse4\nj5DbVUZzJXG2SE3z9w+L+PI7yl8mIzXWx9VWV05Ysf+wv7HCDw+H8eAX4bgw\nLnBnOJr/u06GEzLnWvfK49n3MiHtuRSqjDFesyKPwckyj0oZxsa5AXS3Npi8\n3pubijnbcDqcFcNYCZi4H1sgRe6iGW7gK+xQPrc7WlV/W+gbRDXHkqkRazcs\nxCzH/o5CtFhP1l2w9Y3pSmnEORrxrHxAWOD+VEc4gqBxcXy4Kivpkciu6ouO\ncQpEt89lzb0syg6Eoucexz9VNHLEbALVZRIiLtj4NZMRyHyLuOMKUc2esmUd\nBw/jW2hvBd1oOzolGoE9AGw1uvo4VwLoDRdXsa/x7Acl72n1hed3LDuSQaBz\nPz+S/1u6JLEyVnyS0LUpGzCUH0A5+ej5IDx/2ub4vxsfqV2QPw1eqjDYlI/u\njRQ8\r\n=qKGd\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCVfQ9wjbWmwtCoZsTr+HZKp04YVZtqfeP521qwXzGMJgIgSnrDi4OXQ48YatNxFGaspswWrTy62CgoLuI6hupU+Ao="}]},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.5.8_1609171248577_0.24309610217764877"},"_hasShrinkwrap":false},"2.5.9":{"name":"graphql-language-service-server","version":"2.5.9","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^14.0.0 || ^15.0.0"},"dependencies":{"@babel/parser":"^7.9.0","dotenv":"8.2.0","glob":"^7.1.2","graphql-config":"^3.0.3","graphql-language-service":"^3.0.6","graphql-language-service-utils":"^2.4.4","mkdirp":"^1.0.4","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2"},"gitHead":"4038cf235b71eaf9a576c86800707f204ded8865","_id":"graphql-language-service-server@2.5.9","_nodeVersion":"14.5.0","_npmVersion":"lerna/3.20.2/node@v14.5.0+x64 (linux)","dist":{"integrity":"sha512-65FGtoULVdh1MM0dnjnA1SrAP4pSgl+OHRLkP62ceva6ifvI1fMZ7rRT/DmvF0gcUC3dJ/gI1yoWVoNkrggOUg==","shasum":"acfd16836450f67451543191e533c86d5bfa7f54","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.5.9.tgz","fileCount":76,"unpackedSize":329987,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf8ekuCRA9TVsSAnZWagAABEwP/i9QYslIZA9cmC3GVHBC\nyT6HqNKhl1v48GAvEol7xMgBlfEWCtNQaC1DjrosoCcHtRBkWVIQbMxxYaRs\nt/C1R925zPQuYTYYUURyiBccmJAJcY3cur0taOobRn8d/3ZAtp7wIllbU3mV\nxQyn+yibYcr0QdJ5xDXFD/VOlRnPu9KC7jxjRgyRFSKBFGzUlFCi9/AYvPGp\nJWq2fac22I6PQICE3IIX3j1vxaE3B1hWRVZEhTcl1t03eQyxHnDMFbvvcNSU\nfCs5tjT7zVMt0I7UjEOAgankYhaMRzbzw1iEkB7vQGnbwF1JLDo9NZf6x82o\nWL7Ss5y6jQqhQkzeFOZDK2WLEmqvu8tfiEYMcEt3YinfhCBurAfvUs2NRXRM\ny/E29/gJtZL9nAJxLeodWCqkOiOsU6QB2ePzHXWOJ31tZHRYBQUHU3ossvVJ\n4r6R0Kv3aE9Qw645l0iko9LCf5/X4xl8iFiwDMX1wC0/OblwslEJH0gc1Q1X\n6BtUcASxmpi0RgLrHd8W7ehmLk9ImTCyHc+vbb65XGc3R81ri4XRHBvdj0iD\nUdjfafi3gX1RO8R6P4cwNxQigY3hvt2+9SIjIHL2lrJ6K/LSj35au7pSnGQr\n4IORIO9N23KN0liZOHitAHWS3osUDGDEOlIIuQINZC/S8JqwcPGS6eHhPdJS\n1N8e\r\n=4rmv\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCOThnyvv3fKFGBcO9fMUXyXS/k58r+5rYNzRtGkRdyWwIhAPuBI808fs1BzmDoio8WWhHvPhqYyxTJGEByMhUmz9/8"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.5.9_1609689389288_0.9927368641581975"},"_hasShrinkwrap":false},"2.6.0":{"name":"graphql-language-service-server","version":"2.6.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^14.0.0 || ^15.0.0"},"dependencies":{"@babel/parser":"^7.9.0","dotenv":"8.2.0","glob":"^7.1.2","graphql-config":"^3.0.3","graphql-language-service":"^3.1.0","graphql-language-service-utils":"^2.5.0","mkdirp":"^1.0.4","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2"},"gitHead":"464a8851e1a02e6ef255729b3acd6dcb0dc0abce","_id":"graphql-language-service-server@2.6.0","_nodeVersion":"14.5.0","_npmVersion":"lerna/3.20.2/node@v14.5.0+x64 (linux)","dist":{"integrity":"sha512-qUkiYOFH18pWRV3BpeJANxHlDbg+thNRYMOqzFxZQ0+pzE1vqb6bnBbasZ4txL8wjpR3zQLKsFUYU/7+NbdBgg==","shasum":"6e9d3dc2c7f1d049c6b0c826c7687a071d4b53de","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.6.0.tgz","fileCount":76,"unpackedSize":330904,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf9yy1CRA9TVsSAnZWagAAoj8P/javjySSQnTh8dOXS0QB\nGIQjH525Nvm/g1iAvKtMLLazQGnfOmUyl9UMWZDIMTWI09wrP3WxOdR5Jw1x\nOHRVAQsLPbC/DPeS7DakUBbJjolNqwn2nnkJIXMMcbjA3xtHbBxlTMjGCzQE\nDBE0Rf/CUskHFw/kSpc1xqQec+koA++MbtfAtCFVAfgPNzbnLB7ReeJ/pxtR\nu1loppvkUMi4b+/m//iylaV78sgLUVq52ODdU+fzCcIxqhzkzRbc8v5fvxda\nZIVXjETh50SEd6MLUtsv2ED9uJGO+1ByzIBAcetslZC/YodhzlGYn73i8fAj\nJZFIwVnsj5v3ZelB8MvPW7PriUXX/FiF2zdf5GTuOrOZfZPebxMJC6Xj+oTa\nNmgIwwrO6atqzMHKbPOV9lxDchfpnM30rTiBvYp9YHIgFQ8pu0dyNqdvb8lR\nBexYnON7/8oRRv4cfHTNe6rLb5EjmBIOKYUZEK38wgI08kwIiTY3Zmdi2PkU\nmvW9mUwDBnIlt1n4fHhJZDcDFdCBsAoMDRIs5u2c8VRVwlHN8P3NPMF6/boC\nhsBXxj1J0dJY1MpfN836Qu0HI8Ywex9qTo+QS5LWuCE5XGgKR9K5X7xX38QA\nAUFHhmWRhWXfsh9lE5PQwQh1akeLQmBZ4fXmrtYMgFwO2yrLH3k6y4yFHHpP\nYPx0\r\n=OTxF\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICbbulCFwu9mEEr6L/2gXawxO+M/o6FqYTKme0WgQaNYAiAVv89gCEDYvYKtWlaV/ACk9vP/8GvBlKBW8608PLoUPg=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.6.0_1610034356840_0.3933610862451449"},"_hasShrinkwrap":false},"2.6.1":{"name":"graphql-language-service-server","version":"2.6.1","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^14.0.0 || ^15.0.0"},"dependencies":{"@babel/parser":"^7.9.0","dotenv":"8.2.0","glob":"^7.1.2","graphql-config":"^3.0.3","graphql-language-service":"^3.1.1","graphql-language-service-utils":"^2.5.0","mkdirp":"^1.0.4","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2"},"gitHead":"90be38760edbfc6d31282e2211263784f747956b","_id":"graphql-language-service-server@2.6.1","_nodeVersion":"14.5.0","_npmVersion":"lerna/3.20.2/node@v14.5.0+x64 (linux)","dist":{"integrity":"sha512-M1pQkruMXLCaiwuDVcfuJ54V0TI4INq6TOwF83lA7SCx8L5CWkHFXblw5bc4CFsvQ0Ihmlg9N0eXA2rGWy/wWg==","shasum":"7ada4aabb54a6c94752b24c01918b81470e950ba","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.6.1.tgz","fileCount":76,"unpackedSize":331125,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf91p7CRA9TVsSAnZWagAAeLoP/Ratjd7efEUsF3M3l3EU\njw+5HKsvslDrxfcvjXZ8AXdgRlHLrTuCO42dAvVE1a/vmNxOiIem08N/Bapf\nuBkYnbtvT986rjCCdjQflDX+/GYpJUgNHZXr+APsZ0IyTHTfpvxiRd9wp+qn\nkFdQf2n0GwhXOaukNYrE+wu7ZL7aqU6WOAjA/38tW/RFWZQW3HpdxHSe5Q/k\nMnRVbQR1MrLf5MULyvyhv+TwM0/p9dLM7Is1igzeDrAVSbP3GIq1Tlv0VR0e\nI+5RmRBPjZDmcsvlZNPy6gP2d+mQzj+oyo/wPoUhPaXJcvHJ/1rqSMi+cK8Z\niMyv7n+lx46u9yoWjzmU4v1CYjQG7NDLj828m80NtTC6dfjeDNYiEnypvTqe\nKFwJDAwt85Nn/W4JP/lz8ENKYX/M2ks9KE/TfrUWxFgmkgug8XE1TTEetpqO\nCf+FF9sXhKkOPTfOTGUqU/ypobqeTFbefQujEFlY5eq+SWM9ExWRJjcMOUv3\nOpRyhPVLYv6VmRA/0hbJEQJzZI4n0FrQLntEtq+rBFI0a3pTHOowoQg5kacM\nRi8tQZKWMt8oFfAaDKrQeSW3FXuEYZ9Zqg7G4fa0Jy4GcOmZOd8aqQ+CoUIE\neI8i6N0f7vYnCP+Tgy05axl9ITGYUbVtWscCrmYng2tWz0S40JEhc7r/0sUo\n8yop\r\n=AcZ8\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDOZ05l+1+r9MhHYCV1AqJlEOH7QlDE/SDxvMCe/l8S7gIhAIMPdKtkY59cLFCsjlSD8x7t9C2GYkhkr0/M/U5L5DVW"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.6.1_1610046075330_0.7326751244275742"},"_hasShrinkwrap":false},"2.6.2":{"name":"graphql-language-service-server","version":"2.6.2","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^14.0.0 || ^15.0.0"},"dependencies":{"@babel/parser":"^7.9.0","dotenv":"8.2.0","glob":"^7.1.2","graphql-config":"^3.0.3","graphql-language-service":"^3.1.2","graphql-language-service-utils":"^2.5.1","mkdirp":"^1.0.4","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2"},"gitHead":"5a26a22e9bc0b6822bcc46a1c8297ddcec2d86be","_id":"graphql-language-service-server@2.6.2","_nodeVersion":"14.5.0","_npmVersion":"lerna/3.20.2/node@v14.5.0+x64 (linux)","dist":{"integrity":"sha512-hdWi1LQEXpyhAX6xphldgON40maa9/A4wxZpv1erm33V+f3OD0FAnxhY1oJPeOPDvDoaGpEbou5wjekDCbdFWQ==","shasum":"648755ca533910b037e34b932d2c887e21908213","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.6.2.tgz","fileCount":76,"unpackedSize":331346,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf93OxCRA9TVsSAnZWagAAKpUP/3ywDgI0JCiPwbDiDPr2\nGQMunscu3aP6mMJhfK+2sCyt4mdxINccJ9EV1nEPux1bmUbOJs582XXul0xn\nQ9LjLb00sX+cp8OlunyVMAi9IGmDf7SRRm1YJay6Ae9mhbViMvGuj73eGb+M\n+t3pv8wQ6ryRSUQIxi4En+r81A//y6DEbnUmQDINU0Sj2+d24sGCuqKLiUj7\nyn+eiY0NvoolHj7tE/EQfku4F1re9zgfU6NK1ZL0TCWboSoCcPvoNp8XGS/H\nepcy5wDD3pu2e8b+K9dOFrkFI7MaCdfW4mCehn+JEvYBHR3IwojDmsKqstAS\nscfOeaj55jtlKJyOAkPGV74gcaWUEw3BTHFgBMi+qL1C4NV+800O3IP49rxv\n5l4iukxjOgLiWeQXNkmNpJ1Hz1w2vWvAbqbZ+8k4P3UTwqLuqbCXa2Hgt/hw\n42+dvXG9tkLzXLwyKDZPozjR2g0skrDnbIAgOb6+9WGUqGJqT2n7wY/dP7kk\nfN3QC+POljiD3nIuM0F+6BFut8ZJl67htNPL/kG6+g1A2ILr8M+I7AHa+JUD\ncUiM8Hh91qDfQ4AZTzcSJ+knqqwC0fz5wrqI6CAugXLYxWGdTwrZXdDEWMpB\nrxt1srQhwoh3HSLXL+HS29D9KUBoGJOZgtzSDU1p9lSlbY8fbfeMPB3DcJu7\n6l9J\r\n=foVS\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEMCHzZP9MLc8boLzvtP3OzUpoohBVPohFtcOoSUPZCzPrUCIAy2UDy8cky3lTE6uYJEgn4Y/PpiHp7JC7Xqek+amWTF"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.6.2_1610052529181_0.1597292274605988"},"_hasShrinkwrap":false},"2.6.3":{"name":"graphql-language-service-server","version":"2.6.3","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":">= v14.5.0 <= 15.5.0"},"dependencies":{"@babel/parser":"^7.9.0","dotenv":"8.2.0","glob":"^7.1.2","graphql-config":"^3.0.2","graphql-language-service":"^3.1.2","graphql-language-service-utils":"^2.5.1","mkdirp":"^1.0.4","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"experimental-stream-defer"},"_id":"graphql-language-service-server@2.6.3","_nodeVersion":"12.22.0","_npmVersion":"6.14.11","dist":{"integrity":"sha512-3rjkrn0CNYVK8pa3wB2IOf5T1elgIyYjZnPkVeK5639q8Ht2oxZUjN2rGtqbmJh04G95yS3ogDH5Bn24+K7uHw==","shasum":"2cf537f65b50acf16d2f06d3acd30e5735616010","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.6.3.tgz","fileCount":76,"unpackedSize":331653,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgciPzCRA9TVsSAnZWagAA/EIQAJS20ahDLCcUSl+/e4v/\nKldPAMhtUpaKSHLmwFtMH6tCX6ulb821lJzFUjmSUCz73SDf5q2YJq73XoE7\nxv0ujPypyqrSnmTmHkR808SUTP676yOJ0A0UfOzMS/W3kCduiO2daqkFrg2D\nYLCH6V0CGLJwNKuaAYm4R6hqe3QbsUsQHUu6bRkExF1gaXY8Zr8DhO/VW5ru\nYq/vfXOfk0qDKjIb1evkVnPyb336yjkoJOnwiIAj+1ptJJMKOSGEeJj8weFw\nqnoygXNw8ACm+M7LVaZWpuYnmTuaw05/58tQ+LpL81oLN/r2Dcs1HCEycnPw\n4j/VGZ+LTKCiMogpIWDrw4PvLLjoyzcy3YefJEdd+PsIDJ/PrThU/uCZGJGK\nERQjBV47yR4n7ELwldR92UUUXh1qbtmIVnKMoudDcVy/mS3KdJ6CqqsNjAPi\nyus/9Uav5P4D8dYDSPS3aHGYncKwIJ8+2tBEAx9KN76Mlv+Lefo3k9g8+TVC\nigtHT/4q3IMeRV40uCV7FXyhcJCmObCAOYhdwAtd2XbTR8gd6bA57x5ognk7\nWMzjjNdXSYSx1wAnqHfBvuMatCFg1V/28eGbWM8hPp4pORMPwjVUKMuVOPji\nKq34nIpJ/KnfDtHGNeJ4oWJBpPQr2RCgU+XlmrKAnnMF2vrkAwBFzqHOoa5k\nxoOM\r\n=HBBg\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCQmBl17dzLJTEMuAz7miQX4W+7J0sbf7BKeMQwjpPkJAIhAML1dku8CucqT/dIhyjqh0tYnhO7k8+2RnjIoI6TrEyr"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.6.3_1618093042685_0.17590936082176456"},"_hasShrinkwrap":false},"2.6.4":{"name":"graphql-language-service-server","version":"2.6.4","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":">= v14.5.0 <= 15.5.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","glob":"^7.1.2","graphql-config":"^3.0.2","graphql-language-service":"^3.1.5","graphql-language-service-utils":"^2.5.1","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"experimental-stream-defer","vscode-languageserver-protocol":"^3.15.3"},"_id":"graphql-language-service-server@2.6.4","_nodeVersion":"12.22.7","_npmVersion":"6.14.15","dist":{"integrity":"sha512-khAdTAHuDCspppAa91q8NuKNuG9yFqYCJTYQcOI51mgIRKMRNeTzF2BJ5zPRevnqdJkk3xGGOemSXAlV0vjQtA==","shasum":"cc05b05c74d1cf790d702277b55d7b61099d27ed","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.6.4.tgz","fileCount":76,"unpackedSize":336209,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDZbysyU87/TIAF1sTxGMPEBuZkDewm4Nxhv4lff3lmSAIgfUsJFUlSpauLJyjnBFLW33LoM1yHSAHRHQZHfDV48G0="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.6.4_1635422233945_0.5361514750830771"},"_hasShrinkwrap":false},"2.6.5":{"name":"graphql-language-service-server","version":"2.6.5","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":">= v14.5.0 <= 15.5.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","glob":"^7.1.2","graphql-config":"^3.0.2","graphql-language-service":"^3.1.6","graphql-language-service-utils":"^2.5.1","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"experimental-stream-defer","vscode-languageserver-protocol":"^3.15.3"},"_id":"graphql-language-service-server@2.6.5","_nodeVersion":"12.22.7","_npmVersion":"6.14.15","dist":{"integrity":"sha512-K58cAAyP0GOKejG1CIzoIiMOtmGfwHZaqRqYyAMxgnVsOM4Jma4tyCFO8uYOOkd3lwNAymEYR1IuAJ8WxhyQuQ==","shasum":"899524da3d20b4a731e3414024decab4a92d15e7","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.6.5.tgz","fileCount":76,"unpackedSize":337191,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHLdCk7xV8sjIJTrK8DAnRn4q3qe5/Q/e+hXP0Oo8mobAiEAv72Xd4X2Qb6CkvbMvr9/mYnAPGtEKgjLSy9xMF968qk="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.6.5_1635509873799_0.5880944014687011"},"_hasShrinkwrap":false},"2.7.0":{"name":"graphql-language-service-server","version":"2.7.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":">= 15.5.0 <= 16.0.0-experimental-stream-defer.5"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","glob":"^7.1.2","graphql-config":"^3.0.2","graphql-language-service":"^3.2.0","graphql-language-service-utils":"^2.5.1","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"_id":"graphql-language-service-server@2.7.0","_nodeVersion":"12.22.7","_npmVersion":"6.14.15","dist":{"integrity":"sha512-FWPkb3kyH/exMp1hgaMDawYik4LMg+8s3XV5V+j4+Ab14YFxOPh+3+I56fNrNAkxoWYaqYHhwPMFQSEjhD1BDQ==","shasum":"69f02fd2b934ed6d8646c402fd9432cf444f692c","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.0.tgz","fileCount":76,"unpackedSize":334951,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHuFVMmw+iujWxRL1pdfqdafpsM8wyDQJIRrbgqCvQKZAiAg8hcnw6hcxos5HoxwKcwV6T+AySbKRGpNl9bWmrM0Xg=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.0_1636303217146_0.4362402136948982"},"_hasShrinkwrap":false},"2.7.1":{"name":"graphql-language-service-server","version":"2.7.1","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":">= 15.5.0 <= 16.0.0-experimental-stream-defer.5"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","glob":"^7.1.2","graphql-config":"^3.0.2","graphql-language-service":"^3.2.1","graphql-language-service-utils":"^2.6.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"_id":"graphql-language-service-server@2.7.1","_nodeVersion":"12.22.7","_npmVersion":"6.14.15","dist":{"integrity":"sha512-GKWAUAc2WLioI9ufX76xqwI6LhC+7reKa6iuQAzP9rM3GqEDJk/UXqV5WK3Vd43N50eOUcMP5QYYWW3W9muXig==","shasum":"a80fa7c5e0cb4e4605fe7d6ec0a950057a5c956d","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.1.tgz","fileCount":76,"unpackedSize":335500,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHDRbRw04F3sGU4y82cPZ4LItE1mD1hbqBBbNgu5cfVbAiAKC58Q5ZSKSWaQ6TPkxyG8eD+OAAThd7YmEXr+2cInbg=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.1_1636444570919_0.057269684332909465"},"_hasShrinkwrap":false},"2.7.2-canary-66346cbd.0":{"name":"graphql-language-service-server","version":"2.7.2-canary-66346cbd.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":">= 15.5.0 <= 16.0.0-experimental-stream-defer.5"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","glob":"^7.1.2","graphql-config":"^3.0.2","graphql-language-service":"^3.2.2-canary-66346cbd.0","graphql-language-service-utils":"^2.7.0-canary-66346cbd.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js (also supports yml, json)',\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read from source files? if false, it generates a schema from the project/config schema\n      useSchemaFileDefinitions: false\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                            |\n| ---------------------------------------- | ------------------------------- | ------------------------------------------------------------------------------------------------------ |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                   |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                     |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                        |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                        |\n| `vsode-graphql.useSchemaFileDefinitions` | `false`                         | whether the LSP server will use source files, or generate an SDL from `config.schema`/`project.schema` |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.7.2-canary-66346cbd.0","_nodeVersion":"12.22.7","_npmVersion":"6.14.15","dist":{"integrity":"sha512-v+3igfET6WpjVfUEhDaHAGOCjMUDBWQJNfwslza6DEOniGmfmXgerAQXAONJ/J0/Ga/2rPuudUEFyl9q1C7uUw==","shasum":"588ca162c33486ac5ba85027169fe14d3ebb513f","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.2-canary-66346cbd.0.tgz","fileCount":76,"unpackedSize":335838,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDXe8l5Di0+EXujodL/+1Z5DuZZfg0cGIqnMeqZPfk5LQIhAOVfprnQ+1h5+eEJFtoII6twUjjp3a0ov0uJSAG8PjoA"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.2-canary-66346cbd.0_1636907800234_0.04030443422769059"},"_hasShrinkwrap":false},"2.7.2-canary-dcd21ef1.0":{"name":"graphql-language-service-server","version":"2.7.2-canary-dcd21ef1.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":">= 15.5.0 <= 16.0.0-experimental-stream-defer.5"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","glob":"^7.1.2","graphql-config":"^3.0.2","graphql-language-service":"^3.2.2-canary-dcd21ef1.0","graphql-language-service-utils":"^2.7.0-canary-dcd21ef1.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js (also supports yml, json)',\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read from source files? if false, it generates a schema from the project/config schema\n      useSchemaFileDefinitions: false\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                            |\n| ---------------------------------------- | ------------------------------- | ------------------------------------------------------------------------------------------------------ |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                   |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                     |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                        |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                        |\n| `vsode-graphql.useSchemaFileDefinitions` | `false`                         | whether the LSP server will use source files, or generate an SDL from `config.schema`/`project.schema` |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.7.2-canary-dcd21ef1.0","_nodeVersion":"12.22.7","_npmVersion":"6.14.15","dist":{"integrity":"sha512-7No4XyJ3j3u2TL1VsSesWdJhQA7mOIkr3N7Dclsa7bovZOK0AyiO13qS+RopLeV8d4CHy23xGwvEoR0UAFd8Sw==","shasum":"295f1fc6aef3ba25fa3f2dce34cc16dd47085704","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.2-canary-dcd21ef1.0.tgz","fileCount":76,"unpackedSize":335838,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhm0muCRA9TVsSAnZWagAAi4IQAJQqBWHPzlBAVieRpBBX\nC4lOwPkRFhjlwQmbo0R2C86RTG0Ox5kFiOTXNMshNsOHzvb5zcCCewk+CE/X\nNWMWGTtlDlFVQgxIryxXqqaCfCtlsQ4cjl4DB5S7F5BbuVyWclL+n4trNF42\nWPTfkfOMmFZeDkqs0i4i13cPNAPRYVXMaInF7c6Xn5ZRiz9zCPsQkPFeVPui\nrPrwJdWtBR/JipQDEdc9LQ9hURFBKqb8LdWBQ6NC5hz3ry/QhdflGSTC53IU\nm3AzNRm3p89jvlOPNdeW5DsbaTigmShjdqJm84Qd2VlOE97EFa7jEaUt5bIT\n5kXA+RQRwY0tszHvKtUmZ3I7m1ofTBqEkG8tsOogfo0J2HpNl/Wj5BL1QU4h\nKUYqFfh9PalxHbu0/Tdr7SPEQwT0N60+Esyzzb60YsOgNv/2/Ti8T5YkjNjE\nAxlkef5+5/Ijs9YWq9iML7TCwgFQXpBIDc3St9xL4Wrg+4jVgr4zjZcvO4YJ\ncFiyOibk9j6P0CBQEsjokiiILDIURgm/dJIpfY5zP3UUdr8ZL9z9INGQWQ6v\nvx7SWLUkNwnENFJUrnUpvOSrZomrN+QSr8/nbBeSh8eg0mqOZH3lra+P6FC2\nJpfPs4PWCZ93N/VIQMvFe3jO0noVixOdbylTfanNgtPhlM0IvRGbx+F11C22\nmzno\r\n=Lfc8\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDO2MzHycZsC6kdOMbI/LUv3I7qGHt5GCkF/eieCtuCewIhAJiet390mkT0EdmSzxbMiX/EUWaqWp1lFXpQ24GA5yrR"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.2-canary-dcd21ef1.0_1637566894084_0.49766037488136994"},"_hasShrinkwrap":false},"2.7.2-canary-669af9ec.0":{"name":"graphql-language-service-server","version":"2.7.2-canary-669af9ec.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":">= 15.5.0 <= 16.0.0-experimental-stream-defer.5"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","glob":"^7.1.2","graphql-config":"^3.0.2","graphql-language-service":"^3.2.2-canary-669af9ec.0","graphql-language-service-utils":"^2.7.0-canary-669af9ec.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js (also supports yml, json)',\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read from source files? if false, it generates a schema from the project/config schema\n      useSchemaFileDefinitions: false\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                            |\n| ---------------------------------------- | ------------------------------- | ------------------------------------------------------------------------------------------------------ |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                   |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                     |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                        |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                        |\n| `vsode-graphql.useSchemaFileDefinitions` | `false`                         | whether the LSP server will use source files, or generate an SDL from `config.schema`/`project.schema` |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.7.2-canary-669af9ec.0","_nodeVersion":"12.22.7","_npmVersion":"6.14.15","dist":{"integrity":"sha512-nxz4me8rqQDYf+e4v3emOTZb4uo1hhCw6+IYaijaWq4mMvg1nI87IP46kI7JN1CWAAQ21o/w63+zYudlbpoCWA==","shasum":"855b05f00ff24204c83c488d72c9eb67a4a181c2","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.2-canary-669af9ec.0.tgz","fileCount":76,"unpackedSize":335838,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhm0pyCRA9TVsSAnZWagAADewP/iIwl36kz2SqxgG3MU/0\nbaOT+uid3xnMlqSWr5qp/uNlHgA3KBy3EnElTR57VIIsb1nz1fufR/6AdCxc\nPMm8Ij4WJPrMFAlti1SGCF4hn0h/cBIDSG5Z/5jiAltFMSHsNIec65ieArYX\nGzB2pzqK5i2sjR/xzY/uv56v0bd63P1FXl7A1jiASxtGChSBHA0oyblqe94c\nUxE0mGT96SLyprPlA5SXfl6wOlbT4fwSG0BxP9G4DNzaiEVEtvZ4COZUvKd4\nEE1NwxHtYqm8wazsPQfUyWeScc/RhKQJi4vS4NjbqwBFNYdx2aoraQ9ygs6o\nxmW0oQkHusnilkoMTVFVIcx+09xVHzaIzZeRD2uS+I/im9lRrMT966W9E5Gs\nfc8B9uo1AzwUZpx69I+7y4kdavCvZ+/BSFgSEbPuRHOiJnF1HRRS32/8Qwbn\n9bMe1iU8LJYRj9IIR250BOPAgWLZ3T4ttyot5nezkcA1CTf7XAJlcBqvFFN8\nfW9Pq4SUpXw6jk8wovOq6RIlds1qc3VSrH2pWnNstBGpOHLMtdDbHtCHyuqF\n0ied1BHPMYQBFezatN75j82KjcOQp25/LYl3oXT9a/+lWSY8V0ElKI5LSvns\nnnboSkXh1cw+A84iWnwzb46v/ArRLKViKOwZSJoF77GGaL0qqOKvD8VC9THv\n7VL+\r\n=buG0\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDWV5YBwKF0otO/mNNR+kuNQeXRDgLtha1Hmd/nAszrWQIgbs0zZHex9kLfSs3B078SHcBUfWu2yJadjYRBpK1WQm0="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.2-canary-669af9ec.0_1637567089805_0.3117104642078221"},"_hasShrinkwrap":false},"2.7.2-canary-26511707.0":{"name":"graphql-language-service-server","version":"2.7.2-canary-26511707.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":">= 15.5.0 <= 16.0.0-experimental-stream-defer.5"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","glob":"^7.1.2","graphql-config":"^3.0.2","graphql-language-service":"^3.2.2-canary-26511707.0","graphql-language-service-utils":"^2.7.0-canary-26511707.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js (also supports yml, json)',\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read from source files? if false, it generates a schema from the project/config schema\n      useSchemaFileDefinitions: false\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                            |\n| ---------------------------------------- | ------------------------------- | ------------------------------------------------------------------------------------------------------ |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                   |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                     |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                        |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                        |\n| `vsode-graphql.useSchemaFileDefinitions` | `false`                         | whether the LSP server will use source files, or generate an SDL from `config.schema`/`project.schema` |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.7.2-canary-26511707.0","_nodeVersion":"12.22.7","_npmVersion":"6.14.15","dist":{"integrity":"sha512-GXIejzboKk1VShaDWxBDutEJFwvScs6lcbLNS1T2OQfL5uFwh+5N+GnGePhMCGh/10AGSe3PZ1H91Vz446Y2gg==","shasum":"919e669349b0d60ea9e60f34f9f8821b85edbbf7","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.2-canary-26511707.0.tgz","fileCount":76,"unpackedSize":335838,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhm1IbCRA9TVsSAnZWagAAQeAP/3iDOhqKZAsb45UN5WYb\nvOifrgJR/IQIBOyzEC6s90RTc/zLvzyPao3H6P2FHeutXAI0wi8gKAcK5BeJ\noxPvdOQOemGKLwdL4h9Oqmc9ivFwvCMxLiaNlSXnoScbbUwbWfwHk2PluJkY\nOFJxWces51emtTXCb0jmoi237Al4HJ16c+ka1v5bmgEObxxHwwkXJvIz4aRP\n0wGX+S8/ATZOluJb27LJRPXf+P1n+aj9XyLIyRHeQDULBmpOK0sgFTqjaPsD\nDtGU+ZDFEnKPjoavYeglzyX0UpbEOCT1MwDlM2BEEUS8uNkkJcZC8+9XMxZy\nA57Dibr062op1uxspoCHK6ngQViYuclUvHZvDp/Gqb5KmLnOllvsA7gt7JGn\nkWwb0KCj0iZi7Ph+o1Ck/p1L04hebMx33bYlVs08jU5Mhqs7tZubExbfBdyV\nep91ln2osbeEYkFu/u9BbOClvFRI0M/gQYaoGxfqHk//OFP0hw8ZHRMc+zvX\nDpCydcVE4kp4pWmBLxqBgWrC/xVOWBFFW3TFQ6zaMDqhw0gAZ8onDQTTW8MQ\n9bdXcPzTbADVZM3jJnUuSsw7zVYX0FkBXMl/z1PPGLVIK4BJ4bVHvGJp/1/e\n8yyZpPVf4wJtM6E2cgncJPIhc2FV8oNMSicsDy8Kb2V+M7x7InpRanYwPHWN\nNgir\r\n=XvNw\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICRiYTPCYJftRtW3W+MDvXLrq6STnalWzv7Dj2csSL5aAiBszvn9QFZr7X6ztWnhIPC+Ojtnedf/1T2+ZHgsbCp4eg=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.2-canary-26511707.0_1637569050993_0.11155271615607987"},"_hasShrinkwrap":false},"2.7.2-canary-86d7df95.0":{"name":"graphql-language-service-server","version":"2.7.2-canary-86d7df95.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":">= 15.5.0 <= 16.0.0-experimental-stream-defer.5"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","glob":"^7.1.2","graphql-config":"^3.0.2","graphql-language-service":"^3.2.2-canary-86d7df95.0","graphql-language-service-utils":"^2.7.0-canary-86d7df95.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js (also supports yml, json)',\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read from source files? if false, it generates a schema from the project/config schema\n      useSchemaFileDefinitions: false\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                            |\n| ---------------------------------------- | ------------------------------- | ------------------------------------------------------------------------------------------------------ |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                   |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                     |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                        |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                        |\n| `vsode-graphql.useSchemaFileDefinitions` | `false`                         | whether the LSP server will use source files, or generate an SDL from `config.schema`/`project.schema` |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.7.2-canary-86d7df95.0","_nodeVersion":"12.22.7","_npmVersion":"6.14.15","dist":{"integrity":"sha512-QwplN4JpkdAu74ThG5GCfXtySTMUvn2rt7ZtTdUn3DLElC/bSxN8vAGzGXmei30Hq4HY+pCHB68ek0CF1F7qgQ==","shasum":"1e123d54ce147c2e1d0540dcedd838d5127fbc3a","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.2-canary-86d7df95.0.tgz","fileCount":76,"unpackedSize":335838,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhm9P0CRA9TVsSAnZWagAAzJYP/1sSt3jB8Lsw3Q/XtedN\n+e0mfIGEXh6vI9m0FAXEJc5Vpal4JHTr0+Oefott7UDyMbKRAGdcPCimxkvC\n+3Xy0de4JDiP92QB2HIDNeld1Ilv0RHieg6y8Xm5eoBZJAskeXzTgy+QOgId\nxm8kzeSxyQqpztBI2fNuV1VRJ/aqgTPeiuGX960Jek7UQCJeVFSk56D+Ip0Q\nN1LbclJ0/jtBFgOxkow9Ea3jeO28iVfcJEwxzeeFoOuE1LySHoz4HbLkgkXA\n7pOzH4iJCb5N1ff9ZMctZnFpa0IZ0xC39871OYtLDUnDlqqM/ztNYzNELI5V\neL07uPXYM5TKgLwcsPWSjd/TpThG5Pow+0dJDh9wx8tlis0bP7bjWzgbO7vu\nAXPSaXe8TFUThh97fiS0RwCRd9VI6He+IS0DQHw3ZStKzqdL+8jO+XZ/LVP7\nuaZCdrgXbpm325ktkb7clKIOPwYhbo0lIPTQrgLb259dleGXhxjEUJ7Nsbgn\nXMN5Fj9ft0o+iamc5OBiCczpdhSFO72frGsM7vEXTzH1exvKlz8ttMkzA8iR\nx75RxVBdBdCeCJyhamHP6aCAGBxhABF/FpJjXVm6b76NoPq1/ZzT2yyuTleY\nOnsq4vQcxr7nha864D9b54CYmaMjjun92itue4GkfsNuus6XXd3hysvxUByS\nld5H\r\n=CH0X\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDx2LInwszuSGRq73A1MIfKflh/DAdvYmpFAA3Tr7ILlQIhAMWFlnyZqNdJYbqYufzG/saJV0smVh155XO2Ellbz0mi"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.2-canary-86d7df95.0_1637602292727_0.8324782590694657"},"_hasShrinkwrap":false},"2.7.2-canary-86c05353.0":{"name":"graphql-language-service-server","version":"2.7.2-canary-86c05353.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":">= 15.5.0 <= 16.0.0-experimental-stream-defer.5"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","glob":"^7.1.2","graphql-config":"^3.0.2","graphql-language-service":"^3.2.2-canary-86c05353.0","graphql-language-service-utils":"^2.7.0-canary-86c05353.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js (also supports yml, json)',\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read from source files? if false, it generates a schema from the project/config schema\n      useSchemaFileDefinitions: false\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                            |\n| ---------------------------------------- | ------------------------------- | ------------------------------------------------------------------------------------------------------ |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                   |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                     |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                        |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                        |\n| `vsode-graphql.useSchemaFileDefinitions` | `false`                         | whether the LSP server will use source files, or generate an SDL from `config.schema`/`project.schema` |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.7.2-canary-86c05353.0","_nodeVersion":"12.22.7","_npmVersion":"6.14.15","dist":{"integrity":"sha512-4OyIDXUqd/xKNFHNrpw35ff1bNRGOsF+n44F6uoxN216lfaCJmtrrOWXXxr0WZ9g6IPuJFxFnGuPoQoKEf7vyw==","shasum":"d2b7ce6c74cf9a434d76d2aa83d947a76e6348c4","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.2-canary-86c05353.0.tgz","fileCount":76,"unpackedSize":335838,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhnCAkCRA9TVsSAnZWagAAYtkP/00c6nceKteeV7Orv3AQ\n1YjwGKxmkY2Gy3er4g4LZEQXfxBbnRgnXxciLaqEyf03vUCJS09bAKojlBmO\n+EZAwF+q7cJzD8nAh4YCH3hqTXkq8KAGjAUcFv1zwcZ38UUvoAEV7h9kEjeE\nqqdmi4sICGcO0xB5x+/KAT7U5KM8gixwNeEfpYrjafXWw9l+uqZ7YHWm+BBo\nb2qeLhDaYD+oVsfNZO3+lssm2cIB/t3J2r384KK2HXjDThVRXxA+y++h4JC3\nOUB+8m6NtwHY5v/tdf9x3MmB/nLoIE9Bdaz8RTdy0n9nzELpfAfUMrMzrHnz\ntx1p4LlmHiTCp2oGt8gqZG7iLpy78N0DnIyVJwlbpxQbJ+O9AzeSuISAFFfm\nxHXB5ndrWMpXcJTAJoiYRvoLP5Qfe93Yfw2aC1P2D8p+1uuH2Z10d7FsJ7Tj\nYflRLikjAK5VVsfI+ji2udyWsXC2nUf0DfIUCGqytWNEG5KV7Nr+c6+csyvZ\nvycBFT43EFUZewyftGL+uYZg76oiZCu8WrvyuxRyC5isVwk+WGIAvpIDAgNX\nPD3SdECaS+xWYIAMsCOEx5Wcgt4LgfzHoeee6xLGzG6agkUb7eG5USpbO37A\nEtooK1bKGueO+809qzYba9jCmWw1UrdK777NvRTzfsg53YA/EXET3h2zR1LZ\n7eyM\r\n=V/wB\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD/OASB3ZYI4ms9wshA21eQ12WAcYy1vrcsVO5QOCvP/wIgBRCW3q5aJWiz/m0ifmwgL3iOpKiy8jmxPJuLsF3vYmY="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.2-canary-86c05353.0_1637621796082_0.5278997764985807"},"_hasShrinkwrap":false},"2.7.2-canary-efc41fcd.0":{"name":"graphql-language-service-server","version":"2.7.2-canary-efc41fcd.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":">= 15.5.0 <= 16.0.0-experimental-stream-defer.5"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","glob":"^7.1.2","graphql-config":"^3.0.2","graphql-language-service":"^3.2.2-canary-efc41fcd.0","graphql-language-service-utils":"^2.7.0-canary-efc41fcd.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js (also supports yml, json)',\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read from source files? if false, it generates a schema from the project/config schema\n      useSchemaFileDefinitions: false\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                            |\n| ---------------------------------------- | ------------------------------- | ------------------------------------------------------------------------------------------------------ |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                   |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                     |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                        |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                        |\n| `vsode-graphql.useSchemaFileDefinitions` | `false`                         | whether the LSP server will use source files, or generate an SDL from `config.schema`/`project.schema` |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.7.2-canary-efc41fcd.0","_nodeVersion":"12.22.7","_npmVersion":"6.14.15","dist":{"integrity":"sha512-3uz3maVNM8khE2YWrDEb4lQlMzTPr6jQjhxHja+U8yW91497kd+Z+5x8Xu6ufS5eODV5jAUv8kdbILhcJn2dHA==","shasum":"4b3f5e495efa3d60b289516ea9ba70dee742f7a1","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.2-canary-efc41fcd.0.tgz","fileCount":76,"unpackedSize":335838,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhnCKCCRA9TVsSAnZWagAANRYP/1rCg0fBNAtqVKOVodki\n5VU5AmflPSx4PLh6Zk4k83Sn7wm+wd1SqPiePp9iJIWd8rd0H+hkE4bPZIwW\nXiEjFPnp8GEGxRdZJLpsEyhLHtmJE2FS8MmBFJd4GKzSmhrkOZ/+qc3fU15T\n9hZq+YDBVeVH08MtLofvXAQAkvzavg7AHq4kei79Rv0+Ug/MsN5HlmXANaYM\nOizluTgEXO36QLTDCpPjZD6222HfY/VeFLC1D3pZ17NWy5CL9yuo1m0nldBo\nFZ7/8216ftoxY4+yKI1IjgefMqo3Ye9Tzqqkl4x1UTAEqyA0csepriNq/qk1\nLDaxzpVU1gXuBovnjEVUptaShr2ymzvtCS+ZgJj/GF6ADHOAXrKIyclptxiE\nTlaY3nHtUHr3C0C70w+k9ANMgKMrV1Ir2omoKAauXFlHfvWJsHspZE9k/y2h\nKFhcCW0eA/m6UlA1/1cD5Vk1PIGgx6LAWQTwDbl9R3dxrHA/yG5QMmaPdov3\nDpKe0AaEQt/RWYQ3vDzf1NQdYYDpqUkYskGhxs4ILxk/7ZHWSK5jgqUjBLdH\nrvZhTVL1pWyMurE2MWg4yeZ1PzCK21cJQgBh4A/HGIkNuOxdQvskNRa5sWIA\nRTlIhWSNz5MnRPh9p/KfyGuXg8gKu+7ffPfPikrDYQJqOQaR5/siAYFFHy+R\n3vZp\r\n=Iva8\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDbHYFAAjlZC9jv5mVLlDtOmfntLn1wW6ZL6nmq2WD76wIhAKZFvbSxBWBHcM856rwkw+yV7vyueUb9lrKwqj84etYk"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.2-canary-efc41fcd.0_1637622402550_0.605140172150918"},"_hasShrinkwrap":false},"2.7.2":{"name":"graphql-language-service-server","version":"2.7.2","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":">= 15.5.0 <= 16.0.0-experimental-stream-defer.5"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","glob":"^7.1.2","graphql-config":"^4.1.0","graphql-language-service":"^3.2.1","graphql-language-service-utils":"^2.6.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"_id":"graphql-language-service-server@2.7.2","_nodeVersion":"12.22.7","_npmVersion":"6.14.15","dist":{"integrity":"sha512-dF5qc697PbPgf/OBtngxl+QM1RXTa332u/Z8j/x5TasKeqDMfGaXeGSOYnTDbAZVsaAtphb9WQQZQiDQuKvQBw==","shasum":"30555ef9114fd1efe4660002957722bd1c230277","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.2.tgz","fileCount":76,"unpackedSize":335845,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhnU0oCRA9TVsSAnZWagAAJbEP/0lLI6HSfIQw8njw2ytE\n0a9ZNGzI7Ku6uaFeYbsqUwqrwPagHBAaNYuoWwM7BYNDlsA1RV/c96BbRDN5\n8Dmi8nn49kljKj8rFRwJkEzwYq0tJaUouzOyueD1yPgKl+sfAK7lgvGIRv8l\nu3YMkWAH55VOFubdyz9LxC6n+5CbLLKfGUvUkuvzDEi/RpdTarX/sTtAgD5B\nrRl4GdPJe9iH7c/+2HTuCPxgU81iGGUbZnMhJM6kZCFeM5XnMf84iTrsSOek\n1Bq9FpaNQRY79yREcXC4YPsyWt+Cp0U6VNJ6xYlGdrZz0HAV/LFVMUBEEhZF\n85BuMsBnQqVx97U55Hk+oFtQDrbes2WVL8r+c9f/nt0n2jlKp870jLytDhnO\nLVbR2iYHe4R236FA0EjcbD8ZlOMQ55740EVEzOg6c6n2jESWz0DejE303YUb\niLo12TEtkHwuN00y6JiqmfxDI3gJuTmS3RhLX4WrhE27EPdU39ajDF3hwXmw\nWWp3rrQbcivQt/rykbgqL/j0xf/hZNh4xDFrqLm5WTy22o8xIqNNymrYWFax\nbEyaaBCu2Ffj854XoWKxczX12FZq1PP69qYUQKQmDRftrRHMcLb25VzupbGs\n7vPCXJTOX24OcN8eNsP6h9HwUgsi3DeodmIBxfzPAPQrodp78CXzr6kxFUXh\npLH1\r\n=S44t\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDz079vXS7kqGbcXNu1ZlPmfW+eOgW4GjSb/YX2XFcZlAiEAqJL7P5MBrQpSUkdqSuc8/3sfjAtc2pUGsr6gOo78KE4="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.2_1637698855947_0.596116215539791"},"_hasShrinkwrap":false},"2.7.3-canary-3410d799.0":{"name":"graphql-language-service-server","version":"2.7.3-canary-3410d799.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","glob":"^7.1.2","graphql-config":"^4.1.0","graphql-language-service":"^3.2.2-canary-3410d799.0","graphql-language-service-utils":"^2.6.1-canary-3410d799.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js (also supports yml, json)',\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read from source files? if false, it generates a schema from the project/config schema\n      useSchemaFileDefinitions: false\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                            |\n| ---------------------------------------- | ------------------------------- | ------------------------------------------------------------------------------------------------------ |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                   |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                     |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                        |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                        |\n| `vsode-graphql.useSchemaFileDefinitions` | `false`                         | whether the LSP server will use source files, or generate an SDL from `config.schema`/`project.schema` |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.7.3-canary-3410d799.0","_nodeVersion":"12.22.7","_npmVersion":"6.14.15","dist":{"integrity":"sha512-yGDcKOeYI807U4f1R75VVRtXgkiGPj45WCe7/Z7AdqTrU/UGNSS0HtVDbvzhYLIv++byIQmcZyWbmERv6HXHLA==","shasum":"5df02a32ea6ddb6f28da82e7674de573b2f961e0","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.3-canary-3410d799.0.tgz","fileCount":76,"unpackedSize":336386,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhngn7CRA9TVsSAnZWagAAbx8QAIHITiL1sfzJ81NKqCy0\nWDBmny8WwkRQGSVD8oE9Lf9LGDGD8efmgvSRo4VeSuPV5XM2qR+p6O0fox7c\nqWWUJwnhefEh4e41Iu2ZcGTGmi9GWuCDKTRgDqlZiZ2OaxRdSd1lr4f4IijZ\nfvk9hObpDKUejdzhHc2NEsQ/7iKRcyXiZVAG6vosL/Ib54152tSmb/7ThOMa\np/rFpeVuG1ilmPetVt6PMJ1AWr/bI0+ew3tQfCNT56dhaxrzzS7Ul3XVOlSH\nmmybnV92wyqtCVM1dm4+hW93IOAfTSY+NHb92GrcarOj68H85re/CWTGL2f2\nUDdfQBjJVqnBb4HsQtsTwG5n91ZHy6ut3G2w9MDVtFJy6pM3Je6402a5zNvB\nHFrKUlfAGzLy076spvtCcDchxXehVcqVH/OP5rDjwoGs4Nh/F1I6uLLswCvU\nVe8Mjmocg1rW7zwGpWSmgTznm1VsC7ZFt/dM6OAPya4lxqPTNpENzUW6neZq\nvZc5T/7E/esBqIWdQ0BX/7lu9tei2vKUAFbxGQns6P50O3vgFEVBAjTck+8H\nEQqfkDh0byQphvuAUttNKrqLuYE5oeGzw9I9fFlFuRoLCMOFq/V/oUELw1xc\nHA286xW4gkdg1GV70bf9+eB+yS2/8ETE1XpxgVGubaNo39dAuq+UIBn59QTm\nA2/d\r\n=OLyN\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC/RR+27xvCbOUp1AcGgtJKI+pFB1vExjww+W4uVqPhoQIgU1mQ5h75OoE+e1nTXgplxFFnGsfns8nWvHzpzm/dbAc="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.3-canary-3410d799.0_1637747195040_0.3933560105934457"},"_hasShrinkwrap":false},"2.7.3-canary-98364dae.0":{"name":"graphql-language-service-server","version":"2.7.3-canary-98364dae.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","glob":"^7.1.2","graphql-config":"^4.1.0","graphql-language-service":"^3.2.2-canary-98364dae.0","graphql-language-service-utils":"^2.6.1-canary-98364dae.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js (also supports yml, json)',\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read from source files? if false, it generates a schema from the project/config schema\n      useSchemaFileDefinitions: false\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                            |\n| ---------------------------------------- | ------------------------------- | ------------------------------------------------------------------------------------------------------ |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                   |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                     |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                        |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                        |\n| `vsode-graphql.useSchemaFileDefinitions` | `false`                         | whether the LSP server will use source files, or generate an SDL from `config.schema`/`project.schema` |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.7.3-canary-98364dae.0","_nodeVersion":"14.18.1","_npmVersion":"6.14.15","dist":{"integrity":"sha512-rPThf+XYfinhZFijR96WyTqyERfX2UnbWOCaiE5EdRNVoK+DIuM+CW0Xj5c5H9UqRgTC/6zxf74dXXXjhM5Plw==","shasum":"b4492163dc5916695b14f450ac49e02382ee49b3","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.3-canary-98364dae.0.tgz","fileCount":76,"unpackedSize":336443,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhngzaCRA9TVsSAnZWagAAhzYQAJdFhyrcgoeLJ0bE+Qo8\nN93gpHCjsT/Tk3jHkR5q3KmANv5StIFSuf4AeLDkzsYFUQNNnOdKr087wyh2\nrs6BIq2E4RzLvKfIQPdAVpkiQ27oqVYDVldKAsGgQw6qTVu5hKwkaL4UpeF1\nPEsLtg7eodCeapV6GLDV34mouY0qh5bzE514q6mtMwXCqzDfbruIDo45WOnC\ntR/sLy1haa6AuDfSfGHPV2Xetu4dgL3rddoKX6TKCzMsD9MdaWmn9ldSe08V\n8+K3WTi+JLiosB+ylrOdTGyxtGPjxwdy1wkh9L7XJjlfm/HMTS7HcGt6iKOD\nF5AYD05tyGGCtkCHUEjKmzp1fVX899ga6KXn8ColgGX/RgnPuXFfMpnlh+Se\nix5KbQcPbS45plGfPJeAKL0BrAQon7xZ+LCP8mEXdCNVztrNdPOz0mwUkdDW\n07OqZlREbW03e0fdcHUWmydTtIV4muY+uSvqe7WUyJ4eozyTo9R2nfM1TG25\nNZIUSClQF0+uUAZaUzOXA934vYYpLbyNzLWmn09NoD4aTqx8Ttr9CsQjXoYi\n+eohNmXMlZ7hH/Ht7IaTnsccgIh5MfSIlKJkgRnfXoPnQ11Dj4iuae592+l/\nwGHYtdNnlzbIPRryS00JLeLJO1zgyLCE9OrDRkGShbIcog9Gt4zEAqgLrass\nhZn9\r\n=fpwt\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEsljn8mz+DkQWKG7Kisbwnh+JecH/xfOfb0Msjv1krTAiBSyD9XHBYY+PvDViGf4CBrBk+noH/AFE6Woug+qC2MZg=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.3-canary-98364dae.0_1637747930631_0.16614644183942828"},"_hasShrinkwrap":false},"2.7.3":{"name":"graphql-language-service-server","version":"2.7.3","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","glob":"^7.1.2","graphql-config":"^4.1.0","graphql-language-service":"^3.2.2","graphql-language-service-utils":"^2.6.1","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"_id":"graphql-language-service-server@2.7.3","_nodeVersion":"14.18.1","_npmVersion":"6.14.15","dist":{"integrity":"sha512-Jt3zXYmAybCZaRRyCTdykS5f2Mn9zbw06OmESpWABGWElzRPIfgRRjNhpp3GiwCneCENOI0Kz5sBGkwN4hvU8A==","shasum":"6bf173274d63dff72e8ba3a9eae3605b0d58727e","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.3.tgz","fileCount":76,"unpackedSize":336335,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhng+BCRA9TVsSAnZWagAANz4P/iAQZj3e0VR8xv1s0xo8\nwR27tEWpCc3TIrHZcoskRZ6nYxaL5oY1ibYgIcTzF4uimKNZImgs9v+sIfPV\nX5EXkqpePJ1urqdS8mYWlJWYwj47NrvlcAhLifJU/Pdq1Xu4AuPJ1S0YROQV\npNYEvLA5gUUfktxzhq/Fcnqjam5qGtdhQqtXcMK72wkCWpsHyjcC688CFeMW\nAG9c2uEFQ3Mz6siDJQndWG3+/GFW8Jq/N41WSnfQa0+pk9Vx69017idEk3Fp\ntSsCLuUr+E1jujmJMHEieINOgZP1JoN0wGtX8pc1ACNy+hpakCOREpWJ1W2x\ngg8t8hF1lptNoxsSF9WySrwk2iMqZyUlQXdzjZRYjPwNS836nHgndNWK6AwU\n7SzAcpjTWrIM5SLxUnehCiJY9ZouLR3N5ptYaL8tKbbsAiMNbLW6Lm0uJIYn\na/HCaCzD857/JTkZifLsFv2JgFEgozXl5Zw2/dgslXp7700oz0iLVg8seHKG\nvTTrnShKxMWG3tZSXnFA9JYvsiN2fKVzcWz81nV7cC0E72i5+ISmv6VcfrYN\n7Dj6VEnBvZhuXBU2YTvetIzk7tUfVM+jj4njwuBT3KCcXVms8Js8yJTxeR0C\nFM5RCMHaeGWl9e5xRnskJQAlk+/ZDY1hZRCE74Q+F8WQHPjapxFvaiubMm9j\nyKrb\r\n=eIBs\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDANlAo1H56t1VbbuVLP6Hf2/qBBKf9kCoLIH/P8qKiFgIhAL3qxBNO9lcGL2kLj7xsWKtWntNEdSFbC1iWry08R05s"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.3_1637748608887_0.10930129443417935"},"_hasShrinkwrap":false},"2.7.4":{"name":"graphql-language-service-server","version":"2.7.4","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","glob":"^7.1.2","graphql-config":"^4.1.0","graphql-language-service":"^3.2.3","graphql-language-service-utils":"^2.6.2","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"_id":"graphql-language-service-server@2.7.4","_nodeVersion":"14.18.1","_npmVersion":"6.14.15","dist":{"integrity":"sha512-8BBnUbBw38v2WwU28RDVNOievcXDF98CpJFBhXTrN/NFgRKu3Uj0gmcvEMu6plY3AKzBtCKCIpJaHKYjjNayxA==","shasum":"15ad951e092ef2e409c61bc2b5dbdf723010d819","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.4.tgz","fileCount":94,"unpackedSize":443101,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhnke8CRA9TVsSAnZWagAA05wP/ivckpuhnma8Cxp1dMvF\nQHMv8HA2ZyTrhfbamsBWj8nEAiwth1riksRxW5tE9XwzQK9JDefS7k5l5bCT\nSo9qFc1PwdubnfBQK7pvY9f33qlgoVIn8XdO3mALz2zixv5qL1dYEWnj5DEB\nWsCiyuH5kaxWVYbQ/6hOANMr1JtJ73p7piMZlqsRSDIpP+eqH/+mD4AEb5lu\nozzADwG+q0Y+m29FajzkxpYNBNCr0RFzSznRMdi3imT/kbKEOPG+FwNmwk7u\nXt1h+WTeK2DDfa/KGiBs1e61xyyz04lQRM8bufG4BcOc3pHS3xsQxVub3uos\nX7zcwxokfS3rb3smk0cez28/6IkrFc3lh+hJjzl4jyJ9MWGxX0zSYPw//TA8\nsg9sWo4WzaxkdKdtlC00SfiEM50NEpINn0H0IM6jZ1zued2NlbG7Pj1d6lWE\nFl8VQoIvUqaxmhqvKbl8oLl0pLaWzyHhzZ1Cy8ZAivoC4NOfII4RTFpKD6KM\nLCMWfAmJ9A/sVJBGaVMet2dSPsEClGXteKkdERB+WuyEtooYPi0ZwtLHxD5o\nvwyqRqnYaUPfvGnyobzImRmSvSCG+jPyb64/5OyFiRDrsNkrIHktYCYOsi7Z\nKEagfAElSkRlA4fl1BPQjpl5Pk4lzhNucXvZbfrQns0LCNj1iRszCs2hLNCQ\nx4Op\r\n=i3Q9\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGOf8ZlJk2DYSd2s2r09VcrcDZsQ2/1XOAMqHm9nqukYAiEAliO/h4zMzCc5Z+LLPq6AIaYRwqfxKRyZfVI2o0z2Fck="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.4_1637763004204_0.7661638636859185"},"_hasShrinkwrap":false},"2.7.5-canary-2e150b92.0":{"name":"graphql-language-service-server","version":"2.7.5-canary-2e150b92.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","glob":"^7.1.2","graphql-config":"^4.1.0","graphql-language-service":"^3.2.3","graphql-language-service-utils":"^2.6.2","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js (also supports yml, json)',\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read from source files? if false, it generates a schema from the project/config schema\n      useSchemaFileDefinitions: false\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                            |\n| ---------------------------------------- | ------------------------------- | ------------------------------------------------------------------------------------------------------ |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                   |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                     |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                        |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                        |\n| `vsode-graphql.useSchemaFileDefinitions` | `false`                         | whether the LSP server will use source files, or generate an SDL from `config.schema`/`project.schema` |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.7.5-canary-2e150b92.0","_nodeVersion":"14.18.1","_npmVersion":"6.14.15","dist":{"integrity":"sha512-SsyzU6nljNm0ye3ClZ/aTcTDGO5Zz2YpzCOJ0iQs0DkV25Z7QnXoM7RlNkioo7RAER5WmMlxRh/x6pBW5XkGug==","shasum":"29379f25014e283d63998fe201476c8da950ca44","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.5-canary-2e150b92.0.tgz","fileCount":94,"unpackedSize":444010,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhn9stCRA9TVsSAnZWagAAf6IP/3S9BvTtyCWuuFojNMA+\nxb3O7ofODw69pLrxTA4k0hleQC9eEO2WMXyC2jLijj9bqalTSnJGLg1U2sbZ\nuxAaVjHfaJLg/yGK34mmGbeyW255v80g/rs+fqs3nGe2z7sriixzkTNApTQm\npooTOZH33JxORR+7cZPojYiAhsQxp8y82Ush4LVGPcSVSVS7WRjjxQcRT0k+\nt9fXGk1TRIvNsyzKRPo7GlAUkddCtTUP0lGd8b58YIqyY/VSvYrLJivVycrq\njekwmCCGIZ/A/mZK2ZYPWSEl0LhjWpCf30DEcm1nk0+Q4MJmqsLF/Aea8cOz\nP9IbHFFadpITkT0BuLYsW2DaUMylks8rTOhAbRD9lWzth7R34TtFzuOmMIsX\nGN8dRFw2Yy61iutNf2wsQ6A3Sja5gw1Cj4Db8frEsYZfOKiUHu1xAlh7P+m5\nnYC8YFKhaPIc74CbFCqDFkB1u1VvhpnBrFd8reP5i1WNdDjx1jZhCMygVlJo\ny69nMhM0SxgeEEiSKADDXoa8skbwY3i1GZkrN5Ia1j0vZjh14H7naUi6s0dC\nKseqeaYyP+wYYxXI4iQWXDNRlC7OR+7m6Z/ZxR34m2zqmSnI7TE2OF50Qery\naFaQn/JyqeMlb44I9FyFYQCP8VKIy8mZ3Li+JQda7gne6cF6hNnmRubHFWrB\ntOql\r\n=mozp\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDt5FJtNPejWLNzp05bbadopL3TaSmobF06xc/OijQutAIgGUYDYq8lMw3EyopqgQPTsxnGaLhAtVAM3qil8C+J9xM="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.5-canary-2e150b92.0_1637866285159_0.026652479689067032"},"_hasShrinkwrap":false},"2.7.5-canary-dd03c544.0":{"name":"graphql-language-service-server","version":"2.7.5-canary-dd03c544.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","glob":"^7.1.2","graphql-config":"^4.1.0","graphql-language-service":"^3.2.3","graphql-language-service-utils":"^2.6.2","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js (also supports yml, json)',\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read from source files? if false, it generates a schema from the project/config schema\n      useSchemaFileDefinitions: false\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                            |\n| ---------------------------------------- | ------------------------------- | ------------------------------------------------------------------------------------------------------ |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                   |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                     |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                        |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                        |\n| `vsode-graphql.useSchemaFileDefinitions` | `false`                         | whether the LSP server will use source files, or generate an SDL from `config.schema`/`project.schema` |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.7.5-canary-dd03c544.0","_nodeVersion":"14.18.1","_npmVersion":"6.14.15","dist":{"integrity":"sha512-3gl8iyrLq1bRjRkr1nIXa5n37SuO7fXp4i6nYyZjYdCAU4+FwwD5rRD6LJL5OGIWqy2i2MOZsUan/LkbsHu9XA==","shasum":"b37b91411dd7bda27e0767dc0774e2b9bb6eb03f","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.5-canary-dd03c544.0.tgz","fileCount":94,"unpackedSize":443982,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhn9xoCRA9TVsSAnZWagAAKkQP/1fQgmQwgOG9EBI2nQ44\nlsXtj5iQMEufMCzAFSA1DwgOiZAMpuI4lFkBEs9h781J/JkcrrSobudaKGJW\nHdoOVg6UZ6iUU8MWngqBPnTr4F4WizUqFFj0qIbsHJ3SWq3s/SHbiXbWpHEx\nM3lv30irL/+gN5Qs3b4qSkgsVIGYTxygHcd2oUOkgIRwnNfMcZNnbC5m/iR9\nKz04a2r9FIf+ivlrfuihqmkC3YyXsLOPchFWDBmhPvsYfU5Qumy7PypEx3JN\nSbXIBvuJV9RrBAgZcNFkolkbGVqSkAT4IM8QpvVXQ4XHmxlLxQiLK6L/retK\nN9JEmEzaHXo0CWuQZRMYb//cNi6OtoozixJ7I+nwpWbUwbRdh1FNRRi5t3UW\nbYsiintA6UtCLZ+ctJNZsqbxOMkSQYYKu0mKZqt3ntLIb1kXnIXIPGK+9Zl6\n8HKqHypnqFaocBr2a69x0oe8avnB1VFPesOfu6xuliFR5wtnw1Xial29eq+G\neTD71GiFSuaIVqaY5G+aCHYwa7jHV0KG5/KPtzZTP/Ijj4QNWwqX+YT42uH1\nP62LV/ZTq5Lvd6QckSN81IIoOWal4xvizQhgZWwftCKGDVoloRujCknkUaTV\ndXF0Z+vf3sBIn4kN6TwzdYYjrDbk5grU+vahCJYPQVdm4R74v9vVt/84tvKz\nXge4\r\n=t3MS\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDkYKh3dteNgiwJjH0yo79xiZWf6IsH+NWtidT9NFrKNAIgH4umq+sCOlLVq5sKUK/Dhn3GZ1sd1qNvyRgH3fPskig="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.5-canary-dd03c544.0_1637866600000_0.42630574174146885"},"_hasShrinkwrap":false},"2.7.5-canary-d8b89752.0":{"name":"graphql-language-service-server","version":"2.7.5-canary-d8b89752.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","glob":"^7.1.2","graphql-config":"^4.1.0","graphql-language-service":"^3.2.3","graphql-language-service-utils":"^2.6.2","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.7.5-canary-d8b89752.0","_nodeVersion":"14.18.1","_npmVersion":"6.14.15","dist":{"integrity":"sha512-jtIQp7RjuicmdA41DEOTCXXzN3Xws92QfPHq0R6yhyUtNnakgWX51IWP6BMFwVKlNtvqdElJjvsFlIAsQRE0UA==","shasum":"776e646a1ca53076dff95686e1ce5d03418b345e","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.5-canary-d8b89752.0.tgz","fileCount":94,"unpackedSize":449209,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhoBctCRA9TVsSAnZWagAAW9EP/2Nzblti8sv5bh75kq50\nM+wc/aGGIBAmYNbgHnj2zrU8jTjK/YovwRFXBlCXTDZ9Cnjl3PG4JafeWhWo\n6ku2oyUD2xuvcu3IL2F0wIEDmWCWZlHXg0qv+W9lB+hM7r2ttkMv+lqb1Ddj\nQhNrRq85ncsAXYsu3gDYSNog5rxZcRqmOs3rBj4IVnrTkTo1l8wSzl0+sIC9\nPJwqGerTaEcISBjtgfjng1PtmI/KPz9e+ghhEFfTeufFsbW+KcHSBqdM4Vkb\nRpI5DTG1kdS4S1+NcbopoCzrFMJbvmFrcGYHm30WR5GAwMyWTupMC5bybi2c\nIYClNIw6KtFR3Y+qYLQlCEWKOye591lAwu6ft7EBYfp3Jehaa7lUg1YISzwT\nkWiGeS2vzuEzWljo+pUsX+RS9ABLFzYMeWW9xPIIuywQZrP8aAoAHoNly4vA\nLO9s05blNC9Np37RT6KUQQHqrndt87zOqQPNK/pak3FBg3VXlMPEVlM+RVjJ\nrNTR2dCLWOpz3JX2jmA04/Fbya6OHm6zMBXKcDXIM04JBT3n9QmjObEFMUmY\nwF6KElUctVRWN03WUii9WPapE0njEVjU/e+oKXkunyh65Ll47miYSgvCznNO\nRCTeuIFCRPcPeW5PPKF0YLTQ3G03g1ZELMKPR9HTZPg5ycodqK3UawCQdk9K\n00sM\r\n=HDLB\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDWjFh2Avz0IdkVTTMAc8s9Sz9nW975k10Rjx4a2Z2bygIhALHe1Frt8Z8NQlBgxulFOgOiLv0qVASHBHynFfUlIPMZ"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.5-canary-d8b89752.0_1637881645062_0.5464598914620944"},"_hasShrinkwrap":false},"2.7.5-canary-f79bdd43.0":{"name":"graphql-language-service-server","version":"2.7.5-canary-f79bdd43.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","globby":"^11.0.4","graphql-config":"^4.1.0","graphql-language-service":"^3.2.3","graphql-language-service-utils":"^2.6.2","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.7.5-canary-f79bdd43.0","_nodeVersion":"14.18.1","_npmVersion":"6.14.15","dist":{"integrity":"sha512-i17cSJPlAchjiOfHpLYhMcO90xTDQ+91SqEjKYScm7MxUyK+aOc2Nt4o9tvKaZmT52oeK6QdYW0+9Da9AeTR1w==","shasum":"6d493678e72a6109e2c7de36e37d8402120fe2b3","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.5-canary-f79bdd43.0.tgz","fileCount":94,"unpackedSize":451015,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhoB4HCRA9TVsSAnZWagAA4PsP/R39O7C8t5nPUMoJmlgw\nU9CR3UKKGCfsEZ1C9ADj1OFKbng3bWyn0n/R1enW6NZgBpCLs3glmdYBIRLA\nNlHKC6YiQpeoaWwY3oU7hcoF68RwvoIAFlLH8yUOcE6aUlj8tNHBhUZayOcf\ntYW07D4t34To5k2g4Bcc1c1l44v6wc7jrlQNhVU5/o9ys0uRTSrtNTnMm2O1\n8yqtHUSvYC0qKbLR4gee+NHrQVWbedg61fEzox4kZIYKCKbJdypF64nmpyF9\nDBKLlWCcGFtvnsPQ0exTSbrwBpdhB4fD9h/pDTqe4S4IsQNUmArTea35Y0jE\nBDLtywdOXZu/OQEfPmRNoEsEPXkJP0SGoH8bU6NGlpOM6I6XpFUBbzt1k7I/\nB15WZxtrM/rAAP7QDU5kfWrsKcWOKSmb/iVCootJZN4JkhStcVy3tyCG4wYC\nyIQnft3LeHJ2oiB/7Wid89YxuaOQIDT8n2UN0B2QTswZ0TOVpsFbC+9InQtO\nJKWGtL7udYO9X25cJa1xb5FlD4hC0E9p0vhYMRTaV5tX9JF+QBwmQy0BEDkQ\nKe3qVma9b9P3fD9dMAqtA50KxcXWLCfBZtY9iuv+2WwLEKrYfsMw594YnWlV\nx+owtXnrVqGKOYchPl6hb67kJmHPoQP+07g2U7cTG/ciDgzG+ZvGBWANv0RO\nU1Td\r\n=xhNL\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCgXP7nmBwzYeCu/8TUY+geE0R5onsLyOtWWEy1a/mMHwIgHTIDpYFJ/ZJ3He8fkA6XVmKs/2biDcZ0yYjAwrlSRRE="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.5-canary-f79bdd43.0_1637883399184_0.5297313503788699"},"_hasShrinkwrap":false},"2.7.5-canary-acdaffca.0":{"name":"graphql-language-service-server","version":"2.7.5-canary-acdaffca.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","globby":"^11.0.4","graphql-config":"^4.1.0","graphql-language-service":"^3.2.3","graphql-language-service-utils":"^2.6.2","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.7.5-canary-acdaffca.0","_nodeVersion":"14.18.1","_npmVersion":"6.14.15","dist":{"integrity":"sha512-lyfTax/tLoKtVpWOxe4lc4AblJZDwmVn8f9Zl7WnBOe52ntthSiHURKgtKAJH9XH9BlOn5HsMZiVYkPNnd4nPA==","shasum":"e3115d414e590c591f1eb134fa9a4fdbb61c494b","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.5-canary-acdaffca.0.tgz","fileCount":94,"unpackedSize":450840,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhoB+KCRA9TVsSAnZWagAAP6MP/3HZh2BWAQuNNObfRoOh\n9EjkaMQciWMAN8byIPHYj9QwHqzkpDspwk99HWj4jf+GruOjkTPBFQ4eB0Ky\nk1igfctsQYDMPLoVkAJHyRdt/iga6ZxZLqQnss9xQeFvCsmKS0XQpflyyk1i\ny+b9RavwvKpwFnhOQLmHtdgn/kJyjcT7j0KENc9YIFVAfn0n/YMs8y5rdTBr\nRGZzzRTKpDMc5b/SseVkAgf2AxxsQvuE9g/xuRlqu9tk2ax+Z8hbTFaJUU8U\n6x2EA1vuG5P0XQ/AUkq2Wk7U49Ey7jd6Lg2GsYmDXv2QXdwZYhA7+pVF3RPK\nzHSmHziohXTTGEUZS9nVkNNJ/O28l1l6sxF4p+aE7sBgDoEOPchuPJR8EBAn\nW2xd0xatOkUk/yM43snbL1hDSOPyODaEX8Wonb1SIiX0eGekkYzJBjr/JQG9\nfNVPDGz/CSz1lzKXFvZowLe3vy5hp/iK4NQ5q6PXaOmINFoMqRLKsvZL9Rtn\nkOiYnp8zGgg+4BqqruWRUvqWPWy1F8qq+cnuvQ0+rWy2sBwl2RCM4+4iw94M\n6qxk80OExWrDLpHuGxgj0Sq5rvI0M8S9mKK/YFYMa3YAFuGszTaqxKvyjjt/\nPrNG9uTgsf48V1Xv9iSlhX91NISIku1Nk6BYS0xR/+HG+6SanYRCDFV8HBP2\nFhqg\r\n=hn/o\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFpHRFLfV/XWUpgWw+tFJoGdqs2jCKA28Xyvq1tIOoCZAiBEzklD8RyoPNKQhORKQLfcIXZP8LC+t+tb/b6tXt+ocg=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.5-canary-acdaffca.0_1637883786796_0.10422664342457577"},"_hasShrinkwrap":false},"2.7.5-canary-4939a666.0":{"name":"graphql-language-service-server","version":"2.7.5-canary-4939a666.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^3.2.3","graphql-language-service-utils":"^2.6.2","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.7.5-canary-4939a666.0","_nodeVersion":"14.18.1","_npmVersion":"6.14.15","dist":{"integrity":"sha512-qGFUA8GqjKcgrh8DuZFjMtjIAHZtsMbgEACJJOoKTIiJjHKYW67Ky2sf2gzNrqW9kqplrKuTqooCiP4NsoarQQ==","shasum":"806c4be253f7f3b3be99a72edf0133f6b568db99","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.5-canary-4939a666.0.tgz","fileCount":94,"unpackedSize":450815,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhoCFXCRA9TVsSAnZWagAAuRoP/RudeWh3lYNrBJSYC+FF\nGSPEriq00zyveil6K3HcgFROoNoW7O3vjcVq8a/mDWFX6hjrjsQFAcHGA33I\nQKzGs/mTFrnxL41pAJtIcRuk+ubBc/KZ31V4Y/XB3noZm6nr3GCeppcCZ55V\nT01q2vqcbfflVsmH3KCCb8OdcZUEhIMyK+7qCDbxS0Bh4YIPl9UuUzGAW69c\n1gYTLlTsQ8qyXo7tLBo2ZuEP5n6GfdVybmUIugnR/lhJLmEgirP9fYbKR3b/\necyjY3beIHUfbzjBN+c+0YB0BOcdf/E0b32vL7zLKombRBR/pka4DhfuC24r\nfPALLguQwOJcdlS/7POgNygWgQDSs1aNOzhcpa34UKmbQxYZhvz7bRkionxM\nhUII0gsUWW9Dhz7w7lzZ3yUlUvRdP2EVYxyPOf+g5Tmpmg0MF23bbkXqxC4Q\nfPnHNfnFYulWPth4LWQUSZQCB5n7GRcf2z0+LGJ66yG3f+ZZyO4cRuxWuC3c\npq1C1pjYm07MCToJNzNjOOiC6fdYoj3bP2zuK9CEk+vDayEerYGCz4Qhk3uI\nfg005byKg+cdXNmayJZdcArpCP3DGVVr7/wAjeUi7nM0ik/1AYiaBIw0m9PH\nFm8c9C6neOuBXZUR/rjI+0ykxhBBeOeEQ7abaPpHt//eP+1JF0DWuURfPB4y\nMg9m\r\n=pehd\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFMLhGr422Puw3lvZkYF/3C5kB0fHCIHKIgC0EzABTnHAiEA4iEqiDVt0U6uQKwGf8OD0XEE4VfQ5NCYR/hhMeG3gso="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.5-canary-4939a666.0_1637884247164_0.3445858958483856"},"_hasShrinkwrap":false},"2.7.5-canary-1d1d33de.0":{"name":"graphql-language-service-server","version":"2.7.5-canary-1d1d33de.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^3.2.4-canary-1d1d33de.0","graphql-language-service-utils":"^2.6.3-canary-1d1d33de.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.7.5-canary-1d1d33de.0","_nodeVersion":"14.18.1","_npmVersion":"6.14.15","dist":{"integrity":"sha512-GLbUGv57y+FcWKmiiGkgQYY5WUGo1XsreBNUc9DO2FT+P/UpUAk+VEjOkIXG6h4QukljfeQ0o9L2FArXhxv3lw==","shasum":"6054d76042b023360da1e5b0ea6650397253bdb8","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.5-canary-1d1d33de.0.tgz","fileCount":94,"unpackedSize":450477,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhoCPeCRA9TVsSAnZWagAAq2IP+QBf76LCrdoe4SeLCh3+\nxwC6oqAsTVvQyNoB3PXctzWi3vAohnzMUzV8Ya1gMY+fWuYtY8r9+ZPNsQmm\nbeBfUCnkJ5Vm+gnqppWhC8kpj2aUmCvcvtEca5rdFEtL9Q1B+6U49uxjfLlY\neQI+WwYUh364zPYDbZP/cLWM+w9uOg1hgCX4OGR0k0v0rL8OGGu9JCcPH3zs\n5nrkzW43L60EHZ+Lfx6d3HS6zOfWjZ7AKyqAUUQQZ8bSKJqEqUbZ36RlzazB\ncun6LpNhkOxjPpuUuHlEpiaMZxp+cKJ0V5RjN7MlKKrK/6WPLro8eplhsBRc\nzN0/2BgYhg0ZUJeAwP5iwc8xd5Ibv0TnEGBLa2Tv+09yVqzAqDaNSot3klzh\nF7aqsYoHz4sgZe4cGvqPYEwZFp38Qbj5k2YWgUs1xcMNy1dY64M35OBMpsaU\nAG+9YbEcI1p5ZodTVhud7/xVRAktST/ZRl9OhaLyRX09r2vu0ZNAFB2/2jwV\na1huo9ChagAILHmLO3qCkcp0MSGV2FEbWaVRZfEpbhk7UksKtuMj/kUijHD4\nR7xUkddcKz5ic5/vPoOUedjALZtNGc+0ppVouD1qt/MF+kiO1aiQRNYGfBVd\n6PGl54heajzegO2bYhUmY0a8CQJaA6DdNPsAd5H28ylD4bvojtbcx1ArvqZb\ncWOx\r\n=sfqr\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCUCdL9hhOpZru69ABE9c2xsZiELoEe+poK9SZ/JTOv3AIgds+0Ok5MWvuCYaHpTOkekI/YCwVCO5HjkucNzIqYSnM="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.5-canary-1d1d33de.0_1637884894386_0.7909941024352485"},"_hasShrinkwrap":false},"2.7.5":{"name":"graphql-language-service-server","version":"2.7.5","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^3.2.4","graphql-language-service-utils":"^2.6.3","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"_id":"graphql-language-service-server@2.7.5","_nodeVersion":"14.18.1","_npmVersion":"6.14.15","dist":{"integrity":"sha512-fFmRxfe4iYGw3b60SXpY7q6MGEncHV6WoFr+yaFeEcLfkIHnc/frV1gztrzwpoCRKblGEmNbUHPx9lTw+tJseg==","shasum":"4cccd2cfaa5951cbc7fb731035e775314a264e8f","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.5.tgz","fileCount":94,"unpackedSize":450883,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhoCS4CRA9TVsSAnZWagAAL8QP+wTPY52TLoDvQdA0KBkR\neXCGFwzj6wa1dfsaKcGOldtEcwKSyFIAS0Y56xAZ0jW/FidtYXgPfxvHW/si\nNZJrKk0WQkoh7+MtyLnaR1I0JvZQulCggoZSJ998B7BCizGYAUx7mXzDS2Xe\niFej9ZZCQvsV7Ak5WP+OJqeMJlCZMVeBmBIGekew7QJROSqeZrIGYX0q3dMf\nERpBYK2QJ73qfHoJneBaw8PNggJ5wZmzV1nGPZq/UZCMnJGuxlEMC4/u89Qz\n3oWBkb0s6F4Gh1OaH7fLjaQGW6vRhh1rR1toI66+xU/j4t3P+JIxBUio5fzg\nxLrTTMoiZNa3OzOSKu+7SSg0f2hM+UwcAzF0u2P8F1MLD2ew67lnaHclQ+9i\nWX51ja0xvrV23uqX2+hqLgWGggcPbvCwhDqf4/DYVk/v3Kmuhp4/xHUDuFp3\nYf9TlesWQuI88tMmP80kJ78Gv2bckYX3YHOQ39GmMq5hrjLu3jlHNYQoDv42\nU/Ny1YiKkP2Hfw/5Myl4gqtu8pNE/v7AWJz0Q0SkFHjysEfy7GkOJG5hOCCC\nCqUfM2k658sOQL6e0zrjumIaDgWnzZURhPZz56VKsgtJPZ6tXrYsI/q/ieS8\n9yEMLM4rCUL7i6KTxxM5iswOOoWYzQX5kMYSn5eQASNpZn5gTibcQVr5BD9Z\n32aT\r\n=vNRo\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBYwjQP3aJq09jDmVa+70l6gPyb0sm0X37L+7lSjB5mBAiEAsSvkB1m7/D0LRC8OfmEmsrFs2kP6rxkK8ALQO2o0V1k="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.5_1637885111838_0.4202260904729882"},"_hasShrinkwrap":false},"2.7.6-canary-3125e31e.0":{"name":"graphql-language-service-server","version":"2.7.6-canary-3125e31e.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^3.2.4","graphql-language-service-utils":"^2.6.3","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.7.6-canary-3125e31e.0","_nodeVersion":"14.18.1","_npmVersion":"6.14.15","dist":{"integrity":"sha512-lqoCmU0pIVi+CPYBLjsZ8TbxpBCfTvcs+OngV0XZ+Ats9G3aDcH0xa1qEVVb2LCxZOLza8KzX3hehBv4T3qeBg==","shasum":"955c35b3280bf413645b34a703bdeab8167bd0eb","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.6-canary-3125e31e.0.tgz","fileCount":94,"unpackedSize":451509,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhoLuLCRA9TVsSAnZWagAAkWgP/1iTzk266QcqJOvrb6GM\nv/zeyXty0jeEIB/ozeGpVSplTQx6/UJBN5So7Z9+WGyiz6T4HpSTt7soiVW1\n10RhQT7QRcNL+ihyhDl1DVITdcpT57Ks1NClfoRhj++1GdnSPHcjWGa4VwNU\neAgaMonW7jgLWRiZ0ItEiMT8litNW8tAiHFQcWnQ3FUJ/+yEKClul1B4XXjF\nMsck/5vdunpi4uZvnKrm/rnxJePN85q589SfYQXxEn8V98y08p7docZt9nxE\njXvO3hXkswP+p6VmQtE5sewb/31gEEudCYcn4HFxIsGl28NTI3xqRgxiYSk1\nGzrYwcfgf0XBm6jEb/CTIr8+bmuFbituGe622xrv+13NGG1F8ukj8b/7MJ0s\n8etSGPX+etxIsUZPTgG4G4A5LRsFnAF6sTflz3FRdlGeQc4Mp0iFtau0qRDc\nVo7YVicFysx6t4Q/Hjjbd7MppherQoOjVgufBDXyYBaGQKpgeGQYg0Z2f3ik\nZFbAkqvU2YbMN1Yuuuae//NIcZUl9c3nF1Y4/XWuq4pmczKNo/fZmMaQHTbh\n1UXW+IiI8LMF4wsZCjtfdJzLs8LhIk9fjknnMkk58k+HjWYurKZkXo4ggO9T\nL1VUZ0WOhPxJhHCyZ63bKZRyvbv5oaLB1rgThQBglc0RDZLpRuaUyNvbCQSq\nBVMA\r\n=G96R\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDmJjUuiRFWAly9F9wmDGi5St2kDDPUtuOiRHfBvGYjWgIgUNfluuZ8ebn417+rp+vKl8mNzuKQ2fEtOmPgDGZ8lAc="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.6-canary-3125e31e.0_1637923723252_0.3333089224241568"},"_hasShrinkwrap":false},"2.7.6":{"name":"graphql-language-service-server","version":"2.7.6","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^3.2.4","graphql-language-service-utils":"^2.6.3","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"_id":"graphql-language-service-server@2.7.6","_nodeVersion":"14.18.1","_npmVersion":"6.14.15","dist":{"integrity":"sha512-NLbtyXRdXpUmt+aW+3C9SVfxXSBn35S06XIRr2qOIW3C/dgmFBTMEEzNqYDhGqFS2b8XJPijKz7adGsSuunSZw==","shasum":"2ee5c05bff46c1dfe6a3ce93b0be9e040d4d64e8","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.6.tgz","fileCount":94,"unpackedSize":451473,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhoL3TCRA9TVsSAnZWagAAE0MP/jQrMxmdZ5LiK4NPOG0I\nWqVSpRQxOUp1YrVHUzeBth54Rg4esBIPXMs/LtGyWgIhQ3dBNEZ0LnPbKifE\nzq46/iIuxW6EDRxhRb0KdcJEsG9SS6JG53u5JBQMaKAIeee/mMi8hgED/VHE\nzLDcq5WdErl7R+p8C6/NtD3r3vjWRV+X1zMdDktSF7T6HZW9mjRxeFgNQdKw\ndKETYRf87C+czky6SciOvX42AxKsXOU8gyXOQicGf8mLabvN5iJU0SHPD75L\nAs1FUAmIh3JdFJbEqJO8oBpu4umpSaZ9gzixVxjey6iY1f+iV+aUaVqs5Zbn\n1YQMPSiv6JTmH0BPc3Jl6JixeDCBTHHHWFearqHy9v4PjCSZJEKkGGlA6EIN\nEmx9G2RGC0XPAsS+m5kDGPz1IG/8wtjb+WaD1/pNsDWgRBfIicGRIfJ8CNpy\noyySCWNvgwvhzeQUYWd+Dcz77YLMuTdRVDSgFXdN1W5D0UFMBZeVDXViEi7v\njMvl3iqGEqbo1sIfMWjXLu9KqUFIOkQUSTADAuuivcbZ4U89tB7taE+R6soA\nWI04pcH6puus2+IliRQ15XQ1B5MU/AJlS71EKOF7lk0XCAmNiOxAjsKEDeie\nd5EYbj95m0FQDztV3u3zYWe3iNG30F+MB9GwCS//WpcjvgKz8wWIN3bPIW70\nMZ5C\r\n=YRkZ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHT6SlMeAd6QVjJWs1jnU8kvtghUNIOwF8a1uv18WI+xAiBmPoNMdItUxHMc0CYvkyllpPuzWeg6ScfHhBeNY5tSlQ=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.6_1637924307756_0.42222501721304173"},"_hasShrinkwrap":false},"2.7.7-canary-3dcdd158.0":{"name":"graphql-language-service-server","version":"2.7.7-canary-3dcdd158.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^3.2.5-canary-3dcdd158.0","graphql-language-service-utils":"^2.6.3","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.7.7-canary-3dcdd158.0","_nodeVersion":"14.18.1","_npmVersion":"6.14.15","dist":{"integrity":"sha512-Ia/E4+3DoRD/QFPtmzp+0clwBKNoHdDcP6stnEVf1o9OqDxQ/EpDfFwJFuAx/uaxktp+x0bUEq/Tm/Zm+X27cQ==","shasum":"d9ff888ab0889c5c4f8889948517a699ea14dd68","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.7-canary-3dcdd158.0.tgz","fileCount":94,"unpackedSize":452274,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhos4zCRA9TVsSAnZWagAABbcP/jaJolLlea3wqyyXXix5\n1QNycd88ydazM8S4KadgeTB1YtM+UCtaYzRlmALik5OfhF5HU0xXIZFxn8T+\n1mp+4OliE4mlu/E/AmzBt81qXAroJiiArJ94iE50OrRpNjQBjuBMsQ3PvKgJ\n2FJQTCygEmFPCNoX3OP/M7pq+chzC2V2VjTAtE1q3CJJ+hUK3FrEXV5WGQeh\n2eJyzOkxuBuGNvCEr9yMBpGJz4Wr/a7g/SSVt7CykB9E3zyKFq9450EAO3ci\nNsyGwr9Fh3WxNNBo7yu4manzJjt1hpJ+6E5yIzcNcf3dzzeDbB8B3fos/23f\nYObfHygvOw462mPmKep8GwcXO+MT2a/UKW7/nbS6PUWfeKMDiYjfj+SQjc4n\nDGyIB5XSXDUDJWfdPZRn/Xy4vzDoAhdBtzhUjdD1huS6k/BVpEAGfbWI8p0R\nPWUAOQhW7fDlOI70/jT3g+7Wxf+Rqj5PfG6vLoYG7EbCl2U7NkDN0k2tSnUq\nt48UVxUY9Z8xiuG/grqunkbsiiSNnXsXMhu94vaXpvw7wfA7sHUwvZivhjTL\nx9s+GYOq2uBZVUTHRT4SzJwtMq2IfN71eTwt7Eubaac/9KjtW6lT49xzYk/l\n9ft2MRqyTZ6q1enQ8UOv0OfH2FytfsGY0XBmsk3W6+awimz6hTm0Ay1XaGsk\n+n6c\r\n=cxyY\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCqVFsL0tHrKw8ZFMr7p7mHrAjXtcsfaVZyk0jeYBH+kAIhAMzrVGF3r1afwtba2TYvjyeAKVlnPTVc5pv1xDzpi0td"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.7-canary-3dcdd158.0_1638059570916_0.9696919333177054"},"_hasShrinkwrap":false},"2.7.7-canary-6f6c49b0.0":{"name":"graphql-language-service-server","version":"2.7.7-canary-6f6c49b0.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^3.2.5-canary-6f6c49b0.0","graphql-language-service-utils":"^2.6.3","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.7.7-canary-6f6c49b0.0","_nodeVersion":"14.18.1","_npmVersion":"6.14.15","dist":{"integrity":"sha512-w0Um/fwpoVUBK1t3Emz1w4wJudK1JatYl8GmPHjBmxb2ZzuIALWlk0PHTV/hFarXtpB8GlNRImq6j/WYwkQJ2A==","shasum":"a6b6d2598b2e6c3753819d081e980a626daabfbc","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.7-canary-6f6c49b0.0.tgz","fileCount":94,"unpackedSize":451637,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhpTSbCRA9TVsSAnZWagAAgZEQAJsT97V11pBryPIybkpc\n+nGK4fXi/uzdBEyP/fQ5PreaLoy3WJx/IoB4MtHNCnAt9O8ykh3aP5NIF2Nn\nbd5Wk4vOfVPjiBGXJbL+kBmlb/EXa5VDpZuSoo+6E//MII+tFyZ/+lna6QYe\nhGtWinQxiOmmTLYkcAcWNHlDZ4YUzLiDJLzhZ6HxjVrqgA09v23MxlTBo43N\nriDTDJ3boSms+g5vBBA6mNxqrXr7Dgla0JNskKn8VnUKOMjI7gTQlYE7bM6n\nWm1u+OZ6hwqNKWL4zc6j1AvDzDzY5bqICAnRj+DxMdJ01YKdmY6Z6bwBnpRe\nPQ1gvDy0ri4mqw0snh5Ir/Jo4w0AA/3WyHYnE+pDYTZ5T5VkyEzGuAW3syeJ\nueINWWGFoSmeqMG6Ro3trv6Y2Gv8zGeIP1j/Q0hx+rshb5G0CaiGyC0ngtZE\n02TIc9Kh/kUSfZZD4cAzupzImRCYmWyK/UMG+Df/ZIGbQ7dEfsvaFVrW8TFJ\ne8NJV2hT6et0hyFz3PATDWpJi6oryKe/Kg0NHoLRqJxOh6+jhpIYeE5iK0Nv\nc51AORTpnlYhmYBdYIYoyiKvhnhfMDiM8PXozjnLZgv6q2nP7ZHYxxmV5Zu5\njAjmJWcBgb2uEZ294maRB0egrzlAUuGlXAzM9g6DDltbucSfdbQu9S9KX5EN\nf6r+\r\n=28Um\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC4EipyOaBzNkPIGWk4Z0O2Z5Hph+uhdaW370fdW7FmswIhAJ0rJv8+nQGKxziilTHfuf4Kav6bLPnfDip1gIOp+mu0"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.7-canary-6f6c49b0.0_1638216859455_0.6865379639731823"},"_hasShrinkwrap":false},"2.7.7-canary-58e99aa6.0":{"name":"graphql-language-service-server","version":"2.7.7-canary-58e99aa6.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^3.2.5-canary-58e99aa6.0","graphql-language-service-utils":"^2.6.3","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.7.7-canary-58e99aa6.0","_nodeVersion":"14.18.1","_npmVersion":"6.14.15","dist":{"integrity":"sha512-VfqxVqi9CmdvKKRUNWoPDRdMDIhGvr4zFj9PX25W1DQexBAz8kE107CiEitN9UcWcoZwJG9JRenpL4otx0zx/w==","shasum":"f116b5691bbac4958fb1d9e5b96d79bc297c6be5","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.7-canary-58e99aa6.0.tgz","fileCount":94,"unpackedSize":451637,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhpTUtCRA9TVsSAnZWagAAAKoP/iuCrPuvGViZ36ibQfFT\nusYAxosiiMFiUOKu93cBclStvPCCXbaegTvnQH2VbputoezT9nwa4KYXdYKj\nvlrdyXHGzcUO8NjI9wcdO7XCy0cn56ex+z3axz+ILmRFzff2S84lL14I5/p4\nTJg0A5A9O14kO20z8DpS0exonS9ANRjpqy6oN8wzvwbSKwgNofr5Sw4fe6sZ\nkIY9QS5ffb5iNzo+pFW9E3Ly2kyeIpI420+M6OjwaC4RvJhEPKwftighynAE\n/NasrjmiMK2PXflyCIe0Y/H529jsj3nH+p1t92QJFmYhehuYCBX/Hj8hRNBS\nV/bQWxwYdkAgDKPCrNcsMcYCvUXctoYLxHk6vzUhC6Rzczh/d5C8MUHk5CED\nYXzAZiAz+MnFU+V/AqvLqRNHcrMO2QCOIOXLGvdJIHRS+ADN+KG3Pz7FUZ1S\n6/FxKNS7jTFUH6NGvIPf42VNv0MABjyYy8yvdPkjzjLfkkTnUgeAkPIzHMKB\nUDPQl4FC0t0RMdq5SDu/pAvS+6bymEo/w5Qg98i6CK0CWIf2RhvZyrWlVNzc\nfEqANRzcvHhv1xvKyZ/0tP9yng7EL+5DzcXjtgBct1cyTqb2/IKE0aokNvNx\nNkycaexbV3OcupoqF+Vc57LE4t47QPzz7qk1AOYrPW0kAhplv8VFNAbxrzLs\nxY2c\r\n=ktck\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCheBB1uwf3MS+qza9EyUsjCrLSSSZ6sRJIXqc+q3CdfwIgbE4gc6MCvx1iqRStHKN9Y0Wrqt4kv3rOnnJhojxASfI="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.7-canary-58e99aa6.0_1638217005126_0.9711286002666291"},"_hasShrinkwrap":false},"2.7.7-canary-412904c6.0":{"name":"graphql-language-service-server","version":"2.7.7-canary-412904c6.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^3.2.5-canary-412904c6.0","graphql-language-service-utils":"^2.6.3","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.7.7-canary-412904c6.0","_nodeVersion":"14.18.1","_npmVersion":"6.14.15","dist":{"integrity":"sha512-h0/4wthawHKIPvoffbKfpOtFuGzRtT4OcwMOD/6M+nKyxJKn/uci+T37GEnJVJ1jBwxwSfYKjZZhK7IQxljOQw==","shasum":"925ebf828539f1ccf0c0ff9d210111bbb40a3e78","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.7-canary-412904c6.0.tgz","fileCount":94,"unpackedSize":451637,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhphReCRA9TVsSAnZWagAATSQP/jXo1QblvdnA0bddoKO0\nTod/uRPiLol9hDmayEpi/2sIV3wfOAz9CuZWIC4uPqF+Kdcbo676Dr37iq0Y\n/TGqeEqNrf37+zX09W7xLZUfbdlisC4z/2XYuuOr+pCuNBT5WHa1TJ2Hg4P6\n6nb15IarkyURUylkyAMOTYk2OUbalx6R/u5F2eVSpks44QIZ7IYzGhRiXo9G\nA8aPRnkkEv5O+aWLWIBKiMtsvWF28MThYZ0/EYTWCAgSdSeS96/98UHZCBP2\nA2ktcPtfIMXN43YoG7C859f/g08RGDjb3AjQh6fRXaw2KAl8m0vcTRpa4IPe\nDaLD1bjm3GyqOO4hMFV/fwaM04oduQQPSj0EehFHJQvhhamKubDJqHZqpkXH\norrsrnx9/VC0ZUZXIugmznZmzoFuXgHtOO1JgM93GUkNUlFG0QyY+V7yzjSW\nxN0lUB96++IxusokCZUOyMUgLRKumeyp9aSod3pMGWd8N1CzUsheX4UkrRPW\n540IfYe4IHirSTx4MQr/aws2B0kpGyX3eJqd9WEwsVf4yHTAZa61mFxqph+R\nvNYRnSOrhIjOjs321l5zDOxac1IF/UkzikPP+OG3RymvewuPPAWNWHuL5RBZ\nC14RK/ejkOlI4kZD8if1aWR5ph1xJZ3xE+mwp0m/+wJWWbNegodHK1FWdVTc\nqr03\r\n=NnvQ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHgagWofzmOPY8yIdOHLZq9hp/iZJSWPfwFM1KeO0JDRAiEAwg1m3ngoiBQQgIXB0zVr6ir0QtT6MyyXbeeH68lj9/E="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.7-canary-412904c6.0_1638274142573_0.846334222616377"},"_hasShrinkwrap":false},"2.7.7-canary-fea49557.0":{"name":"graphql-language-service-server","version":"2.7.7-canary-fea49557.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^3.2.5-canary-fea49557.0","graphql-language-service-utils":"^2.6.3","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.7.7-canary-fea49557.0","_nodeVersion":"14.18.1","_npmVersion":"6.14.15","dist":{"integrity":"sha512-8kQx1BY7OlyXi31vCA/0PhrbG926fw/vUDDM8Ze5BKZKQFbanAfKjtSOKxNhIsA4yXu9bYVptiQqtgBsJjEsMg==","shasum":"19888197320ad50f56c6003659ccca434e197d6c","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.7-canary-fea49557.0.tgz","fileCount":94,"unpackedSize":451637,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhph7WCRA9TVsSAnZWagAALGYP/0FvuBg0tStLzzftfe1S\nmcyPamfdMcGXdJx38OI3w+cC9LchnpeDOuUpAz7lNUEPUShEQL3eEiEPjC+h\ny86u5K/VwwPk5SB6LXbYB8G0JatzGVgmtYCH6EWSpSOhtGM5ecn6qHiSPpG/\n7iIZfWGcPEvS4I07polk1vr7odeRy75UZEtmjPffvkZANXcVe0uJwhLm/8IV\nsvvDGDBgOreBDFronJvrqjOD6lWpvk8VrBt3BaELPfhxDGEmwO2yeHxApOlM\n5SuS1u5mFPQ8aWY+y1fVe4laSms5z+2mu8ye72kjWSiHeyFNL827RtRrMKXr\nsskP0L5qRRL5EzWI8tA+HEtBo+I7/pZP4pbsVWFUBMH/HucUrj9eptIg/mE5\nEw3RlT2K1Jm+XRxEjNfpnYuLN2gC0Puw5nTz0E2juWD7204HKO1iUSl1zn4y\nm74s98QimqgQcLoXGApmu9l1i8gbWhiohJRvslKrGFf7qO7TDKqhf6+QoA4/\nwj8a9Gq4aLYAZwpK94kUGyDmEb1jk2KJBLlhUAkplWRXKb9Xw9lwnGNdlZFC\nUVidi9zY4S9sERo7j93i+4k7FDh2ReghKCzvsCw/TZbPtDzsdlthn1weZIt1\nlPp8ErtS2FHWjdoQ9MXFTUtlQzPiCfRjBE8GIxtXYA9P+WqlEx7aTeUHkol8\nNH1t\r\n=l7dZ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCID8M907ZU/j2dlKmoy1NQREuMw3zBJzjAQ9U9a05U9bZAiEA4MHlAsYJ70iXrgjnc25udbIBNnVVjLRm1yoaKJiazvA="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.7-canary-fea49557.0_1638276822502_0.739326198940438"},"_hasShrinkwrap":false},"2.7.7-canary-325c04b9.0":{"name":"graphql-language-service-server","version":"2.7.7-canary-325c04b9.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^3.2.5-canary-325c04b9.0","graphql-language-service-utils":"^2.6.3","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.7.7-canary-325c04b9.0","_nodeVersion":"14.18.1","_npmVersion":"6.14.15","dist":{"integrity":"sha512-CKVo4JMpIEAzJqzlgjUGcJeTv4g4rLQ+NY4LexvF279vhB3eue1+HQmIQh+onkgZFYsxoJsTDLGlY/alQ4jnlw==","shasum":"fb2b9b07ce09f18e778eafc518425c8f91ba9342","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.7-canary-325c04b9.0.tgz","fileCount":94,"unpackedSize":451637,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhph+BCRA9TVsSAnZWagAALSUP/1BMlEXdp7DCkxbRU0yO\nvaGGI+GIVr/m6UUMSVYQNgO2rYZu51Evghm+1RUynJRY4i9KmBdFR1+6iGMy\nI24dr8qkT7Nnm58SIgnd+tqo0Z8HWy7fDjdNY7Nu4tk0MsoeOPp6v485xFse\nFx4RODRDUCFc2U6F2S8wmGXE1IfFrvKlQxURCLNJ364QNKKAZoYXhlvmSptB\nH5X7GC4EePfgNIFDIuD0gekf7UwwoTIivtm47G3OljUs6oVzwXP8pHlckW/E\n1hfrIvNNSiOOmBjF0zc+Z3wvm8FcOjMSy6g+uWNnnXuyAT6oOXcCf1fxfeDg\nPk33IZtBhy/CElwDZU9yTBVFGq/4d3f7SsKs2LQbdMKdu9OMj+InxpU4Am6s\nMhlSc5Q4GN9mhVWhqN+klWnLpeVAG+weXWaCHb0A1KeX11cTExni/4fZ2qVZ\nS01eMd6/NhDu4QIj79TKkr/3+8BajDxazli8ohAyrvI2leZmvS/qDwVpzMb1\n70vHjy3mrIhFGG0YHdBSI0ZfgQoNpzaMqalHoxLxJx/vComL1y7AAvG46Yrk\n6EY0m6if2hy6OtDSTs0pHma1+pORHxBJlpcIGBoYEANq+JqkSkI9JH4iMEaV\nBsYBAemzj3zedQjLvwfn4ZOpZWYQtCS2Koe4u2tMiEMxKksdLDTnhVVFEopu\n9hNe\r\n=9yNP\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDTpzeBAdkojzjxzPkHn1NHja6/Ah/d8UwqQgT3xjh8/wIhANGR0BmTZDp1V+ERFKClkiGm+z5fPY6fuc0Xm1cv5hKe"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.7-canary-325c04b9.0_1638276993632_0.8657685289037145"},"_hasShrinkwrap":false},"2.7.7-canary-8ce9e283.0":{"name":"graphql-language-service-server","version":"2.7.7-canary-8ce9e283.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^3.2.5-canary-8ce9e283.0","graphql-language-service-utils":"^2.6.3","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.7.7-canary-8ce9e283.0","_nodeVersion":"14.18.1","_npmVersion":"6.14.15","dist":{"integrity":"sha512-3TQR2VDXU3qSTMLlsBQNjhKw2qQbxCSF8xDR8ByZzgM5e+m78oe1JwfnH9CVtT6rugTnAzUszmVeOMPMDX5w2A==","shasum":"fc8bc3acacb2c14fc2ab50721cba8e0dd84d1bd3","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.7-canary-8ce9e283.0.tgz","fileCount":94,"unpackedSize":451850,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhpiBSCRA9TVsSAnZWagAAKhUQAJ1e5/SHqUVKzTLnhuYh\nALVAEoadNN/yt3SLkfLNJ4KJjDQWUbg3KbzhSd1lP042CMFbpdbcX47y6zzr\nDgRZ1Dn4VTQCt+tdsPaT4SYz4TUaCiILituQv7B/yJBOX3h+GGvMsTpxPhQK\n9fwmC1dtMc+T5se5z3s4XG4aKpRO79aFYXMnqm4uKC+WhYR6QlcHLUivDIo+\npJ0bJ2iOtZfjnuJo8pWs0D+406bzD3LoTO2oO5b0LrTlvq6nCbX9NIvaDqna\nHQ9Gfhyh15pwP3AHEHVdzuiN21Gp90xVYfgCbKPj9u5AvK8kkpNeUF/kHFcq\nUAvIRxlLTKPwgQMK/DLso+uA5KtlUEG1Zg7zCLT7e+l0VhMHztsAtSzcmMvJ\no57QNTqahnjC8jzfaZYTyNlDw+uKd+7fLdFaSYQtBA6Vf2h7CQi3UuCipB7Z\noP8RuI6fNIbPsN7XAbKY4udMheDYmgZ9F9Xc7EkAsu4SLzjGZzR9j/aa9x9H\nIrkQ72BQyr+aUISIhPR1S6h+haupm9eo0H4vrU3X+YyYf8fhl8XepJVHji3D\nxB9yogHwYaiTG+V3metvBs2UR26fYfI1lrMxPFEoKdyFivSXhgNvveg+h/fk\nxR2HJ5ylFPwuUmlGk9sWAjFFUFPYijmrNUzNNreU8N90ciYWhRNzFW9gZR51\n1s7X\r\n=nJBO\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICJQoEvlB+n76G5/epVB623XgBPsp7G6+jhnCvIoY0rHAiATWZLYaqfg5XrhtsIGuRiv6iSISla+MithbVQBoB5R0w=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.7-canary-8ce9e283.0_1638277201765_0.920319774915805"},"_hasShrinkwrap":false},"2.7.7-canary-48f9cb01.0":{"name":"graphql-language-service-server","version":"2.7.7-canary-48f9cb01.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^3.2.5-canary-48f9cb01.0","graphql-language-service-utils":"^2.6.3","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.7.7-canary-48f9cb01.0","_nodeVersion":"14.18.1","_npmVersion":"6.14.15","dist":{"integrity":"sha512-tpUORcBjhEYcHuBSR2QpbWyTXq/wWfsocSTYFnjzycgzbxV0uG+R3CsMrr8EMXQd7CRXCRw6QXtQholW0a40+g==","shasum":"c045b39162166418ebe553ce214f84b3b7570206","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.7-canary-48f9cb01.0.tgz","fileCount":94,"unpackedSize":451850,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhpiE1CRA9TVsSAnZWagAAZ1AP/1LIujwj+4MkHIZa6wMG\n9cU6uL6OSEz6M67MQEquU98UCdG+0xM/kxArQAXLUQRTS43GKMi41OVAgKgq\n8JiBykNTZpHg52iZn2XAJ7fqWwPN95rVgRl6ShFGiPnlbF/1DLf9RVfImcLT\nihPkUiOOLoo3LzCvLUAIF1sqr9Ozm2fc0xxwdntjmERUDN1RRdae8rwuVmRw\ni5M4D9yX3ycdCc0hdDIBYlCX+EhwVIkDBij6oje7eNxE8RnaMS2DhERGHeqM\nGoENzIBscvJez9hK65EtGbL9IYC2bc8UEnbNPfSHENqpt7hIkdL5jvcT/zcj\nJ7+H19tt2UgoyfdZDQVqQdHL3fr7iRiNIuTg+X0tkccNUBtKlckITIDJC9gJ\nBWUEcViqFafqAPaFGZzOK59t1IDJ+Jy2Uo0Mwr54cIkNk59Mlto5U/fZmpRg\nrlw9vCG680+3mu9zHy0kq1hOhx2fmuHVA/y9IpSqdeleVRFbTVrA7+eEE/OL\nOUhxfsHZ+L7HCN+G2l1gjnfgFfeePsCxQm2fXi7RIwUlE/vL27D/wcD8s2VS\nB+IdCIXASRQbGhXEDpzvpNg3tLE/Vip4iFE3WxTvGIUHIF9Z4uPVUwy/JzLq\nxQsnyVfxKCWlQWpmWFE1tm8+h165Zj7qPKNbk3fLMKh9Hc4KOwNFCCQEk2t1\nWHeL\r\n=e0/w\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIC+iNG1Xh3AFJkA818Q7rSmrRmlALrh9Q/nhN21XrMCjAiAQbetIFx+D2NF3SBNqzLiE49f1LPQUDijGnCX5AQyW9A=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.7-canary-48f9cb01.0_1638277429145_0.3718825362801923"},"_hasShrinkwrap":false},"2.7.7-canary-6db6f986.0":{"name":"graphql-language-service-server","version":"2.7.7-canary-6db6f986.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^3.2.4","graphql-language-service-utils":"^2.6.3","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.7.7-canary-6db6f986.0","_nodeVersion":"14.18.1","_npmVersion":"6.14.15","dist":{"integrity":"sha512-g1FFrib2QiunzaMhihxgiYhm6jZHUXG9wvPPxXmco1K05ua631oWlK8rqQSA2+cusTfxNJcAh+44BiTuu12t+Q==","shasum":"0f27d0fed9f5b5ccdda7c9699455ede975dfa55b","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.7-canary-6db6f986.0.tgz","fileCount":94,"unpackedSize":453024,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhpm18CRA9TVsSAnZWagAAMDsQAI/egw9XgOh5HzRZAgS+\nKRAj0gYWfHsDDZQ1y4qYSkt2awrH8A5tCUZRXVo6j70Uv2IUTOUXQJI8KeGQ\n3Z75hQb/WHFj5qFVZsTNeWs1MWuDqm/Tr/kc8YhEBMB1ST/fO4FPjqHp1/qf\nCU31hUbfigH1PgUlHGUZ11ucKoJ21EebKI18MijF3QF34oKjIEYwlnsPMfk7\n2PcWJEtnTOYwjNPxVeIrxu96Wmw5CLd+IhKZEH4QySzy73Xj/0t+bEZIMUMg\nOgO85O1Q0WPuQ/hrE2gBnmeDcK3GfT8g9dPP0m7YWlnUvMA1k9u0sR7yMC6r\nQYGtnLBrMIx2Uxselsj2EDxJlEfrXttkDP6wu++X5xN1vNv2EWKhhUlcypGl\noOMcFYmb5jTVyJnmZX1903Lp9v3XbL14jM4N6cQY70IkEZmmfr+DCyU/SeIs\nv+mUMgcJCovbPs/v40ZldAtOCZQplk4bwfplnBmxOOelFasB1cMOK0Kb9gcY\nxG1k0fvGPpuhEdngLGt1Qo4hy/t/Th4zrVxPcmISRwI4FqSdh36Xc4aSwAeB\nCsozBvYwHbB7Db9kLA03QFJzwoEgNDPflC6RaRZYXbxc07VXApC3CkyRBPEd\nQeSTTb6yclK+57cqZhGD299D+HZFzHw083PdEfXznQjqRWkjC6WzIasuBHZh\nybFa\r\n=vt6Y\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAnTFE4fvYROpY0RzLpSmOCWySRQFCWBnlWnHKSfw322AiEAirywvJT8bRQ9p64sVmFdj8UCC2e4JlzJBNpWw9ybpBU="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.7-canary-6db6f986.0_1638296956251_0.229946812368498"},"_hasShrinkwrap":false},"2.7.7-canary-e824ae9d.0":{"name":"graphql-language-service-server","version":"2.7.7-canary-e824ae9d.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^3.2.4","graphql-language-service-utils":"^2.6.3","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.7.7-canary-e824ae9d.0","_nodeVersion":"14.18.1","_npmVersion":"6.14.15","dist":{"integrity":"sha512-n+KrQ4Q/TyUF+nEAKGGdEgvJ2VEgqmhH9nSCc/8zatnu7IV4WrVoNY8IGVJq/n6eVQLud66PkhuK3rPQ3wEpeg==","shasum":"59ea6e93666d5e3aa35111c0471ee6444d2525fe","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.7-canary-e824ae9d.0.tgz","fileCount":94,"unpackedSize":453037,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhpnLgCRA9TVsSAnZWagAA7ssQAJeuXI5Wkw4VMojHZ8jj\nbnu9AMmjfYIa42RsO8rjN3PKjv4dSAKXxWS23GsGfMRJL2/kAqn0s3p+1hpx\n3hvmbV+w2i5qRzjnyBuQydIZlkWdZuhsqwir+qS/u4PJRrtcY/1Nr0VJ5yDQ\n3S+Xrq7dDG/ALusxkG3O5ZLgwZ/e66SiSZpHkXuksUpAsgT/xIQl8Uo3C+oL\n8Bs3nZLCVHV2M8yrPQnMPKDFxGXg/TOoJvUJXkoxAZE/GB1zekTuIVeLFzYH\nPR31HXS8M5RAsp6Xn1M8vwDK176XHlKYdN/OFx/cC4hXzgPce+0e4DSQ9n9q\naDbOJFEWnNPCK91Fa94oA/oifUawHaZ+u1Llcsr1Y1L9R1qTAnLyMgDxHoTC\nOJYfFIX+L+4WPO6C8fZiJMYN/5JYChUSwK2A6CvCl6Lp/N67GSGlKo4vbTte\nCmCG+Kb00p8d3yGuwQSZRMSX+CxW59bNzl2fDpCQ/V6/0HqVPdFtiq9bVokB\nT4a4T3zQsbqG/mxTNIC3NxcEloUbrq/j3ey5gXb0WWCdP6WUa+VOsCxCnCD1\nT9dAY2kvrT/kgtXUb4/5ZmeP346fWEaZ3AN49/DHu0jXK6MIhKXHFC32/YpX\nZOitHCNrmCsS+y1j9RF0NvgzyPIER4Lbrf9ylMpmiXS50CBWZQZW4Y04kFRb\nmByp\r\n=9HwS\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCRlYoisNYJkVruTlIhuFOXiB80HPpY8ncdiuBFAlj/UAIhAP7ejDaMJKRccYHYCOmySSuCs4oqVECGH4Wbaug0TwNM"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.7-canary-e824ae9d.0_1638298335873_0.45569534497240816"},"_hasShrinkwrap":false},"2.7.7":{"name":"graphql-language-service-server","version":"2.7.7","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^3.2.5","graphql-language-service-utils":"^2.6.3","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"gitHead":"fe5bb0dca326ee307bb6a618536819c0b505f7c9","_id":"graphql-language-service-server@2.7.7","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-5qRz+/R6COoK5Mxig4eprweHrZTGAkmi4L62NSEL6DqfHy6xWdKjm81brY8vqn1S3G8oh0aXROylve2UG8yFrg==","shasum":"3fa8c77552c94b953a6cc76d8c99cfc26b22f63d","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.7.tgz","fileCount":93,"unpackedSize":432192,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhp1IICRA9TVsSAnZWagAAjM0P/RTy4amiAJVCNprvnVBz\niHgpAJyMJSsao71pCiWx/k+PpFjT8i8VROMphcg32wWst30OpFQg4XudvhlM\nIFkL7w4aLeGR8tcaOOekIlX9LbRF4YqUdOzbGQoddCNlRtZDxDtBHrRHkzbr\npAga9BwBd8Fe1svVmYay0Nhsec0JZeCFOwy6uDpRY8JC+mV2V4j6x25eO0RX\n+ClFIUzywmsYEM9OcGQzdmqD12bKXEfuaFMNkqL6HND0wmh5r6Ly9bqQTP9I\nw7L69P41u4F9MN57nAfMORXX/jdtBGTOXtfLYATtWHndx4lCh8qOyXPb9SLX\nI9vEekXMJkdDlHfvEukn3L9kWrJlAIYNfANl1auS9eJo3l+M+sSO4MGp08Ke\nukFfVsX7cNV/e96H2huUfG4QiLRnb95yMdg1jVJBMmdrKSuJcaJc8KXwhSqZ\nQJG0XvX6g8FQmbLFBryDG34OFlZGtxDCwUARpEJ+aA1xS6VarkEYNLKqYz0W\npjRffOp2KmHZ8dIb8wn8zKIGtOyasfmt03PI3/FCnxEaVquGsjEvxIZcYSL8\nbTJndPYmmfXK6oZIVEMWIx8gUyfSidZcejYtsgWIDcOEJSbv+UluRmJQiDq7\n9G04wJeEVXuSomRWYik1jZpqzfFtPsBJKM2+bTdO65QDc85sP4/DS7fGSWxF\nXEpD\r\n=RRhW\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEtjmyv553L8JgnCnPz0uKCN3WVjAGzYJ0eTS3wrybSfAiEA92CoLYV1cDJkTPJOjgmK7xEbeEyDDsq0r7LOV7+q40g="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.7_1638355464222_0.8788676766900587"},"_hasShrinkwrap":false},"2.7.8-canary-eb5c4300.0":{"name":"graphql-language-service-server","version":"2.7.8-canary-eb5c4300.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^3.2.6-canary-eb5c4300.0","graphql-language-service-utils":"^2.6.3","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"eb5c4300d81a0b854996955d6de8ebf7c4fce08e","_id":"graphql-language-service-server@2.7.8-canary-eb5c4300.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-u3sHOO17+/JcVHCAhek9Gi1h7z0Wzhu2DCN2QnQ1/7j3WbMbZ8lNtPlIjImsu8VatVsjWX5Wdbb/r91rK5z8PA==","shasum":"eb3e99bd98869bb54640ef05db5c6eed93dbdfae","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.8-canary-eb5c4300.0.tgz","fileCount":93,"unpackedSize":432228,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhqpnjCRA9TVsSAnZWagAA9YMP/2jl0YRswkO5QrJhwFN4\nczdhL16pgOgt6j3EDAE2YtNw33xewgj8fFKYhoFUZkXjfsbVGAPTg93TkXzv\ni26/7SDAIqb5WId3Pc2RlVJEZc+o7G32xZbjvyRQxkQLuo6kd9tNrZ/IOZkf\ndo6JDF8Sr1agz2iiSjX9ZNUljAjpbD9Vw0qYS4zfQkQg/oMdPurLAu4NtkRk\nwBist7kHg4LRyG4X9SUjrPqzElpeZSOUdFhIp6pSJXkha/X5UVrVyMFu5p8m\nOHvnYgqMsbVRGJXnQ/3UPOVsaA8SL3WuNnB37Pn8owc6OexbqicTrzRrxzMY\nMHI53zel64BO3+KpRsJ2saEJZwTW26IDJB0FlS1pu8K6hOGK9pYw88pwKBvf\n2L18+PGX/G+3gvfIejprIC6Rr4ra5EylrWO+/PATcfNnqMdCP0HtixMW8jI2\nGBvwHCiHF4aobDnHRnamgco90ewPjWDIf4UqN9veR1xZ5JB3Zn0jzJMZCRMe\nSyfQUCmOGR+wRFtWBx3W488dw1E1/ql8Ew7gr73HDuSU5TtmQYbu1Fg6O04c\nJTEfS8O/Fx9sodYjdAn//IWOuJ6tNGzZsLs7y5aTLb2JgJk5w22O2xDXfqRa\nHdSOahN2zzrQ1Xrupyr/VnAAO+WT2YTrYPNyBojnxwwlT9FQtbEm/9FKa/0l\npd2a\r\n=Khgp\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHB3s3VgzutWvaNqLEECSNWq5znO3cUw/ANuz68bZXnRAiAXyUw8ez1lmFdgVWGpiToSoXRe4zfMo6eoNcbgw1L5gw=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.8-canary-eb5c4300.0_1638570466875_0.5520548516381147"},"_hasShrinkwrap":false},"2.7.8-canary-fae7d199.0":{"name":"graphql-language-service-server","version":"2.7.8-canary-fae7d199.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^3.2.6-canary-fae7d199.0","graphql-language-service-utils":"^2.7.0-canary-fae7d199.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"fae7d19961e37d325e2bc75886a51d1c03a9cb81","_id":"graphql-language-service-server@2.7.8-canary-fae7d199.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-WWpa+GUyTVv08Q0MJhOmwUMw9zJBL51EW3MMilHUAnqvl5gKpqesmVd+fDU0hxhMzHI5PS3PBjQxcdGVK9FVXw==","shasum":"7b4eacfb0d0789b693e1456998c6425505a40869","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.8-canary-fae7d199.0.tgz","fileCount":93,"unpackedSize":434291,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhq5HqCRA9TVsSAnZWagAAUe0QAJNMbK2PyzdhpwkAumzr\n8Cd6PPgZBd2RNqdjSH8zhE/2+nXM0JlfdcD2sTLyfr63TB+e187bWYMhoSSU\nkoMAKCxEgwSdf8OBvF5u9eJnu0pVqlHRbrG9Wm96YBOSyvS1UCzuz6rEKsle\n1AKO38zKK4zykcywEXvJdU1OEKBxD1zAI95QPSrZ8frQFawcbJZCOoDWQGnq\ne/SQ3U5hYs0c/yVJVFjQouHesMvc4m2JjEKen7GGSgTzw9XoVETUv4uiwM6d\nA1MkeuA1saVlyg6EJf4jl9PywREpYmBdslXfb7xzRG1WCLnqZFKjDktG62X5\nXrd9qfVoYzo7EbaMzw/5smX9yqYTf3iiUEe5YlO2cgeviCW2w7JYdZ6ARkMm\nl0j905kcPij7dhf1wWnOqF6SnSOTb356keG/n32JJxjBlftVnDsGO6pwZIem\nf51mhyHgdCsj3nT9HqL+NojQ36d+rTNNzJpFhy/XCa5tjscpP9RfYllaOK5z\n1/MkYqDnSU+ZiZKKHmZf4Sl6JMm8ykFdYgPRAUyoFRmylnm2dPLubC6uY4dI\nGh9VM3x78i0OzTUvAWqdf5jHTg+2qNajo1znnhoWC7wxWFKBeBaeRwCv2xjM\nPMLT488ds4/vf4ZCl/fXhwh3puBz+GFuGWYl+avardDHtXyfraK6SZQ88CxK\nrfdP\r\n=lT/a\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIA+2AbaJpcXWeqt9k5UQPbuyqNk+ogsKDrIaI+8mw046AiEAsOX9MAQpeT/wG2t+eU8T1Zm/08gVCyk2kS5Tmmuvw+g="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.8-canary-fae7d199.0_1638633962743_0.51590457152012"},"_hasShrinkwrap":false},"2.7.8-canary-b5aba87e.0":{"name":"graphql-language-service-server","version":"2.7.8-canary-b5aba87e.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^3.2.6-canary-b5aba87e.0","graphql-language-service-utils":"^2.7.0-canary-b5aba87e.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"b5aba87e135e2cf6bf310e5e5ab997be6d5ad0f0","_id":"graphql-language-service-server@2.7.8-canary-b5aba87e.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-NYXBWNmDWTrFZ8x1SekKlv8dI0QykB8vndiKdR8LbGDDQ/YO4mpyzFJFL8k5zO5+qjzNB5z5smSazIJaWiAWDw==","shasum":"b675ab0f8a5bcddc9212fd428f12d9f256898edd","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.8-canary-b5aba87e.0.tgz","fileCount":93,"unpackedSize":434291,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhq5KQCRA9TVsSAnZWagAA/uoQAJKV5u+OUskkOzVwv4UR\n1+67hjh5MmZlvugaa7mn65q2KD3FK83/zUD92CRmWill3X3aDSngFRXG4Br3\nnF2I481Xh7vm5OnP2wIoen+OQk/Wcs19TVAkhsApW8F6Mw0YlAXOe1gnW8yF\nGC3W8IvK22RcMFhkQdtUCz76p6ZtenjpQGdI+IwpB/0YQ3TRAUJc7+KvrzdT\nRfIIXwkJ9Ar2Vc/GIYu/CUPJrnIQi9w8C27LgXiw3getipznhSVaXd6duxS0\nTcr8mbX8LrbDSWqJ/p0PT8y0F8Pz8BOxVdwmnPIxqqwnU1oh4i4RbvO5Apd+\nzaJ7Tnu8art+p8WR8dV1Nhre2jLpSmkA4NuSNeMJxxfbWTcFtmrHDBZ/tDfx\nT5ziyOhoXPo0H8XdDXWauPz/4GIUb2c0/1YjLpNOIMZnfegA8wgvWvSs3D19\nb7ogjm3bedCG3RUHxueiSj5vssNzieR0xTNYd699XiDwEu4wdbvfhScQ7f79\nGPNFMKoImWZ9ghq2JqxOJV1Rb2QzwZLqKlfIbsFdtnVQKVygo6QQWtd+HAYT\nv2MFYecwN17XeZ/2MB0eR4r3Uz/zuTM8nd0/i6RxDHfhjfF63zXK4n1FoZjY\nsS/PFgqrSj08HYH7Y7vixBwRSABalORJySQcvII6mmJt978EKN17me2Td4si\nLkJE\r\n=KL44\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDbH5iIK2lyaBBDHChicjTiGWrPrYlMkfbPjNGzFfcF6gIhAJ7iHt7xEUVF+aOFiBzHw6f9tMf+oNT+AifaH3ELoSPK"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.8-canary-b5aba87e.0_1638634128150_0.32939586710983426"},"_hasShrinkwrap":false},"2.7.8-canary-1a140c54.0":{"name":"graphql-language-service-server","version":"2.7.8-canary-1a140c54.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^3.2.6-canary-1a140c54.0","graphql-language-service-utils":"^2.7.0-canary-1a140c54.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"1a140c5429e7f855edfbc8448908e3407d489861","_id":"graphql-language-service-server@2.7.8-canary-1a140c54.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-cXPAkBxpIi3/1Lsw37CR6Jgy1OgFTRAf7kYzGBEiFSyp2V9X60+3kA6B/MEGpD6ZdDZO7dqjGhA/mbIztwX8qQ==","shasum":"d017bdcc27caf8c0bde724774fdd397f4811841c","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.8-canary-1a140c54.0.tgz","fileCount":93,"unpackedSize":432246,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhrOP5CRA9TVsSAnZWagAAqLUQAJuMuGuKnYk0ZAl0fuCQ\n11JdsYBfyEsu705ucjMRijz+DM8YOPy4II+qSgC6lH5qRx/VCkEqKTA50be+\nyVFTjmEauFXEXagrNVIU1qaN2/5PgrfmklDivLLvwRmhVOU8drkL3ZwYlPqc\n/Y4AyMVZnhSgqEQBx9bG9sEG8v1/LzTkjmQZW6e4gOlGMGhPaxaIgE60oyRO\nRCAapcK/4MKruF6cPGmvRqlrhiLdB+rbmPMLPwH8GB1E5RlV8l5T+fOKiX1m\nd0VOaU0ov2V6B4wsiIJhOcGy9kCxy+sdq459efVFFgniS968b4ct5i3OXZPF\n9q50ONeMxVXCsjfzerqesudXhiIfS+v3F6Yfgv0pyEgoTLPXPWp6ncUQ8QHJ\niXLs2mg/dUGNN9+lSoi7skSQiNvE/P1la4g1tFKo2qU+hfo5JZ8WzcllvS88\njIdpHTqT2leHMD9rk+EryoD7TPFTBOAlhMZeVGSoRPl+l2qtypvt+mt879Mf\nH+9gaLGI38C0/xHqhp9Hx9+KtHtQTvRWeErXC8z4WoOX8WuneuMZUEUhMoMn\nIHRwAF2WJkcQUjcQ5OoC24ZOmENKdLMJJ9wM+Dyg/7reiC3YJA68cXWT6shu\nXWmOWiDQylpgs42Yn3ZlyNENcv9GApByV5cFCjsAftsb0PoC/PSitt2sz8ro\nC3L4\r\n=XSK8\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIACXokbCf1MiYo5z0ejqBBldBmAG3yeM84XdKv2kxaFqAiAIpbl5ajhIcJthNLsjiXr4jdM2C2vbmjLTdGgNSV/X0A=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.8-canary-1a140c54.0_1638720505040_0.05789810945382534"},"_hasShrinkwrap":false},"2.7.8-canary-321acad7.0":{"name":"graphql-language-service-server","version":"2.7.8-canary-321acad7.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^3.2.6-canary-321acad7.0","graphql-language-service-utils":"^2.6.3","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"321acad780c2055b81606320de11886ebe310af1","_id":"graphql-language-service-server@2.7.8-canary-321acad7.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-RTU2h4vpGbrLLDu1+wP4nrzwF56tnSLYWwCbmgAzPGRheKHy21StAFO0a+L6QcKoYsfZGjIOCF/L+ZXdI2LgYg==","shasum":"d677835ad8fcd86d803adf0d3852ca8fde148bd3","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.8-canary-321acad7.0.tgz","fileCount":93,"unpackedSize":432228,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhrOtkCRA9TVsSAnZWagAACDIP/j94OzoS+jsERZnR2kvx\nm+zQ1leR6YzASzp19C+DEKRjqY0fvYw1+bmKioXvY6R+13c7ZhA5IAsdwqL5\nWljHjG7o2UudHNJq2GBgfW+VpN8lKGdzWQZUtxP+O2ImlJCwq1mEnEzpp8s0\ncLBk0uXgsmEGNoKGciwsl10Q8A8oH9C68imyG6vL5mUTnTL+u2fyX1x4qrpI\nlyr0iTwOBKSNqOFbd3cP9X62lLej51my1JN4MyZLbvuHQ2F8lhvkB1bhAnhR\nqtqOVYj27lbIQZZJE5XIY426G7Wpn2ExvEHaby6eEmH71huoJikLdA2F8xhz\niGPf/cEKvRuAwcVG3es031IW6I/sxNmyB7y+FoDH30vavQ5aPBfljVB9M+Yz\ni1uVdBlcTurWsqj31xeL1MKARMOIkKmImM6mLoblyV/YRrC1/KrTUGQToCAM\nmgm2RzVA9nKnF5LgJTyVFKOTUDMDI33GrrdF+Q+p7RobHM7Socz7Ppvx0ezH\nPaKiFKaq8325M/zYBoMQ0qKL8enchqkVw5Ty+YIc2A8iDh7KDbE03k6XGH2K\n0CScDC/j834CpkyoqI1TBqZjbw93u6zzlnJ6vnQlwCg/x+25WqljQ0PFwKsf\nfGkyzwL+FfyyGQhGR9SbPJy/gsl10yJiNyhHLH3OeGcQD0BGAT/blF9CmjU1\nfto4\r\n=4qLV\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCKj69RShWsDlH6hzsQq2yWPqRxnDrTrSi12lWgDzbHLAIgM3iUuomWTnsaqivW/8S5tZ2Bn7wtnARsCDlbgC3HGKY="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.8-canary-321acad7.0_1638722403903_0.31264800647706603"},"_hasShrinkwrap":false},"2.7.8-canary-0d171c9c.0":{"name":"graphql-language-service-server","version":"2.7.8-canary-0d171c9c.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^3.2.6-canary-0d171c9c.0","graphql-language-service-utils":"^2.6.3","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"0d171c9cb3f3218d211f595c11450da5f955103a","_id":"graphql-language-service-server@2.7.8-canary-0d171c9c.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-f+NNKUete4JnI3t6GZ15KKWajaxS9Q+2tpT1RM7fOCuB6vHvgRcN2CCmiWWGcgzsy2ZjznfWD/XcUVyLngxHkA==","shasum":"2090f15f07dd2adb86c367544703b8fb3fca5236","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.8-canary-0d171c9c.0.tgz","fileCount":93,"unpackedSize":432228,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhrPBsCRA9TVsSAnZWagAA1UsP/2AO1PiTClFxpxcGMzoj\nll25FXZccC6yvVbY9Yf7VTJKxQ+L0jQHgdL1rV15r/ECYHEa53mudbdR0brw\njMTyUJUgcSE3kRyDtRDHQI7HyZdiJUPkHL53Ep5pwlPuooNj3Zsvo9rzhJYp\ngDlrE+xAYXW/MsiabBUHW/qxCrFnlxNEVTrfRjhys6R+ja+AKC25E7CcdBYT\n8PPA/Qemm9dkWr7feQLa/HsRdUMRJJcW9ev+/FuI/4/1Cc2YTjRQi1rRhoLg\nJghKg1BfZssuE1MXPJBGtaeWydKZ8SWGdgH1v2wO2a0oLx71wnU3l4/aPuV5\nKgouc0MKhEUJiZc1nODgE7TB/sstcKqIO0Ytkm5A0ldnnru2c4GFJ+WpfC+q\nPd6DPbjOMT5uVLThMIIHKk8xTRAChmfRx7EO07OgKTcM9ue4X8R0HCi3xrLk\n/3upJH3OSfic+rwUKssekyDzfDmfmKUd+1MhaWD0kskW6l7LlyhEdVSZPZcU\nRCT5lrC9nuLifQfsUvF0IwaTykJowD5WW+nX8OD83C3Fn0mPWhYtQQ9IE6Nn\nQgJoWit0XUES+AjXbfN2LCivDh51tfb2NQLzuNH3qkUWq6WUJrEOLg3+gXtv\nf+s9uVZn+W+wgjO1Xs9ytlr1QEC1MoDoUz37IsEBTdn+xsG7dfoK1xglUp2C\nuGyX\r\n=E3fj\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCLytjeQwJpTft88xO9PsxQk73aCzVRqlCKiSTDqrpw7QIgfpFGDNAupOOUYlkfv8OOYG4LcGfIgViH1xQrNpuExtM="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.8-canary-0d171c9c.0_1638723692484_0.9274595815339464"},"_hasShrinkwrap":false},"2.7.8-canary-033a43d2.0":{"name":"graphql-language-service-server","version":"2.7.8-canary-033a43d2.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^3.2.6-canary-033a43d2.0","graphql-language-service-utils":"^2.6.3","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"033a43d23064503c77ea6cd809f89abeb4afde25","_id":"graphql-language-service-server@2.7.8-canary-033a43d2.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-qtoQepzmQP/Ed/Jh7ICTm5xLpeFmsYBIjWtnjg+Y7rJ7x2QyanUJ95sVwT53XKS1iIcQdpn5Rpo9KDuml9ON5A==","shasum":"6e71011d3f4e080c1c271369980503b0776ddff1","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.8-canary-033a43d2.0.tgz","fileCount":93,"unpackedSize":432228,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhrPSnCRA9TVsSAnZWagAAUb4P/jhUVdoOI7FUpAZo1ghQ\n08rlNJbEana2ljvmyUFh8ftEvK9RHMx09xaqzffhYvN9vOoDJWnM+WrBbwoM\nZ5/tKkzmTvIweg8fuKARFvPTWhLSGkInmnFs5tvon91XPqdrkgfjjpA89OIE\npwL20LQNQ5oYpfEnWpjKWXw91R/PNzO++I61/53R6AkkXLTwJksaSPZZBbbz\nAx+AgFgOyJsO3j1DkCu0SNGlTiGTsXrXd05T+2f+hCma+qQvEj8ZHzEZYWna\nx7Utj5lOT5xQWX3G0FyK8UYVeQHBTxJz9VIQvVjjhCgYSELIHtBushbu1vjE\nzX2hswnXONk4YHM+akhn4SY7FMh3+Qz7dX4TPxE7b+9zEChyEsvvgYpMHUtN\nlIdg9V8lY4QNEOB04pLnh2i9h32Mj3IaMrnO9K8KzCq6iSHMI+esSSGR0iNG\nPtYR+iCA3QwEifqDxGZvSSgUbkLsZBfQQ0c41pvGtmffA5x5c9Zb6CZOnkax\nlSx3WIooaDjyhYCy4IsWf9kyLEDqrfFZBwQPq8d0lTrDh/7PuQoia7wv3O4Q\n7tfDFAQFZDkVSvVOIX+bNItBwh0IkjEp3kmdpDAOIqhhPFsHVVxgLNUNw1Ku\nRUuCuuOQuef0kSruMotBnNPXNJOZmurCjtJnYBebEcdpsH8uIejGGRcUojoE\no+nj\r\n=krt+\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIB8WEElkXn4gKyM97QXRd3VVQi4qvzY4zW6A8ejbp/w3AiEAmy8S6bQzVZTXsnK9gaLy2RXirIbuqZI5XdCWC4Rofhs="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.8-canary-033a43d2.0_1638724774750_0.8296654819995799"},"_hasShrinkwrap":false},"2.7.8-canary-0b6fa337.0":{"name":"graphql-language-service-server","version":"2.7.8-canary-0b6fa337.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^3.2.6-canary-0b6fa337.0","graphql-language-service-utils":"^2.6.3","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"0b6fa337355e2e7a5da6f02bc618e209a276e739","_id":"graphql-language-service-server@2.7.8-canary-0b6fa337.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-wRKDmQviQe8TXLjQMqUrrFiqHN6YzdsdQIwV7pPVH3qoLBn2i3p2/4dw1ZaKAiyEDPiTS4B7Rhm/CLB4YHPOTg==","shasum":"8be9769e9bd9e7ef80e47c072a3b09f5e9145c30","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.8-canary-0b6fa337.0.tgz","fileCount":93,"unpackedSize":432228,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhrPWgCRA9TVsSAnZWagAAYTUP/220LfvHa0PWANIycAsU\nwXc8aKFS5IYQ5rfbDCtQc4jykbN7VVHvwHzK87XSo7OKF9NIJ9PYkjCcVpRI\nhwJRBQRYA1S/t7oXz/pCu7112ZyPn9yYLPf0vLat84LiwOXoeBAkkYVljkyg\n+qHA4AaFLEyNHsn5fjakgnqfz1m3rZRZm0pLarTAlCLdOi9FAqMY4gnmttAs\nfl2iDxSau4ZrBNXIIGuDWTqcUe9FsCWVfJXDMlXjGKJ+qiFs4XBCooJT7mjU\npVYIMut2nb/SX8hjgyqcj5Gs+fWy/EFiU3qGMX9PKxvWGBsTudeKniX8YCSR\nQl9PHvOfI8Ix24JF33thDSffGfRXjWdULTXa7/8nmtHZ/lMZELGUCMwRX0g6\nNq67muEvttILPINo8InFWnbPTMu3XQ814TpCaejVgL6uvH+8Lp4Nbi44Co7h\nZktjChOoKu4IyslP8BM+nzSigQNrx8+dZ/nOLTpYq9FOfeLtTfejRfp55+nl\nm0F7WxrmAIl/Db93h7U65/O4DRN0cilsdnZ0uKLzstldTjx9q4PJAQ5B9c3h\nkXFm+NxMzyE0YBQRV4+He5N9pPJO2NweNKTHXYRedm7NetNocSv29++he/Av\nTgCB1y390mAmUfVHZC27tGMerpcYMe9U1LS/vas4kAos5eyl5S+bGixWShVH\nnh4i\r\n=ETwu\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDNNXFj/apkuDyJwV51bmJBYJ0WN/fYMVP+5DZVKBXRvAIhAImU21fl1iM463d15ZeHc2I7cJJ6keI3Gf3XWmnJtmiE"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.8-canary-0b6fa337.0_1638725024489_0.7485467222040132"},"_hasShrinkwrap":false},"2.7.8-canary-8af33604.0":{"name":"graphql-language-service-server","version":"2.7.8-canary-8af33604.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^3.2.6-canary-8af33604.0","graphql-language-service-utils":"^2.7.0-canary-8af33604.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"8af3360497d46d35012891676bc226313a6bd17f","_id":"graphql-language-service-server@2.7.8-canary-8af33604.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-MtWv3clyrt1/XeWLZBox1r8NEoHU8o6OstNVL6uHLTikQP5r8xZ/IJhjK8eyRLhkmwJVK2YLubW6aU3/Sxq8vA==","shasum":"70086b50110374553857b7405a1380025b1a9af3","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.8-canary-8af33604.0.tgz","fileCount":93,"unpackedSize":432246,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhrSdECRA9TVsSAnZWagAAc1gP/1miq0L8GQZCE9+HczFV\ntD43TohAHhUkAFpdPl3c285d60hr35D5QUVtxvL0JjRXq531tgF1lBav9jQZ\njGbEXksixbnrl50nLD+7pTulxN7jBYNICv1VCi6PmTFhREXAzoCz9Iq5gTwN\nGll7T9GWBE7+UDFCLxs2jjP3Depop/FFzWxy1WAET71FNStL42HVnVOm/ojl\nEjeZZdOqe3x58uTaKpBfDQo/PJCYGbfD85cuhDIDtiU0WhOesv12R+29GhK4\n4cINoYWizSjKZTKJdxr2qiPUMxnkyLRD00inYAA+8pw2WjmvaQYZDIrg7f+1\nuiAzJiMJMhDuB24vrB2qWo7BoQ9pa/NE4jGT3X6BnFVw0qrybbCOwtB6Cqbb\n0qQ0lMXqC5dpvofg9IK7YSaoUNwowV8wF72d5/qtA9akq76reBjF2mUugofJ\nNN28wv5GTcNtMe5DQquK68PS6vl26Q1BsikMFEmnBHuohxw+BtZ6EgCwTrYk\njlFuQZXipUJ3xPuCzdOEbrfsi+Zf2e3cfrSeYk7IBN83fBtoBH7tqVJlQnvO\nDwhanFFo2gGP9zQjZ9VqtMj6HV1ZZ42hYQGM9tsKLCE0qtv+8/V/VFL1ltjw\nHbsz858Lu5D2P75wzYfpC1OPQIMJ4d+8WCSvmP80yQzI+jO4ZVh9XDMs+fI+\nKSla\r\n=7oCO\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC8w4RH0fwpec895ukuMaIn/7xpYe3cLhkmn1Tn7jac7QIhAJzattywWTc8kH2UcCZcLpPV433ZKilvGhsmRZGCcbHf"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.8-canary-8af33604.0_1638737732125_0.514041658377713"},"_hasShrinkwrap":false},"2.7.8-canary-1d118d28.0":{"name":"graphql-language-service-server","version":"2.7.8-canary-1d118d28.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^3.2.6-canary-1d118d28.0","graphql-language-service-utils":"^2.7.0-canary-1d118d28.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"1d118d2813c67f818dc8f8cf0e0308fd91a6ad3a","_id":"graphql-language-service-server@2.7.8-canary-1d118d28.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-o5YoslwSoOLze7CGJNxW8PCf9JFja4Aw9NFejBw3VugyPf080L6QHM6Q5TA8mU/q2yQioomSFIdY27yok0ePgQ==","shasum":"92e1d4095953c934a2f90b289400d0c9ab5c007e","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.8-canary-1d118d28.0.tgz","fileCount":93,"unpackedSize":432246,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhrSpiCRA9TVsSAnZWagAAHkcQAI7ubTlDu3WE5CCBnKhY\nzRbT2mh8uBvn05bCpV6LdD6sj+nUWGCyjUWQoZTxOI3Bzs/CwYgW5jNS3NLr\nggRrdEHfzq4BxZSN0k6r40RgEeZ8sANNVs22iNozmsFkMHV+Qb4F6V/Ve0vp\nxAjN92wvQ9gbuxmWNcCQAHm7GDZDw6It20vy3PEClhQ3uUksctDqw5wgDuu4\nzRdv3QicmdCpaAcDnCrPFzhSMOz+mXBIOhHRDYyNDbH13RCz/D7OKTN53KOy\nv23LQTnQBvnYGhNLaWgYmA4JzQOnzqqPo00D6rj6FhwPuPPWagoWqZzonRJI\nVhXXqJNjXJvEuvMa6dE1Y8IatkypKJLUYBjksbM8QUo/TdpDk54nVjLSA4zI\ndcjtjVldbtDcxzldHNuojdarFx4dQnvHg/JJIVmZ9b70cvY73pYAdyk8HGey\n5oDcyI2aDmt+sLLmRsittBZyK3jYKXnJZ9mHk2axWYhQIHh7RQLvTUK4NdWd\noMKs0Yejuf/eExF6dxGP+NiCynxQFOZHeJRUky1C3dwKcsuucwP6CWr9AYSM\npokEQeq3WWI2Znj8c6VMeT8OUVhPjZUL6K+7onG4d6cAO7K35O1D6nhYeNOC\nprZWu5QdfCz8f64xu88jJHUo1/R8J1+WCnmAT+XPZXlyElWhCZKxOvPUjxwa\n5XgK\r\n=gYvK\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEHT1ec9D1ut3og93ss6MMO1f/mxhuK3db0lEw/mw+/MAiB7X9d2aTHWl5zyGIPJLhk9PE7LjsdVYjjo9ZlF/JR4Ag=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.8-canary-1d118d28.0_1638738530703_0.7065107128500054"},"_hasShrinkwrap":false},"2.7.8-canary-343f1670.0":{"name":"graphql-language-service-server","version":"2.7.8-canary-343f1670.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.0.0-canary-343f1670.0","graphql-language-service-utils":"^2.7.0-canary-343f1670.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"343f1670e94407e63cb78266e4ddc31603af32b4","_id":"graphql-language-service-server@2.7.8-canary-343f1670.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-sSXSw6sV2EcSUtsOT7brExzut2rDJWY0T7UW/VMGBwQq0n0HPxDLWNs74y8IQd+kLcw/xhtrcDmKDvoGurEebw==","shasum":"c859df33d5b28de4e8af18e388162ac422aadda0","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.8-canary-343f1670.0.tgz","fileCount":93,"unpackedSize":432246,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhrUKcCRA9TVsSAnZWagAALAgP/jGgBDzezc5iHz3aB7yE\nqWWO3fXZ6Y9Oqv7+GkzWlKHUTD4Ta61LHBMKGbPBQrTbWkP6kHYDDgXdZESJ\nmFV8NL+UHVTgISC2Ba3ONzDs8YQJ+jROsU5Ie7xga8gIGUZVJevklQcbdLPw\n6trNauwLEUbcvtK+tMZoEUYejpikfEB0jH9DKJVb3gtAb2DMKjyNC1R/B39I\nIduUvkuiOakDz7usRpLUW9ykhhWDY2dwSUWEzSG1XdO4NjCikaiojgVxy+Hg\niLVEW0/PZlNh34a6tw38eGfNXv2rDbyHq2F7PlAe4PJpL5Xv5ePXChx6v2LG\nm7Kk/2ApOuumuSOyOoC1iAOxJQTxRfG6H/xoCxyGFP4vFqUKJRujG3l3tfTQ\nqC0wkf4wy/1J8rFycuon7Z+he9wAnc5Vf6Hlj6CEoRSue53Mwe+LvcF6oLZ7\nW9GIA7jek+E/yKKcr1wN/kPeYN2FjgKZxOB0ahd6s8cIuBCHF2dYzmGBTmHe\n24iSCHjqZJxl7Lf6gtkUHl+0dIBCHSVMOI+8Dy0hzJv9C4OR1mcQImjwgk2T\nl6oUl9I4X30MmEUofhMuP9GVjmsmBOuZU1Jaa96szqjYIe19yvXgSYVqfLBx\n2yGR3vVm9VQJRV/ChtvXmpJtPsP76ETdNNQziu7Qd4lb19HboGPNAlwA5Y+k\nNPsq\r\n=ff8q\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHSjX1srnWnMfHz7LiFoUFjL6+QPYye9mPMLXZ8oWyKSAiEA6L9D2fAFeVNBOc3pV2DdRCwej+BIxoxd6AfaQsuoHqI="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.8-canary-343f1670.0_1638744732219_0.9473065803864187"},"_hasShrinkwrap":false},"2.7.8-canary-aba5a940.0":{"name":"graphql-language-service-server","version":"2.7.8-canary-aba5a940.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.0.0-canary-aba5a940.0","graphql-language-service-utils":"^2.7.0-canary-aba5a940.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"aba5a9409e72b686b27ae5c60af7ed74648c08f6","_id":"graphql-language-service-server@2.7.8-canary-aba5a940.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-2Cp6oy4S35bzEzbFT9JeyClYz8roevNZ0mA31gJoUSlBN60WA7j3cwv5+OfdPFch4A5rGhdwbAb5HqI82yPn9A==","shasum":"5981e973dc698d5a2db1400056b0aed65c7e27e9","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.8-canary-aba5a940.0.tgz","fileCount":93,"unpackedSize":432246,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhrV06CRA9TVsSAnZWagAABRcP/3/8Y5E5jYEp7/fOQAFz\nMIm/gXIIH7h/UbfVgdL6CcmdRahWJDXio641RSlnL4PoexxuuFgraM9TUvSd\nqhtpmRux7W+9u6Js23PxpCe44fGcti7mBUtUSrVpytp8c6wGnyTghmcHjY9u\n+QxelL5SoRKsUMBakro5dVaXR9VGL4dtaYHS7wZx+azjj9lVHwzTUkfVZnvE\nZD6RF2/CbCvu+msFSw+JHZ6NLzVSKNdj3VvW7omY/HBitlMgo0OEmRb0fpsK\nEoNB/I2qf2wNCiK0vr2IAPP0Cl0EBxW4eFqQC/TCs59nMRSfCp3N1HwxlJLp\n910YqUKQUJh71TBpkIgiqivKgRB2DjhQlSG7F8ZUC/xy7nmKbD+V6Z/12Cbz\nBgBrxfP7Oh7U0inzahENj5FfClPajyxSxB2yWaspcX/+badm9Se121e6UkNW\nPeK7/FO1jOJP35+9En5qLSj8MpPYIfdRhw+iV+aGVz+SjmRGAepvqfZmqJU1\nhIDoC+Iqd0YOovaxLIsnDGRm4EjSOMEm3waio4EE3iJVWDO1R57kScw3242J\nKEbbqt5iwoc7KmbTWC2rRSMgJUwXH070eLLAa+pHwdxyhW6KjZxW8jb21xJ9\nGx9fRJeG0faNRdsOIE9mYHnFeEC71LSgyj0wjx8oU41nQ9b/Pb1ZbB6Hssr0\nfV1Y\r\n=u28A\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCBh/rmLqoc47NILRS++zFL5GveaFvDIG3aYtoVruWerwIgCix3C6vOKZL2f3gCTdaT2C08PYp0qDYkPbSrte+uUE4="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.8-canary-aba5a940.0_1638751546468_0.024648112775778053"},"_hasShrinkwrap":false},"2.7.8":{"name":"graphql-language-service-server","version":"2.7.8","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.0.0","graphql-language-service-utils":"^2.7.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"gitHead":"6bf10739544039ef29d49234951fbd18d0b54e46","_id":"graphql-language-service-server@2.7.8","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-wRp/7QkpP5NUKWA9as2A0YmP/F1pColPxcg70J5jKKDrp+WLFQ2YEovtADtYN39iEma0DXE53mwy+cQwSIt9DA==","shasum":"80a14420a47087ba59f4aaae8978fb701f40ccd3","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.8.tgz","fileCount":93,"unpackedSize":432192,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhrcWJCRA9TVsSAnZWagAAEFcP/RSku/IdKO+Ku9e/WDVR\nQhzP6KLRuQneo/Ozgh0pf+tY4l/dIQrSbmWZZXNKmAmQgcChP+ZdybNdvo8o\n9YA0Auk5ciUC48XxiiFd4ueg9FpveHL/O/Ndhob3M9+QcSou6Ct4aw4D5cNP\npwReswKcmyS3AyiTk+d45uMapZIOBAPIuIjCch5J5IOp6SSaxR0g2mWp1Ypw\nMBtFxQazUK6q3fI8cz1R7jh5RFz5w6WAxEmYMHUrBk+wg+CaEdba566MhwZ/\nVfOFT6krOiR7d9eT/AaaRqysgzvlaPU80fPH5Ap8V0Uz23o1ZleDwRxiQfQY\nM54uP8pjXhFRh/xdjjbOJIbE3KgD8SZ847MoP4XRrd/3rc20C1prbm1QPoG0\npgO2VcNKK3ZzIUTfHsWj5prjZGJxTS2KQMfQ4L7pnUnvpez4RUPxRSdMQLuG\nFclMw8LK3ECVVmesz/fkUauSR9teDjc7Gn3ssCh3au4WqFFONmAMFRtmB7Ls\naWOEreCKMRkKtN092ZT4KXl+rFYkROQCneE3krPI9G7+zRg4ZQnKTAIeEe0/\nV7KfP+EgBY9AR5Re3eDN5X0PiLUTIsVbFbYAoAauyXFfLO7cxkx4l6YKZEFH\nRfWDgfY2vp93qYysAWaIeEBln0ReYfU5D4L4FxmBWmElwlF0XYr8RBjkRMml\n8KL5\r\n=U5vo\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDg7RmX0ITlG6Rqn75hItO/IZSgxiLRRPU27Sfl0w1e7AiEAqDWQb3KcyQAW9epac9fOtTw0aBTU7gE2OGQoH6q8yuQ="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.8_1638778249710_0.9695557370088614"},"_hasShrinkwrap":false},"2.7.9-canary-75700e01.0":{"name":"graphql-language-service-server","version":"2.7.9-canary-75700e01.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.1.0-canary-75700e01.0","graphql-language-service-utils":"^2.7.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"75700e019c8ae3db5b76ec5d27f007d3b0e78428","_id":"graphql-language-service-server@2.7.9-canary-75700e01.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-NihpA4Qd+pGXE808sI3/wtOErWK950bN7qPhtxq7CvSOlTDJ2kSPoDwGQ0RK9n+qvCj9cKRB/VBvUV8/CHzyfQ==","shasum":"01509266b73e4d7000fd51709680660711354d92","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.9-canary-75700e01.0.tgz","fileCount":93,"unpackedSize":432228,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhrhIzCRA9TVsSAnZWagAAJuIQAJ9TJ/73HCbDhoohFfAj\n/k1YzXysoU0n0MxL89u4Qp+m2h8ZfENvyrIGLfbTMsUd/yd/Rxd6VXoSLhio\nA52Kbp3if9kReGDV32ox4pAhlK2KPoI1+pFiHlw/JEFpQ5cD1e7kr6Fne3HB\nPmYX+myZsL4EXaZw8V5WJylxEfucBd8djZ4ZYrt+mIVgv7EZgaNnKx9BfbXl\n6bKC914FgPFegcjqynFnZgQpWbMsuRHmK+aiJK7RwRhga0Iiiiq+1w+GKCmJ\nwUm7G0I4Ye/ZFxZ+yFOPXMnvaQwAg1x8I7BQuSvsSlOFSK+xYH+ErYR+9seS\nvemi+qYFCAGo38iX6dwf86uOO33parPVM7zy7siDATkUoQHhW2wXGQVenGIt\n+uTkYEG+imRP8IRLBx/Tiul5iArDvt8xypTp9nb+RbM/pQBSXxr/sLBJrSq5\naR4LG8DTLxcCDggouc7SDYoPgTo50Uyb63CpHCAy14+0X3wJ3CO+2gEmZchp\nwn6btoEgsaWVVbXa8i485qnZj7FIVs2isgQUrD4n86syLW4h7/rXC5+WQ18/\nUvYfat1UFasDy2QqG3EQhe95gWqDFZ0vJOy5DQy/BWt0VB+NtZraiDh4xMg5\ntrkmeG+27ZOB3d3+GUfTOUbiNxq55QsquAbD1sSpP6TRlk2jh8rlIF1CXiWI\n9Y4V\r\n=lJME\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC+GtzVX68kVya0y/aH3raEtuMKu3MA0KGyXRXXkjMxUgIhAOGyL/z4pkiPbnBiiZKZ/0aqzded6zT53stdAzawjiG5"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.9-canary-75700e01.0_1638797875752_0.5260742349362868"},"_hasShrinkwrap":false},"2.7.9":{"name":"graphql-language-service-server","version":"2.7.9","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.1.0","graphql-language-service-utils":"^2.7.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"gitHead":"848da580f1083b67f367dea26c110b28b7d401cb","_id":"graphql-language-service-server@2.7.9","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-BFirO5jDKHgQb8fbztbl4jLKdoYv57WMZNLaLDFfVeeX8VWAE0eTA9DYWZiKeJqMV4BAMLYD0mtXQGvGa+2n7w==","shasum":"767acb3af05112a6c3b11837c659484171bfccb2","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.9.tgz","fileCount":93,"unpackedSize":432192,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhriTqCRA9TVsSAnZWagAAJ7IP/2IACR1/xa2O33LLZwQR\nU1Dtgr9eajOGmKRfsbNf2xIWJDx5/Ydr0Xiw3IXAGuJFf7OzgjtzbGbQ0u4e\n41Zyvo1mj2lPk8VcW0mYH/QKDsZllv3JgHuaAnMaaYikvMTZ/Txe/M9dsSV6\nxcBQWGLSFEZg/McpjJjoI3aVN2MAsfqK4QTfs0zO9e46dzIg+u6EGGNBwGQH\nNqdquHOUYIam82tOBx7Y0Zag/DWEXErm99muAYEvBaiU1OfLVWyoP3kNr/Qc\nosvrv5qKCedbXZV+hjBZIef4jyfUJdzSvveEalYyJ4Qt4uvJkwwwWOfZb3g2\nwFM7yvzAxJwq0/sAyo017VKGDSyaOaRZTgBNhjU+DuhnJIiw9m8IJm1k2Q8A\niJ/qvFKoS1QBTLETAEgC86uscaitl9N6JAmFmCpkVK9AkHX+u38snIu/VpGi\nITlSOXJOBC24WhTAN+SsTI1z7B4J+KZ4jMM6bNQsqvdzsD2+CDE77E70/3fY\n2KKNJJS8zuzIulPaxZd5LlnOmIMXlfGkFR5xoJ60ApD8F8PysqWLEugHZH8v\nzxJEOGZWwvs3At0KIwdaQAGSDFFvDoUMjy+92Z8fWsCBB+9pbpHEHBvp1aa2\nAXaVHCqoKkhsKzaU9a6fPwWb7Il4e5MeZEGeWJ/yrtUmF0Rj0tvRemRzmOFm\nTi6L\r\n=6DBE\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIAEgiIIhx9XuV25tG+8AO9bs6iBVU/Gy+gahkugCmn9aAiAGzUUfJuBluPrUIBTA6N7ztuikvFJyFL54Afr/kYRJxQ=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.9_1638802666330_0.6193879922393366"},"_hasShrinkwrap":false},"2.7.10-canary-b9c71c81.0":{"name":"graphql-language-service-server","version":"2.7.10-canary-b9c71c81.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.1.1-canary-b9c71c81.0","graphql-language-service-utils":"^2.7.1-canary-b9c71c81.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"b9c71c817f41e1c13d796cab7a8753b73088dd19","_id":"graphql-language-service-server@2.7.10-canary-b9c71c81.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-buSBSfqwwu5hEQUOFgM1k2pSIxx+RjsO2q6Tzz3SPMgFZwjA/Ya4mxQxAhPQJ3wSw3t+4+0JOsLtUE2CqfiRnQ==","shasum":"4bdda022bc33544e9e30323307449d2a9d550687","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.10-canary-b9c71c81.0.tgz","fileCount":93,"unpackedSize":431968,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhrkF/CRA9TVsSAnZWagAAyRYP/i/59eLsycIqEC5txu93\nIJ702ITveQXKo8DMs+ycRQt56xZCRn7v650iD76yRraswshWwU6XPVmSL718\nxbzxqu0mCQQfTnzkUMeu2lmN7LPlNV4QFI/fQwq4FKOp8+zAKaLhSLrhoCxr\nIfPq5xITqlRjFT+Rcq/aodDTu9emkwWeGCRdkxh2h1ZOXmsfqkHIXFbovy76\nmEN4uWiA1E7phvw0Bn5MxO8/VGx1B9Ly3VSSGpjc++9L8EJmF28VjlZULewH\nJzMJpb3oerXBoS/O6b2643Itj69AGkwbi/BuI8//dtcP73pWWWYtMaALhkV4\nCqCAOQwSFHpoLpunxiq+26+1y3tKtjdeo3DY7Lsq9dc3Ny1hkrRA6JyXvUaa\n7y1HgHe0s086iFYYOkjuF/U1uiwUKkzP6MjiD3Bl0Nc2WRuWrDFlmJ9vOT58\nyvwhzB2tKT4xAp7PUgWfMJyOc4K2VA4o4tukZlAqa8NwWoyNxWRMY/rvJdMd\nhLjFjo0N+cYPZjEQ+Fx3PNZhF5q2uKf9F5Q/F4Tkxn0VZw6SMBchQ/haOIhh\nq0UhAWssvecTJg3p59DocBnxkj2OUWnHiR56jIJbD8xynV8YBtEHkPIisTsS\nOJGXtlDExCrLp3DzvzaPdXtk6oAQc7IYrZaDeGsR8Gfj4XB9/DR2xYMct9aL\nkDqY\r\n=0gRK\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCFx4SI+kZOEKPq8sR99enhWqmco6exnMD6/DZqlWyhzQIhAItn4ftSYdV6DIow8icF9x6wymcwc9FUG2KI9p8m2/De"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.10-canary-b9c71c81.0_1638809982941_0.6771933330959579"},"_hasShrinkwrap":false},"2.7.10-canary-bdd62cc3.0":{"name":"graphql-language-service-server","version":"2.7.10-canary-bdd62cc3.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.1.1-canary-bdd62cc3.0","graphql-language-service-utils":"^2.7.1-canary-bdd62cc3.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"bdd62cc3ada808d99d62cb3ddbcd5ae3e6dc3789","_id":"graphql-language-service-server@2.7.10-canary-bdd62cc3.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-hHrlxWRJYI17N+P0AInFpqWmGIYYkeievXP5uKPQwlkIB9Y2LmFz5f7vNRSbcSXkdnfxaPohWkVIG+IX5p8TEw==","shasum":"b3ce9b3f3d8a4ad6d60162fa49463a737a145cbb","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.10-canary-bdd62cc3.0.tgz","fileCount":93,"unpackedSize":431968,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhrkNqCRA9TVsSAnZWagAA0ZIP/2GNk079Thu8PzOb9UYs\ncwEi8Zx5TXSwZWbMOfmxrfC1tWP70VRHRyvxbTXTm6KEHTXz9AC2lghHYPdW\nxVbAP9HwpSVaa1XTED3h5+IBA4833wMpZQdWLjV9gzLAKTcP7QASuXYLPn8U\nzAOVqAMCYdrmhVUCSuI5uWsB68uSFYDG95Ty1ASnfaIyIa/mlzTyV4Y70fK+\nLW6OnDOC8npNayWsS4n7uJS/Eo142tdyB71QdtdlChgsGYTls1iTs4Xvsa7c\n+Tpl7w8MTziJJ6Cbluy9G+3Q+IAzKmD2FkXUy85vPNSYDQWkEYgbq+eHORmf\nxfa/SUutzrViI2FiElB0emOVV+qJ4vJugsvNM0whn2foTZ1hGZIYWGeBfIpD\nlzQkQcIrOh3bcnSHWKunwYGHDZO39ZnTy6wxgoH2bBy+97rJjZRo005rgiFL\ncmCWXjeUd1Lc4g3jJIkccafM8gNMu2KJE9XN9JLcs7MaeFxSSMSj26gPUhVv\n7LM9Ug2LGJCrognz82Eatao9g3KkhrpLybL6/rl2YwNSdOZ4M/cV8qrFyzPz\nHQ6digsgCixSBVzjebVW/VBynG1/mHht+MCa65+BT4LTkeR6h+EULXOjzg5u\nMhg/9BcU0gH0FIiDsBWoIwuDN8svUpLUuzgDS0rknKaZIDh+HBDlrbkkRTfs\ndF4w\r\n=LHVj\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBUALkNFwpZUfx2cNfM5uYycqCbqYN8vzIQrGempQ4WYAiEA0qKzYwXoH7iioZVg1qnuIorqkfHXom1W8kMMZ81jHek="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.10-canary-bdd62cc3.0_1638810474572_0.05007921217090572"},"_hasShrinkwrap":false},"2.7.10-canary-742288e7.0":{"name":"graphql-language-service-server","version":"2.7.10-canary-742288e7.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.1.1-canary-742288e7.0","graphql-language-service-utils":"^2.7.1-canary-742288e7.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"742288e7f676812df4c3b46921b746edffcb9895","_id":"graphql-language-service-server@2.7.10-canary-742288e7.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-Cx+NDWdUUqHFGDwkocqz2Y95ZmMz3K48oA9PnvhiqS91r9kTwvwUkAnzw/xe+bPAJPAWH7YSx0k7JsY4M3/Mbw==","shasum":"8619b9a278077a5563d73f1f507a20cc3a6620fc","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.10-canary-742288e7.0.tgz","fileCount":93,"unpackedSize":431968,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhrkS/CRA9TVsSAnZWagAAmcIP/AnhXh+ON35mYCYYRTUe\n/l34k7V8i8McHrnj2D9gRfng9FSpYJdrJmoND4MI0ke2S9yWW9qWdosibY6+\nWXyK8c3BTt0XIGmxs5t3597nnG2M4lNpgrbnzhuAsAcoEasuDpcTiLuL0eRW\n4LLJbJgwufwyB0o7/G/GIX7UfzeuJBuZ0zy1/k1Z9NFTt1dhZdpSHRPbGkGq\ngCLP8DLR4ZrEtrwLUkx2q1HeCi/fxmxO1mff4TsqBnI2qbLEBboKI5ZHP9ve\n4ytG+N1e9S2jzGa9KcnbeO4YI2S2E27r71z2T7+h+4zSuyvyAYJzMH3p7DC8\n3S+g6y8iNxv9nCkcG7jlXQATXVTGX0B3V9TPKVCGHPOwoxGOM90Jy6FkY+bM\nQ388cmNoUn73cdbNVCxrCs+qgPI+ttua2RFd8UWb9Jtl4qvIaalYSWGIlcNG\nvN7ErNMqoaJK7roOSjFmN+mA2KwGIneimHGDEJJuwayjxl2esUa/GJN4R+so\noyBxpJOufaBf5nQ5vsmEhZCvjn5OwmGeiLdN7oCCYyeklYXc36jr9ymSsZDp\nzbmMOfp1CJu1UUOS96maRfB1rDECdavrJToQBPvPzyJ6iCT2uzgN3JOfJVBR\nRVGzUgcXaeJb6ZYLaZh1fHfzN6kDY03SO5zspWPCU+U/QlgwkjVRYt7XVig0\n3LhX\r\n=ZoiM\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDvkNLGvuDIZShxCg4YGBxFaiN+GO0iWGCTtLCaH7rLdQIhAPCtDl2wU8UN1SZ65tNcReQihAiqOE3JNX8J1M9zNpdS"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.10-canary-742288e7.0_1638810815213_0.783225162476574"},"_hasShrinkwrap":false},"2.7.10-canary-ec866cba.0":{"name":"graphql-language-service-server","version":"2.7.10-canary-ec866cba.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.1.1-canary-ec866cba.0","graphql-language-service-utils":"^2.7.1-canary-ec866cba.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"ec866cba3e7f7b2e8ac06cee6caf22248c82f49e","_id":"graphql-language-service-server@2.7.10-canary-ec866cba.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-nYmAFHWUR8SCq6nuelQ2qYvfC6Nb6cAAEIYNv/emjDAcr7T/yy0JDAhbdBoM3ckcfxI22o4goqCzbcjy+t8Fmg==","shasum":"bd811a4d2e4e46968ab2d697a9580dd7c4dd1b7f","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.10-canary-ec866cba.0.tgz","fileCount":93,"unpackedSize":431968,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhrkfwCRA9TVsSAnZWagAAla4P/jP/2gsPnwfIwqdZPAiL\nppN0ogpe4EePf5amVgRAcdBQ0FXWq5POK7k/GKzVDyqVWt1zLr9eg0d/jObn\niSPToHyMKuHU2uqPQvzCC3YJO3o6j8/7LX8EZIoX9Y4x4rSUl+VfJ9qYxnn3\nnbqUTbhj66MCHJKxzo6napqpFGn/VQXZvp3Xk0+j9iafh89YtfJf7YgoRpcC\nq42Yd3QRzFVo2wAwWB0C+sRJwVMlSvLXB/JPWLB93jfEaUEnhySbWF/Zkr+i\nZ8x+Vf5POsLlMRPAVqMNt/RUkDJYseHHL0HAr2lcZEp8wjYleY+AuXc+MG6V\nsRCOe/dHzSafHuRPp8vHldshx5Ck3ZAJ4JQgQtRVbWSF9vDpGD0dWmMhB5H4\nhugeV3lAISkp4tIIpFHoM343Ufo2KQ1piQybyzQ37TldGJi1BKi4zJFxsqML\nAtE+nl8HZhzsaWC8on2APlwff2g7YOnLsDTmgAOdzbKXrUK9iDevqWDkyiH3\n4IYbvLhrcS3hMUs96arCbUNDbvsKvbGdLoG/ZOwbO2htF+CigvJSVsgheSOa\nXQL2YaElptRvIcRtUim8nlP52BnzwXbVJaewFv17nsBY2OOF0nzlNiMgMdkf\n91KJ6w8dMAb3NUReNYUqGTSMWmq7NNA7Ia4lqffd3kFPZnbap8P8Oa0FGDx0\nfWaI\r\n=ABR0\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDT+lB028qLPAyl9UgbCZtaLmU+4b5y2HXG5J6gXeJ7LAiEAzZTk102lKiChBdh0Fg48EkNzwWFRm6dnUUQZTCD3qQk="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.10-canary-ec866cba.0_1638811632208_0.3315364971380965"},"_hasShrinkwrap":false},"2.7.10-canary-ab0be4f0.0":{"name":"graphql-language-service-server","version":"2.7.10-canary-ab0be4f0.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.1.1-canary-ab0be4f0.0","graphql-language-service-utils":"^2.7.1-canary-ab0be4f0.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"ab0be4f00d3a7d83b4e223b86467cb2f698f5220","_id":"graphql-language-service-server@2.7.10-canary-ab0be4f0.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-9pwAUCucsQw3WgN1oufY5JPTCqdHP0KOv9TL2hHUl1bzTBe+iCo3zq86HblZAfTOurdDYQliNRq1uB2I2t6hsQ==","shasum":"1cd8b3a5f5359eb9c3348ba75ebbc409e6e61e1c","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.10-canary-ab0be4f0.0.tgz","fileCount":93,"unpackedSize":431968,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhrkuRCRA9TVsSAnZWagAA1McQAIGcYyDd7y55F7IL6V9E\njZoV+xBQHnPxYLy2zwOSbYbhskgIFEImYZVjsNzzeoR4lT/lYe+xzVdiU9QW\nEbvI6llPWbIZ4/kp3wtGNc8oT7fOlS8QCo1V1yGcMZuuO3Z7SEsTUU1ilDNx\nY5Hwjm40i+lx0YHU7mBs9K4IdKE4N2H80K6ptw5G5cn7j8eAplKIe0BfW3GV\nL5WGfvgBSd1lW1hLX5xTTcDJw/2yImaQvJ4lh+e2dYHE59KZp0QqkrBhe/5x\ne88/lWFsmnZkLDNWihpQhFkLiYFh+D3s1yK4Pe/qIEd8KZVHICFbUVBnVY4j\n3/8GNu/JABXdZHxB6Bok1pvvE1gZiCx7OpHSI25XIyrHx6V94Whq47JvmhMz\nDXyrKCMNThk4zsXIklofOVshsOMP9nAYBdKNBi8q6zLWzv5CHjTS3oIoWg4x\ns18vAsmuBqkJ+u745imXXd6woh01mqVe8Zp+dzc8EB1vP0XYFfmwzd25kaCZ\ntlc1aCaZE77ggx78V/I0Kh5VdB4tCt6NOGCWaPoXFEVFVFtRuzPTtijdCQLi\nhxeLcGJTdIVc62puzFBaqCoQfQrmMzBLyRPpYCT74xmuHMD8c7OBEPpAvqMc\nZNmRa6/RvJQn1K8rd7v3XO+EtvJKxN8r7TBmmPLN6E5jtfWRDObUMM+tCQkI\n6bSa\r\n=1UdG\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIACdmwNBFAJkRJHRVsV6fVPOLcK1A3X1KRpN8W8BhXLpAiANpGgWOA2P5F4oMcediVenq7Lu0uQQUPBYd5GdBiPoXg=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.10-canary-ab0be4f0.0_1638812561407_0.8722252508760038"},"_hasShrinkwrap":false},"2.7.10-canary-2f2c1b4d.0":{"name":"graphql-language-service-server","version":"2.7.10-canary-2f2c1b4d.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.1.1-canary-2f2c1b4d.0","graphql-language-service-utils":"^2.7.1-canary-2f2c1b4d.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"2f2c1b4d946ec3d125f5280828fa2db0816c11a1","_id":"graphql-language-service-server@2.7.10-canary-2f2c1b4d.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-KFns7/VTjlYBcndNS2yhB4SuEFC0ezwHmQ8AyHE6/tZz+9nGwvo9TV1l6Z9hbgGNRs2tJK6lGFKilPpFFez7Vg==","shasum":"fa77aed2b2ae46cbbd7b2336dbfcbd325ac819ec","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.10-canary-2f2c1b4d.0.tgz","fileCount":93,"unpackedSize":431968,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhrkwlCRA9TVsSAnZWagAA6dEP/0ugJZelcs+oiRwQfloB\nm0wubPwMv1nmqbKK4MF+hH2KSz4L7T/R3tB8sLnKoyQMtK3iM1qujWFswS+n\n19CPPmryAM11kRnbjy3+6C/gws4UnCwMLdtIlKTAlwtrZ6FkOit0SBr3XWhU\nt5NT2AVRl2T2PDk2oPYg65ZtRGcncsTdWTudqlOfoedUvTGWGNGDVAH4rikS\nLI4JtAS6eEburuknTBtzx50LtFyX55AP3qLWetvaeTm0Oip8vaA+DsqNH+Nz\nTQ4Hv7Ui0h3qBmVZJYsKv69HLyglRYdodVEKz0T7j5Le5Xi7IjOPrBA8UCOB\nQUEPs9QRo6PwqC57VOu459aXtvUFYFpMTI1MLYIem1RNAIla8oH2u7sGpInc\nr6JdcRMaZwKoAx5bxHTj7N0ZpBiQuTu+VAockE+w0Us+Erz9xHnYP10318CI\nb2djrs0OM5Se5650OMfyqA7iTDxlIHOctp29XzeknEbdqjWSjnS2hJZsF/FF\n9ypVz6r6TyLgIHK5anFI5RvJ1sBjnL5B0zVgooxozGYqRsWKQaqeTZkG/ijt\npvV1Ox+zpI9kn7CpvET+0YbT91hNObdSrnER6Ah1rkrZWgfaRL9l3uzMGh9K\nIN9ZCUgBsm5zOq4z3PEIIGceklPStcz2WG9jidmttf4+ShrY1NEY90OR3oVR\nulbC\r\n=hmgL\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDxR3kNonwf3WItVCULULSAhY5LNw0mQj3YlOLPK2lOJwIgWadctO+ag4EnoWCT43H4NOupHyNNoeeR3zmZDIGfRSs="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.10-canary-2f2c1b4d.0_1638812709411_0.36393426147469277"},"_hasShrinkwrap":false},"2.7.10-canary-35604620.0":{"name":"graphql-language-service-server","version":"2.7.10-canary-35604620.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.1.1-canary-35604620.0","graphql-language-service-utils":"^2.7.1-canary-35604620.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"3560462011842ea8af6748c4033ceb8311d0d7ee","_id":"graphql-language-service-server@2.7.10-canary-35604620.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-BsFdwCQOcfPwLCUF9/IJ7cQXJOXb+lLIR0jZQ6dFUVA2APRnPO5EKR+zzS6xpGt+GlH+KpZ42CtmdmdAY+ExQg==","shasum":"c5696c7d91f5235b9ef3a05121b8c8ea3ac1da4b","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.10-canary-35604620.0.tgz","fileCount":93,"unpackedSize":431968,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhrk1ACRA9TVsSAnZWagAAY6YP/iGOb88Eca2JsWCr+BxN\nYEtd13wCKdc5+/TARL0hEzPGGjKD3OtmgOddWXC0gT2Z+DbpMQBIJng0GVf1\n3HpruU0OazjTO05HHOsGESgY5QhaZ45599XHI0DObg00T/eJ8QytibI8UOyR\nHJAYetymXcqAEPlvMJjkpKCQmp3YT+7fOiCuBFxjZwtDMhoDHRrlr94+wZzz\nhh+IucWOAWr1CtDCsr+ph2Hv/Iyz6wkpPmN1KHoQd48ftJIamzrnaDCe+gf2\nEidMz76V2UHrOvbPA2MxXbqHIIgGIU5EMKCPCFQvLI3e3743132Bfsqmop8I\nkIBoUE1DwlQUvrJKd0jHNpAvCS9t4qCdC3poAXXfgr9SnNnzKfwLxG4nlG1h\neoEwy1lNuaP80RkcHFhlnDjZkmeHZ75Sbitwixzsr/S3CxwM/B0tLhwvnSH5\n8Dmja+rbJq6hCA0tGlSgDCO6R9/YC/rKk8PzHM5LJvYIomc/T2rFyJ8Gi0xY\nACPKHkEEHxGi716UX9ylZ4Xlr+IcpVU09LvwZH60NIE6piSTByFe/iXXQvUQ\nPA/ihj8pk/uBwNaTo6dfNMWmB5DwqGLOVWXszyh+hFG1HbFc6cjjsQFHl6Vo\nqF1Ro6aWH9Hl6Ouug4aEf5hK8oHsS1EynZtdNvvhhc0HUjQtGiyqzoI+Er7x\nPPr+\r\n=SID2\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCVi4PITOGNDAja4862HytQiilWPooEylGiLpS4jiDQbwIhAJHe+zyp+gkBqK9AvEgR6I03wY29jWha2pilyJRIQJxA"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.10-canary-35604620.0_1638812991846_0.7748847603235376"},"_hasShrinkwrap":false},"2.7.10-canary-07a2840d.0":{"name":"graphql-language-service-server","version":"2.7.10-canary-07a2840d.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.1.1-canary-07a2840d.0","graphql-language-service-utils":"^2.7.1-canary-07a2840d.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"07a2840d2b89a1ad33d7d8d28039b58b44f504f4","_id":"graphql-language-service-server@2.7.10-canary-07a2840d.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-6JKTZBYeoSpepZ4LDPXHQ/nuR6KQPaogb0j2cY/o5AQaBYOkpIN9hst0buUouexoDV+hYTrNcNNQlUSKbTVx5A==","shasum":"e7090045cd7c1209b1299e8e4b0aa7135cd2e393","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.10-canary-07a2840d.0.tgz","fileCount":93,"unpackedSize":431968,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhrk3DCRA9TVsSAnZWagAARhAQAJZ02sKrWLk7XPPJEEPS\nQnShTJaDlMixnYVHq5o5zVwXLYY1N+cdWg7Ls7BRndCjN6niZYrTmIUEWfeN\nF2Qvpij5CDHQbT1IdUyEfS9d4U224b8pKOfdS++/8kEuvOXm9OkRnXTxZyZC\nDR5A/eYQ8fyy8SU0EnWGX12hPfZfHExu/x6bO02cO7aPafkK6Qx+KJBtpC2L\nfYI2E9k6d+TT8y+3cGoZVAatfro8FZ0oMI7bcfhVIkU7X+9WVITgwehEp5Gm\nC6yeiTu06ncEIZAUnLpAUsRaqEzZZ4o2fgH4wRP8/NwEY7dV76jURgstMAF7\n9t+yuJO3sCApOtZe4VGXCx3Z3VYVebDbW4x6QT7mJNTfsEWSi3rWigxo8NA5\nvL81C1yZaO0deZxjo9Im43b5HCZ9NH1F4RD0uA+ep7+3GmpERQoLCHY3OGNn\no/hO/7bRfTeutn5IahO0dAII+mcH4gDFpeGRYWiZmSUPzIvRs3TF0T9OlPQd\nrFCKbluEJNEUFMXbMpTB86a3pEPBZwShp+VjCwDv/tlRzsE4P820JBtPoPHk\nUZE7duphGxhjRI0b6Kzo2s65O7Cpsn6mjrKrBgC1dtJctc6iAvs/7Hax93Dz\nurl5G4wIz+Bk03cEdMrTvvFzlm70GRxGf0Djc0ygGo5ZuY6Jwq/ps7N6d9ZO\ntKFF\r\n=GZ7r\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDx2+Ea0NsigZTOHrwMkpKH5f3+xpHwa7faxbApNouGeAIgWMNo16d5ILzuaumy/Hug23USAQG3pKkV6hWggYyKgcs="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.10-canary-07a2840d.0_1638813123313_0.23284088870452346"},"_hasShrinkwrap":false},"2.7.10-canary-a19d0748.0":{"name":"graphql-language-service-server","version":"2.7.10-canary-a19d0748.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.1.1-canary-a19d0748.0","graphql-language-service-utils":"^2.7.1-canary-a19d0748.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"a19d0748cba5d5e923c33d1d315f85a1779feffa","_id":"graphql-language-service-server@2.7.10-canary-a19d0748.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-4lNtZL8airaKf5D6wCuwuGU2qI0/v3g+31cpQ56dLATv5GI06I1tu/r/a2GHU1GJTk4RXqxy9DaRlhwX72cenw==","shasum":"9a9cf8190518539752b709af741a77dcda80185b","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.10-canary-a19d0748.0.tgz","fileCount":93,"unpackedSize":431968,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhrk4TCRA9TVsSAnZWagAAGB4P/R4RoW7bDutSfKgvESNg\nvyRa2xfhIrJECT4Pn9p5lhrSwISU4/lmeA87Kad3skY/8WIBh9Ms4Fb28v37\nwbIMRwdhy7gPoXZxhY2tbZQYfa5I8/WPwv6aILDQfjs/aZCnVElCW/6EHxyA\nX1j9fYDPZ19jMuZUVIiUnE+CUzBm7kQVZvOl4eycj7UpwHVykt8Oe8cSY9O9\nymP25yybqXurPzCraCetwrP4uG1+xYFMqaVzVmcde9AKr94Z2tNqWJgWUmU9\nK9JgnkhkDyZ6Hr6oAPJ/Jf6ZONkwyt6VA9j18rE6aSltD/Z1Wi+I3MU3rtiN\nClWyZK1LJ6TFPZym2WmRIVVrxm661LiSlFonC9bbypmaZAbQTYBm3N7oo8ok\nJ2EHDlX7zRIccYFz1tTaMb/YXGYhMd7oZmJ1HzqFlHXLczxY1i9jziGrcCGV\nIipSNZP0ZZ55ZOTEIZgWoeEQr0suM8P0LVVvcIfY1C1wjjj4xYq2uUnnrd0z\nk3FgHBbVwHEbxoG1Ldl9a4aUzrbhirZ/L7kCuq6DFAMXUyVC6GJ7KA4yaTJI\nNvFYlh/BPFlXlmPzEmwcR2XxwU6et/WIJf+ztKfuuyUlNlPW373IXmsg6iQC\nTr+FICr8iYLXvEdqcZrDKYO8jSJhQJWNxlW1hXvPonRXNnvf8JURVJTCuKbO\nVVyB\r\n=dHaL\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCVSO6JgBnAUVoqi5E69IqPubJB5GwSIT+IPyWLLMuLmgIgf+QKNmtBO9lDsoSJnneeNBlzWFQXTvGl0591oeF0j/8="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.10-canary-a19d0748.0_1638813203279_0.7840275489256987"},"_hasShrinkwrap":false},"2.7.10-canary-166ffd7a.0":{"name":"graphql-language-service-server","version":"2.7.10-canary-166ffd7a.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.1.1-canary-166ffd7a.0","graphql-language-service-utils":"^2.7.1-canary-166ffd7a.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"166ffd7ae062f3f74469bc814bf821f2558e7ada","_id":"graphql-language-service-server@2.7.10-canary-166ffd7a.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-rgAaxMvowUyk82gcDlvKtYwiA55p4hwor0xN2UTke/NxrfFcLPNH4G5L5ozvOmTOyRYznphtI0SrQfCxyZ6Z3g==","shasum":"fffece1e20986416ccfea07f91f01a14ac335870","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.10-canary-166ffd7a.0.tgz","fileCount":93,"unpackedSize":431968,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhrlFOCRA9TVsSAnZWagAA4agP/RyawnSeC2LI3g1/2Z44\nZjo94LaDzGfu8jjuiWAfG9AbPO6+TytIalH2Cfbh4QJD/9jpU5qazUzdGEXp\nWAlYk1MWNg3W38ARwu2Z8ABJUdyRYsCo/KnZbwxwNzmswFjbzGF3rNd/YGpn\nv+Fb0RzDYnmi9A5b+2AJ9F8K8mZpkBzxzVz7JeqmOq0NQ9BsZ6Oo11AK+0fu\n7SwMDKiXvasMGYYZBvohFXyRqaQKpBdd1b34yvzCH7Vx8TqcehdVIL23siM3\n4oVg/OoGS1FeQHvhQvUeK10xj4401w/Uz0vV+rpsBuLLArB7KjcWrs1xPNDO\nTKUpSfXekceAPMHLZhp+nllGaHUHvH1Ak6EzXSGincRjFmSL3jtgkCGXM/IU\n9RRMySJqyuKWi5fvTbdMCZInKdaXQODPpD8DmbCshYkO3Aj74/Zo/hgGXGqn\nvmt4oMft1Jw/FeoXIko+AoH9aJU8OdtsXRk6Bffv4PIdLO/kZ0wTiKJPTc++\nqg8lXxpnu1PGj/qZSGQxwfosq5gM/vtxjPAECOddZwof5f/v6F3HRs217Adj\nm7ug8+LlCOCKYHMI8c3F0/V7P6AS/Pp6wySZdXsUg8EGFBxSjxSRywqAol5H\nltpkXe8r9rlEqh4joJkmJfq0ZyxQbtRmwd8zVJzrcS0XzItZUbV5hw8n/y2N\nEr55\r\n=7nY9\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCgNHCOCqgpo4GD6pqTJgnlK4wo33WC+QmdcqVV5NkHkAIhAPz4pbnJDCKG1+0Dmg6fbKCx+SZ983Uj19ddulcdnijQ"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.10-canary-166ffd7a.0_1638814030458_0.22622554916344395"},"_hasShrinkwrap":false},"2.7.10-canary-07e866d1.0":{"name":"graphql-language-service-server","version":"2.7.10-canary-07e866d1.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.1.1-canary-07e866d1.0","graphql-language-service-utils":"^2.7.1-canary-07e866d1.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"07e866d165b24e3bfaf94bd0112f8ecce3ae33dc","_id":"graphql-language-service-server@2.7.10-canary-07e866d1.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-kQ8yv7dCnXZEBFDH7juF3pq/hcWWoDy557QoNXwRajt08YLKq/gOhD2/LWh7kybg7GTUCFvOpDoG2/WiZQUMcA==","shasum":"512af48c75b9f6afd161fa2a8cf58881e1b8ee77","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.10-canary-07e866d1.0.tgz","fileCount":93,"unpackedSize":431968,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhrlLkCRA9TVsSAnZWagAAEHIP+QDi6DVaK6mbPbu0G+l1\nNTJfnvjyb5ECe50FU5OTNHeNJfZ884Zn7TsS9PbHmagiqQThs1Y/4ZlY5xth\noSli0h1pQ2oWwX6CZD6Bqt1j515fLcVWsGEg0eOY0xnqM8A+RBTGDFT0qMut\nYcBk81e3OxzYAb3gMP6agIz2MABUJepJFvzFZ5lromopj0A3gSvT8/1IF9eG\nnBrVs2VJOmMe7GBJ46AqfM5WjQFmNCRRokHkt+aBvUKTgbiU4jvvwf71AvCT\nt6t05cUKD6HGEe4xDSH+wEc+WYGbchteI+wilgRi4PW7Gxgq2DV2BJrleuw9\nRSia1/xsFpyto8oD/JLee1AgRPVpXszDp5yu3dlRw3m0D1hK2oRJUKZBHuKU\nG7oATkvrs4r+VaZ37XBjRTDTeRRWAdYAyoprW2JL5cijt6Nnb+tOvh2vvnd/\navVt7gIRnbP7v6/gUWe6QAIXatZEb63P3iYCLR49R6nKiz1Oh6eIr6L41C79\nv6sMQghgi+7jHvzWu5K/7cHCtpvoIYOFoZ5QYrCg+jNxvwNxxzHwuPdtGBaA\nNIaXoleTjaXL9wnnRLpGJL3z/8sCYo7A671eqge3AW6ir2mcYJadoURsRUFQ\nyhAwenS0l7xENnJX4RJt0q317xwM61YScmdG2azSiu7EqZ8EoQnuhbuRhr5e\ncM4K\r\n=ibmd\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICJnb7rxJQ7AAEQG667Owb6ZaYsOQAOF/Km4uatgiUyzAiEAnFHvavhBdS05aLQuW6Y9KDTwh8Sf4K7Davtw4mCntkE="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.10-canary-07e866d1.0_1638814436355_0.4737836209112021"},"_hasShrinkwrap":false},"2.7.10":{"name":"graphql-language-service-server","version":"2.7.10","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.1.1","graphql-language-service-utils":"^2.7.1","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"gitHead":"17374365511e9968e1ce647ca9105b28fec31803","_id":"graphql-language-service-server@2.7.10","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-fNadD8SCgtpiwEtY8KRiwm4pSlH3yxs3quwr9GYBW+M3VQ5X5ScEkR8MK5kP1eKkmMpFZ+nAR3bEcCmQKFLyrA==","shasum":"2369591a8d59c149ffb4c6a9e7cd4b7270c35b94","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.10.tgz","fileCount":93,"unpackedSize":431914,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhrlSQCRA9TVsSAnZWagAAvpsP/iN2wxGxFNgy9Y4xNtSG\njQ7V4GTUI8OBuKzCT1bKsrC96zb0/7yUZtV78xgEhjA+hijP5c32JdCWnqRH\nKOa5/MNht/itGl9LfeaLTiREktZnnoOl0uVNucmnecQlRS4HgqjC3T8FrjCV\nGMNhfJfHGtlJLc0w5UQERjfxTXecApSCG91i/kr+MqMou68VLXsVTZP3Lrv5\nQwuvbPDodMZm7xtWqN8gVO70J04aO/SarhN9VZyzvwaeWsGdYKzyDOqr0fj5\nfHfHoIpEGFenjwUVezsrYJJDqYi1wd0DmEMAAXJKjX2w3mbpYvgHllf15rUp\nfVBnueNunHm8fC+gia/BPBlddtBgEUqn8txQcfQBEuZzCj52RrgYu+GtjCKk\nlAKE0Oimjpsxh/tagl1utVizNgslKoNo/LYCFEGFaY7MeUp7Q4siX3piWiS8\nFohUOHVdhDVnBIWZzyqH+AtBz8fUwuJtes2H41wkv+YLGo/e+wPZxHTSRAG3\nFsh3h/Zvf5sHcHexEqVlqbHdIgKsvUJ9y6Vl+jZoHZonRfxzb5XNsOAnZGUO\nYkylkLUHL5CldNh3XtZ1wK5bvfunccymwt3GRbbIIQCzbcPprh2z5XpBF92B\naa9HFGucbo+hcHx/t4S+tCrFoK2HvAuqaRLcQfMcIxUhYZYA1W1BttdHFgxr\ndtMU\r\n=UN0Z\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDa1WYMcohQZgpixP+PM1FhHn82zWDO/kDs5VcaJIB3mAiBB//H9xwFcXlJZEpM02P5eIj0xI+a8Q4JupMQEoqFxFw=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.10_1638814864098_0.11228301444582023"},"_hasShrinkwrap":false},"2.7.11-canary-f20fe1e2.0":{"name":"graphql-language-service-server","version":"2.7.11-canary-f20fe1e2.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.1.2-canary-f20fe1e2.0","graphql-language-service-utils":"^2.7.2-canary-f20fe1e2.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"f20fe1e2a236409c509f73643776a53061d6d6da","_id":"graphql-language-service-server@2.7.11-canary-f20fe1e2.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-tAgDq00T8XxPCTq2XSRJ2l+UcjqbrlUVKazR7RNwscrek8GNrVI4BAlK6/RPAPUIoPTcWONnCiBy6r0C2OKUVQ==","shasum":"d8902e3a11e39d269a07ac7e74ccd62dc94ba2ed","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.11-canary-f20fe1e2.0.tgz","fileCount":93,"unpackedSize":431968,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhrlbgCRA9TVsSAnZWagAA+8oP+wYIraDPvlhKczv/etEZ\npANJXj5WOeDdLNxL1hB2TbAbXUTNqR6FL9GDfXwSg/abWqoB0B5KxId/4WV/\nxTGQP2a4UTLTylER+sCiSV3T4eLXPBIx64s7+7rYKFN5RBIX1TDFw/e7BJj8\n6z98Z+lVU3MDYn6CI2V75Otd7XVSnyeZthX5Hj09ZUFgO/QKqR9ZncZ99qdU\nDLlaue+/OKLL+Ka7zuFzl5mbiuqIVqo36JbVVYMcubEzDDjB1LZFmeNoukAh\nYCmTSlMSeZ8sALTRZow6zSq9iDfzc08Gqq4GJMb52kLsvJjAbPdJjTndV3Pv\na9DWp8xm8eE5v3sWeT1gt33vEOm9bWOmBaQTvPizMOuen4rrrSHfMMy66txU\nj75/7Wp+HG4P4N7cRzZJeVaMV0+qv8/0Ps80CVE/N9arNMYDAI/h9qv/rFPI\nFzBL0i57rOIXhXGBKWPigrr53XQneH/dsZjZ4wsLDu6wG1nkZuxjDC2KjTpU\n6pc+TRxp+OxeRt5LnrqfOer6SgvvfO5sEPVpIpHqKBOOp6qKm9T7Nu6SvNKb\nczDpISFOOmCHtKWWxY5FTsJ6Hwk8K1YnDUsuK+UqDGxKDH1ETSF0dA2DOT7N\nRne6uNro0x0tkRHVLNdSkgVrC/r74Vqx/z1qLhqE0/Dt3ybY7DGrYgD1gswW\n1A3u\r\n=ljQ5\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBnyfEr/ringHB1Vt/7qpqNNhfdwn+IaOtrwTdta9bwfAiA3qs94ks5stbKwk1EIEjz3fUXIoZ23M4o88pr4Rwqpnw=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.11-canary-f20fe1e2.0_1638815456158_0.9008613438056225"},"_hasShrinkwrap":false},"2.7.11-canary-75bdc860.0":{"name":"graphql-language-service-server","version":"2.7.11-canary-75bdc860.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.1.2-canary-75bdc860.0","graphql-language-service-utils":"^2.7.1","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"75bdc8607cc7cec3b99d3ef12c47c6c617be4f49","_id":"graphql-language-service-server@2.7.11-canary-75bdc860.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-RgvRfq0Q2C4/G+Cmg+yiScDt0TVHy93fNHaKVrGWaqNjUaumDTvHfKxbZPpgCwYBOll5TSm+mAOFin4snjcS0w==","shasum":"044567da638191ed707bfe8f77a7d9493fe79667","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.11-canary-75bdc860.0.tgz","fileCount":93,"unpackedSize":431950,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhr79UCRA9TVsSAnZWagAAm2YP/i5g7dpryn/HiW6BG92a\nUlWNLvgnhsXsUGdhc1xB5gRD9lJbPUsfsJ7l20plPmQWEqEj0L047ifRYEL/\nfbaJ/OydMRFUFOrSmIjtqZbM6pseIEro7M2plieXfxTwqNKZyIh1bJEScbp+\n/NJLjOLc+B8at4OBa2XLwZuV3qqrKy7DJU1jzigVa+conbR/iWiB+b6EUlDR\nszz5y6yC7A5jmtYHTaHcVVzvO9E4EDuNDy0/QQGd7kAR02kBxEl3+P17zhyu\nSHRfCCSF+oZHjmipR/b6he5HGSrdvouD4rC6iRC8M/6YBcMux3AY4+DovPbP\nqiT1h3/48lzemoAavtjyCBfPNR2U6twHFYhTRaQzeLPQ6BCi0+Ni4pjZJxV7\nvvwj6Zj4c6lJp7cxv8MJPnQAeHvaeWf2YuTzsyp0/Rtd0jHsO4uTkcx9WQUN\nMXxIgVMeFk6wtwEi7DqGXBSFGRkEbfYnFf6f4tmWAvBQAsegPMThR/K9TGf5\nGYpStZuFDiviHSYZQul1hywsClh7sd6R7cKNsKJ7pt2gmVh2Db95RxZMrmn8\nZsdRoWQ22NdJFKORB6UwPKTbWNM1Lr+9F1uN3CAQzIzZvRvLMJ6Pgt/XhQb1\n1pNB1zqZaKRAbzBXoek+LqAhCkRIwtWcfmPwTsKzhUwDQkFpsvid8UTPjm4h\nSFSy\r\n=d+QV\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDP6ICakoV59Kein5TELri0qQKD7IQsKI3+dkOWejaDcgIgGopPvuwF5zIA9ycDFwCJNTBNYZmXi852lTDbnsh298E="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.11-canary-75bdc860.0_1638907732403_0.5719580221138199"},"_hasShrinkwrap":false},"2.7.11-canary-5edec51e.0":{"name":"graphql-language-service-server","version":"2.7.11-canary-5edec51e.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.1.2-canary-5edec51e.0","graphql-language-service-utils":"^2.7.1","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"5edec51e732723db31287942e66a523de4c7b086","_id":"graphql-language-service-server@2.7.11-canary-5edec51e.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-UsxyyQteouLfXYDRHWU4F2dv9ptK/JzjVu+15YD2ZIsyYrNbeVsOgrWxsoU52I2VU65oj43LVNbFUBTXrOW4ow==","shasum":"89b668c5a8361c9cb2728f3e1383f6d0eac7fe49","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.11-canary-5edec51e.0.tgz","fileCount":93,"unpackedSize":431950,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhr8OWCRA9TVsSAnZWagAAShcP/0CZnwS0wGmA9OZiXMRL\nnWIBYyOeuGr3bGzmdl/4xE3mUB1/y7kGgA+F1YuipXtMtCNctn8DVuhAU3bh\nqMcTEqhPYGFJ3A75USJmSNc16jfAJv0PWVRl+yNPiBgAJZeuysiE8ZpyHpcR\n1Xo5gOeSGDbLwKcM9OJU1p9PdQzf5YPT2hlimlg/5JUGSLQhzcrCVmW1Lswv\n/EOi76r01Q/Wgj2extr8zVw1mTUxfubvKZCiuAj6pMNr+2441607xaBhgzbd\nghzRF4mGVcAJJJkPytqQonqyPAF+FDrkuNU1uM/46aN/U88AFM4VfGyyX0df\ncUAOXR0TSYJmhT6UIE8d8OHPDTEeMNz3EhR7eFmt28KmpnNpBfKjNyuuO0KJ\ncZE7h90UL1/7VsSE09HwbQr20QtHzFbfu6yx/C9UXy5LPjExg+lP1/f/XHK6\nV/z69UttNlH7UbNSLQaXyUaR+T3Ik5bmn97zjW5PMs0IJDLJr+n/b07VLLQ7\nfdRqYJLU1daPeFBC5vWQVQiHLHBcfn0F2yQ1l1LQa6Uwt2oISXW2c9rjGIfm\nYfgXWLsQra1xZJBXs+AOsvaCexPTws3OqCsaJfTKGnsxZmZj87Oj2e6jSxob\njgkR9/upFeG501j0QWljVHz7FIfElGRSsrncATCqDFsMXKJBkVQjKFAv3ygO\nR76b\r\n=mzF5\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHNv2uQ6wtyuxsjT+eLrHRce0Fm7PGEUuXh1YEfTu+h4AiEA+At4lWgfCzo+Akmlbp2Dgrz4dcRS3YNw/b1BREsif4Y="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.11-canary-5edec51e.0_1638908822587_0.7368265653553521"},"_hasShrinkwrap":false},"2.7.11":{"name":"graphql-language-service-server","version":"2.7.11","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.1.2","graphql-language-service-utils":"^2.7.1","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"gitHead":"56ac0a04372c991c568b45a75b01468202bc10c3","_id":"graphql-language-service-server@2.7.11","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-FOtCpsjkVlqkSPZabkYOVsvXuS3ufWMBWWPhgmiQ43TGVJaqWnKPx4JsPz+JxG56fPB3D7knxOKy+auyT5KWRg==","shasum":"09d2d33778108074050e0602e544f40a0256125e","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.11.tgz","fileCount":93,"unpackedSize":431914,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhr8WiCRA9TVsSAnZWagAAUlcP/0f643BpLXjHVcN1UtLN\n8P/Nv3ARSfsNa+03ekcqhputdF0l27cVipJvQuOUiIXlf56dQxEICUmtwKUE\n8rldTuS9CcD5maPTp0hRDKm+IC5rp4jgLjteTbQfyH2C6fmZpQhc/yYHD0eM\nj+nUV33RqrHQlvA++n5dDKFY+GczUuKxhBdYidTvU6h1Hhdzf0lKrWudvBP/\n+yF2tESjXVQxeSxaTx1wrJ7iwVehl/HeHRNu1KI2luA0wa3sQMwS3ae95Cln\n63cVD04+RJ1uZas0WQhIpVg0w9w2YAyNYD+FpJVlqjNlocDsx8r/ooSO98xN\nm2S7w3eFHVBpVZrppJX8DEut24X1KXwod862cTyeKC8ktNss700Vj+Gt3hcg\n8wbVvJZr7p9CE1gjhD1RBemIof2MFj2U+DFjZjS8V3OdoY6L9H83rP1MsMx6\nrHHXPnj/XYQkb1FbxYIIbMD06J/lYdI2PuwM6CBtf8g3+1HqkYFnUBP5Vu6f\niPm5SHRBcPoBjKJROIyWpji/EuoquinGXCnhMrTvF41gBLtqfapQREcn7ByL\nWr7GgDqgbOPIHLzty1InobQV1wrJnmn6yjW2Ds09FOV4PpLnQXe1YKqN27Pm\n4f0UPCPUrKjRoH2Idz1/hU5Kzrhkhu/hiZud4IskEoYEtVY02zBhMuO271nw\nSO/9\r\n=JyPw\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIENBnU8cbx+K/v+arfj9KbvnyTTXU0T8KmwubE2GswshAiAz2AbCEr4oLSswEIKobAU4GpNJ9FFRP1IdnVy5vtNV7A=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.11_1638909346204_0.9197857557775082"},"_hasShrinkwrap":false},"2.7.12-canary-312f863b.0":{"name":"graphql-language-service-server","version":"2.7.12-canary-312f863b.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.1.3-canary-312f863b.0","graphql-language-service-utils":"^2.7.1","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"312f863bcea025fd218ac7be6a89b8052c1c9064","_id":"graphql-language-service-server@2.7.12-canary-312f863b.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-05oPz7MRllbPiTyrnD3Wi8CmuQcVhSNnN38y4CZGloaWG/YSs/KPffjNernvE2A9WO+wAWcGOg435pNNggm2MQ==","shasum":"c86228fb72c7649e2df7bc9839ba2d617ff26e1a","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.12-canary-312f863b.0.tgz","fileCount":93,"unpackedSize":431950,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhr8qqCRA9TVsSAnZWagAAIEgP/0uvNCRF6B+sYEoGNeEI\nRM9tFNc/N0iWJNvnc1jH14CDpVPT1o87PpVk6Cr6joHUCYkDKqxkX7YRki4j\nlILPAGDX4gnI3t4kz8GUN+zYO0Rhnzwi1g6lAV9PX9V7VaopWoVblgHBRLqN\nEfDOQH3MJjLeSMLcyXFpn6mQ7gz271kCecuogI8lEt72RoM7PMas+FkEj55k\nXi3O3fm4sNhpGpCA81yVcfkND5WJfQgl1ysgJ1BUoAUAL+li2kXjY4KYNy6y\nP01hqh4nSUE8OidIZ+hNn2RQmk2z/gjnbI5Fk4KidUl+Cha+Ung92lSqHAEj\n+GsaQ2AS9sKg3mP9AG2MHqQVUmCSpOhxnhhMgk3FrWIdsX16Cwhze+VfDcxB\nJSrVJjiPeVZZQjji4TsaQtsf03OoEDm7v+xG07B/lEA0HyWz0dAhL92oXES0\nQb2UYjUnMi81S6nYfU3KD6Nij8Zk0yK4l6LYNAx9MyRuPc49HKP1JxnZ6+gz\niNY2Jb0gPHfywP0EkQ/7LPZ9wcgtjjHcznWGZfF0bmOezwMnZz3lCoM/KHRq\n6H9hJvgAajfev8g/Oakxzbj2x/gk4MfgbcTdKSbV+h50Xyahn0CZFS+fRls7\n4EZwkhwagJU2iTP95Ml/Ai+KmORgKTu+pCUxLWl/5mPvRVH6jZXWLg2hH3Jn\n19zl\r\n=oeNn\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDSSJtRogJAH4xdPJY+vkbhiwyARjlqtWb/lPT1ew8R7AiEAo//mIZTfA+xngcCEEBIwxEKe835FBn36MAq0kPo1WuM="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.12-canary-312f863b.0_1638910634545_0.21076905710704708"},"_hasShrinkwrap":false},"2.7.12-canary-b96f3d10.0":{"name":"graphql-language-service-server","version":"2.7.12-canary-b96f3d10.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.1.3-canary-b96f3d10.0","graphql-language-service-utils":"^2.7.1","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"b96f3d10a23d7a822467a84822facd72a8fa0200","_id":"graphql-language-service-server@2.7.12-canary-b96f3d10.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-OlY8G2gkNtyYdQoNN9g7gXN4mYBrgxcp/KDwMe7ifGnjEGoC+xEwdxHqz9VKIjzNovkykvV7fQr1UmW3kq1tOQ==","shasum":"2c3a34b79899527c69770567291acaf38340c161","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.12-canary-b96f3d10.0.tgz","fileCount":93,"unpackedSize":431950,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhr9VkCRA9TVsSAnZWagAAtQ0P/2ysgNOoEBkp34Uy1xCY\nyM7MH70vGzZ2X/nIo41qDGo/QhSq2ykjnrzTvz6SJ1PUeAMvXcbtLhRS+nex\nFux/YS+yrUztWeHFVBrYhnz78riico3K9G00nk7/gWZTcAkn5Iiwrpj/QzMR\nxpAZQM2Zu8Y6X3vKVXZa220goy6iaiRdWVSuUHNinLkRFRTX4VxT8P3xnhFG\nIfG9An6d9IiR+SHc1qRCUC3gkQvTJhMEpw7QtJAgDEtlaFJCIbxfcHYoM64r\nTMSoiLNbHRuTeLSWliO7UxyRQfPCawAEQIXMnEW5e3PovoK0cl3IgVO0TDAQ\nidaF36hh6tRuwRwjii5xyiy663TFpzpbqNmg+wZyMsD/dCPAu01Bsfi1hGpZ\nVb3drM+xgVhNM+VxSc8SYXNxf6OUe5Z1NDGrvINyqXuvmPlJz1gF/dWIi8xj\nJCsorYIirXSWRq/kNcYqBJ/3Ba2RAwj+2ZgyKgNvF2aGKCZNdZ8Cggh5DO9y\nD8qreDwXpFS/I4txjyt/JFPeLpvrPGIRwGaM5LJoaXYANYTkAki1eUHDz2t9\nuHIxlUuRvimjxJduWLeBKzhsOpWegtg+zd5HneG36Ja8cBmVGNK/nd+zJg7A\nBdHjLiWVQJxZwY5uB63xcPerIBJxUb3yNFwvYdMuedYsq6Q6w6gzWNfyLgDh\nzSIl\r\n=Gko7\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIG7CBlLFhF/AAucL7MGU7R5j7zcUnvtKDHzWQiYN0p0jAiBtFM0YSZ40zjnRsloccSx0Iu3ifPdCEA7qCqeDkUgssw=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.12-canary-b96f3d10.0_1638913380289_0.5088375252984261"},"_hasShrinkwrap":false},"2.7.12-canary-b8d145d7.0":{"name":"graphql-language-service-server","version":"2.7.12-canary-b8d145d7.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.1.3-canary-b8d145d7.0","graphql-language-service-utils":"^2.7.1","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"b8d145d7b3054518543f4b91abe45192348f61e8","_id":"graphql-language-service-server@2.7.12-canary-b8d145d7.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-F5FSXlEAS8KDnK2MTCwr3qnbCcrvCCAJJpgqGXnwCNnGRP8ljE1DzFm/89BnhUD34ECoBsqfELzHr6h5RxhD4Q==","shasum":"0c23e47eb1a31c9210d2b395fbe09e231fb81580","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.12-canary-b8d145d7.0.tgz","fileCount":93,"unpackedSize":431950,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhr9cpCRA9TVsSAnZWagAACoIP/3t0o/422YsOMVuinYrx\nAWYyceVeXZryj1E4Zw7EYmswzRFmS+fGas/h5/hVVQQOpYn4D3OskW9QT3cY\nzb8j9rLd2XlLct2e8sTelKnmZDg4L47lBUvetwPdadrisfK5IInp+7wM9lV0\n8scw9BJZvqVjT964D9fpmONY5m8k6xK7K8avOYNSbXY5LByYtr3r9iAa0qyl\niB2fc0DRdVyrTqjldwQAd7ne0eOS3UaoooxEJWjYc3JBrdy4UqfT00L4MIox\nJHin0EI6bxT9i77ggPTcOSiGu1dW4JQOWE3KTLW7Eqlmo1nvQRdAeaGYV0ya\nqIEab/RBc2WyCOQLIZQ+3UKZGwifVYYsSH6m3fXl4eM0QPw8rcryneKP+f3C\nqr6kZSYzQJgVXld75/wc4hkOM1WSdWAi53G1plzPeE4vnbZPRO/8gNFIW0kG\n9mjI+z4hwZI6RrDg1Ku7xswKkLuacZVzYw/Xrup79kdRpk6BrvdyjkZXEumP\ncVLh6Fg9rltGYILx0DOV2Dt0MXEFg5DF7LsBsZcBXMb4Qtka+VEVfSW6tKkG\nFOTXftmpIrUXlU+Irlykgw6D8wjs1+BrvQrsTBWHsP+MZcskMW+gBk7Idzw2\n9OkqNcx0vif6xwBMmy/CGh6ojHdiaYf5ilXxq100FGwrSMWHITUvFbOnVFBL\nyqrk\r\n=aDRS\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCyrcu96b330/kw3zjEfJaSzG67zBP2+XjH8t5qgvx1FAIhAM99vGT0CntTS9/Uoa62CzNTYMweUJUv5DmMPlDvJCYP"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.12-canary-b8d145d7.0_1638913833456_0.7903355374775627"},"_hasShrinkwrap":false},"2.7.12":{"name":"graphql-language-service-server","version":"2.7.12","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.1.3","graphql-language-service-utils":"^2.7.1","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"gitHead":"7d634f82d45f814c120a9dc8da3ebc85cae13b2c","_id":"graphql-language-service-server@2.7.12","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-1EN/JrtWSnu4DY5vGF2RJEzi3rJn/em7qmLXHuW7IaGM5FOXFgwJlI/VIklAejaS4S/WllXP34dfMWfAPdzrMg==","shasum":"afb0abfcad7dea6a4e3ee5b8f53df884bc30fd9b","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.12.tgz","fileCount":93,"unpackedSize":431914,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhr9jnCRA9TVsSAnZWagAA0toP/Akz+waYI7sRV0uiq6YU\nlR7mjKaArtB71SBE4m4ZD1O1J81VIjXLm0uI7h35hswHgOXyC3M/wGPaK0BJ\nsviPr7gvwPtUy18iykucg7kmc8tMPRTZzKY6z1y6tWbTgQX8HJgCNleFAcpC\nzU1LdIWYQDC0LfvxyEXfzy6Z1K66C3h5Jfnk6cGCSwmTiLuzXfEk2rvH++eQ\ny1uQDAWvfK2hjhbTdSJYWcndHCqAPhiJwsnQF28zfSJI2kFN9J8cdtme31lc\n/c6AYBkSU8VNKwRiaxuH71h7A/kHPWCQRQqqDEkF6eczwt9Kmmqu1s5Rve5/\nWGFgRT6K7Fz68yFdHMaG5/QLewrqQoAv8Int1oDlwaZauLq/votOh8QrOMr7\nk+4zht/dNCHhdcn117wiGc7zE3JAN6H+OtEbZHjIhRe2hykygudd7sFFugR7\n1VWxdlbyJGSKOoz1rdm+Qq7yM23s4uNoLXN+LYwbDGLiMVlhfomt4Mf38nGb\nZxsOncG0iTW31XU581zEyOKokOVhLaCAIiqkaxmgVudVKbnnzRtJa4u/8RWR\nEwhFJ4CQiCMGd0D0S4at6l48aWBW7xL1DCgRk6v5G1fg8NK6fOrO6DvA5b0O\nFO6mHRPkC7UpBd2WqVvZZ5C6+uteBR3wWmBiEIgF7bCzQpaGi0RNGHJl28ko\nHvjh\r\n=YFlN\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCN9QJz7CpdGDlBshXUhI+4VVFA8WnBrxbCP56uXcJNHQIhALtKUyR40r4QWec4FN8w5KP+OqV2pUVGU3R6sy/DG8j0"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.12_1638914279145_0.6949227215934259"},"_hasShrinkwrap":false},"2.7.13-canary-8383e03e.0":{"name":"graphql-language-service-server","version":"2.7.13-canary-8383e03e.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.16.0","@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.1.3","graphql-language-service-utils":"^2.7.1","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"8383e03e831786eecf207ded503f70231bf57176","_id":"graphql-language-service-server@2.7.13-canary-8383e03e.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-TPRvJCoo8HJICRfunKGQnfejUrUO1tP9KQ80YecL3MVyJeAjx4cjrmg8RgqWDqv0lFcPF9qEIBCV16eBYeDbrQ==","shasum":"16e24c9bbdf0cd814ea19db8020ad14094efb777","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.13-canary-8383e03e.0.tgz","fileCount":93,"unpackedSize":438405,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhsmokCRA9TVsSAnZWagAAE9IP/iJFob1lNa4jy5aXk2Kz\nVLFCpmjbnn7is4cJVM80V7btvBVF0GzHSePnREFSJSjOlXBpNNMb1t0s2JaA\nYVXXN7sa1CRQT6eLe6UMy/5J3fC6rm1gQzHRxiWznY13+I2sx0ts0h63/fZI\nW/F5zmdxVmpYUqb3SPbOURKzNhuNUq2ty4WTKoysoJ3nuNNF/XpBiMKp4YOQ\nNhTSvS9kaA7TSvLTyHMbwuCdeuoOWEErfueQ32+qFPl1D6DLZ/RT3xUH+PvT\nTglln5EJHQvIHOX1W8Yfs66wihsso20IfLxum6/6ub54uGmdgud7JwxyEs2h\nLbDEJ4xHo1h3XxnxqOvMbDoZNNIGpswMOJb3BQzDmhVNiECwi9MSLQLz0YB7\nPapIJl0k0pHMUbYkVvtuCs7KwcyiX7Ftu+xtC7CjwBhND37FkF+43Dp23XjQ\n7SvP/74WqyKIA6SDrtPhKtr/T92aXree+/psP8QoK/+NEMv3PqeRSVZeLoxW\nXMtJgoyTbkZETQSM8ux3yIMq46dmHY8F/kQt+YdorULCmFj9eq52b2099kTO\nHl/mDNp6HIWen/PbkxoJi7v0uYYF3K39DoWruW+bDfcRv7ZfNd4ZjP6B6Ds/\nup1xiiffCXko6oPycZCyr0LZ7u6/XOmWxTSy57biJawnB2vjptaWQSz0S3xY\nA92v\r\n=1DBQ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDig2IB3sc58tNz9f+8kwZ14D2qrS9Zs3z1iH7a9f7ZLgIhAPuW02kIojSZNnv9qfaLb59ZDdJCL0ajZrS6iuEHNx6C"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.13-canary-8383e03e.0_1639082532060_0.7593817926867268"},"_hasShrinkwrap":false},"2.7.13-canary-05e10ab8.0":{"name":"graphql-language-service-server","version":"2.7.13-canary-05e10ab8.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.16.0","@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.1.3","graphql-language-service-utils":"^2.7.1","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"05e10ab8bc15eaaaf9a8031d00cf244de67e1469","_id":"graphql-language-service-server@2.7.13-canary-05e10ab8.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-vp+FGw+0Mcdx8GPU2X1ep2MKHGvkVOxfQErfWwRgnlcxFkuhn8Ks3Y4Y+sTo+s2JYKj7Qaphc/MhsLTomIqOCg==","shasum":"65e42e894044a4802ec8fe81c5bf16f8a7ae7f7f","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.13-canary-05e10ab8.0.tgz","fileCount":93,"unpackedSize":438405,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhsm/RCRA9TVsSAnZWagAA2BsQAKFLG7ljmCo2Ti/Eoj4u\nJlJVAwbJUo/sVeSvjkh8wdF3plZxcd+NlIXpBgtUwpZph5xnEpCwsAP8+iLw\nUCZg6BaF63Mfj4dB+yuNgWwjH7bba4ljt019RyVIJ2emxUX5AvWVZgGWDIzw\nv2KhdeJF8SitUQ772v55dNFTLxJbRUspcFml+m1czTK9jz2dSbPWJCkJFakm\n7McgBUbr8gOdY+giLLRGXpbH4yEf7TLsdSJ5tKYInamcZ47mZUue/spDty9N\n9Cq3egWo5OZRxgTj2jP/3o/A/FwP5VIPRyN+ZJ4ykwt+Ju0dMwa3vsXbLu2L\nwPmd3LctBuNsrEHXF6cPEYNoWbLHvfz3PS7rrUigQFfIKjrwd5CqnkH/vCj6\nFCEa+MZJC3sDhEk8wfKD2LfMojdaUFP36mCj6ZY4PQZs2rzd+48BcdnnJ3vj\nSp3e6GElHTxTVmoGuu+/1kuEtZL5QhwNqwzPRRC6ufKjXgzh39vyH5pYctyj\n0MBDPX84ZH29tKYjjJX/KwFAwkMFeiHOgqSKnhYaYJXSxwgqxC1CVsvExyOI\nW1nwE48JNwG5fEtOR5v4d9/iAJZ4T2pMhCzJ+NMi02SsZfHb0Uhx3+upMbzw\n+cvp65WcHXkuuDEEqPlM0csBwE1jsmLhK5h91P50gU4ljAyupRNJMc+UVpxj\nOOUD\r\n=Mi/L\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIC4uZuCNHPR+n6ECPbHQuq/NSYmmX4kYvoI6MkkV9w/EAiEAqX/K93+Dbd2U90p7od/fgDPO4uYFeoHhrbzCVFdulow="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.13-canary-05e10ab8.0_1639083985095_0.7121798210480619"},"_hasShrinkwrap":false},"2.7.13-canary-bf97503d.0":{"name":"graphql-language-service-server","version":"2.7.13-canary-bf97503d.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.16.0","@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.1.3","graphql-language-service-utils":"^2.7.1","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"bf97503d1a1fa45e1e8285c84ad3d6d5403f1913","_id":"graphql-language-service-server@2.7.13-canary-bf97503d.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-XvDf8fmdCgsW6zZgFQV26no8DeyZUWqOp6eteaUxuvWcpQwD6kFKtlpgkqcCigjcLSTOZH6mnPYZ2q+WltFl8A==","shasum":"dc0049a373af93c50b8db3adc95cda5e65bb81cd","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.13-canary-bf97503d.0.tgz","fileCount":93,"unpackedSize":439058,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhsnLTCRA9TVsSAnZWagAAqngP/RAuBXBqexym0/8Fa3wJ\nFk2rxGx4yh8VNJCzJwuo4aQPORJ5j6D/+vnWOyRc8GzApgjjF3yv3Ssxb0Nw\ngCFSz8ksaZPUU7CYDA4cZL0+l9MAyDHzlp8lfpPQqZxFsu77Ac0cVhH4RdcM\njHx8o5A2iBITxMi3I3N0Po+MQD6zoPS7aKvDotlc5JB1Y4Ep0mMMtEJhhWB+\nFCN2ALX3J1iqN8aLzRwwN9IoBMIEk7SCb16ooOoUfxAa0np1ECgDW+Zb/+lu\n7EsjY8KK8HmvZay85BWUz3NC73n8jipZ4WNvDjIaKUVaJnr3aUUjJOaIjQu2\nS8tzA9k8pN8iOaafU0zR6A5XHtnHy2K+i9C3PXTuzhbWmCZVrLqPhwlyjb28\nkicjajpv1L6659S4JXkFCYFEeOsMbOkSrEeoKhc6ggI343LxtmPi5ZPJ4kgU\nmdC1svsZ3ra0gMgxxbp1Bb8tjH99fbCwv2tGgBAQOJ7jtYCBDvx7AI0X6Msc\nXruQMsWSZ0/zJqXKmCbh/GPuZIdBeM4pvGYfuS2mY5drUCUFGA0GQolZhmXh\nay+j1hS5Y+ux9hbP/8aAoDRE8rRNkQtF87Gmi2NWxMBJNCzBKo1tkvLEWq4q\ngx4XmxBl0haZKKzfMqjjUq2fdK/gOLjJ5mPWbiizt7lNlej01OmjHEc/ELI/\nt47G\r\n=1Isg\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIAyfxHUErWUSQliwaAnLstQvrQ3JND3mKg+ph8COWL1FAiBIMYn4IfQUFC1Epo9OAhdrdWL6CWrs1m82Nq7IvlanjA=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.13-canary-bf97503d.0_1639084755361_0.3572616417014087"},"_hasShrinkwrap":false},"2.7.13-canary-05b863ab.0":{"name":"graphql-language-service-server","version":"2.7.13-canary-05b863ab.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.1.4-canary-05b863ab.0","graphql-language-service-utils":"^2.7.1","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"05b863ab30c3e8bacd2a9369ec786cb162a284bd","_id":"graphql-language-service-server@2.7.13-canary-05b863ab.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-uL2AmYx61wL0OyBbRiPZyFhhKbSs+hLNCKPbAFRjEXTNiG+NTC6ESedwqe/fvXoDtILNzc38Wvhj01/5/8zoUw==","shasum":"84fc39758b15b66dc7494da0d7ebbbd4f2c196ac","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.13-canary-05b863ab.0.tgz","fileCount":93,"unpackedSize":431950,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhsnp9CRA9TVsSAnZWagAAyqsP/jMuNrdvsztEKySvtWlz\nIv08NoiISXZDt6bVvZQ+9yveTx9pD2kLB3MAU0OiSbKmCJzpBVYH8T4RGpKx\nB0lYMNPFiXAwt+hzKKiZV112mzE8kN+vui7HudKXGfsbt7aCqAH3XaZOts/Z\nxFHD3LjV44yoW4ywbkHg8+q1M+wi3xGTSugPsLYiGvlFSys273Pd1TnQWhrk\nmD2CtjMj4Zz231UjAEBsLH/EbXORiwRTRHx4tyjAoC+USIRDMCUF3R7UmRoo\nRNNLdZYTQVu2WGjEm+VopdAI2b1Pt+yc9YN/1tVKwC3s8cM97q70gOiooNic\negLP8SS6Eskwow0uHbzx5Umu/cSVCTD2fu3znbpesxw/SsnKRLYQbPHjKyL+\nOU3i2wAnPMJuT1S8r+O/xoORS+ZzudS8VhjWI4w3db8P9vw7+Tpj3uQV30s3\nC8cNFgGlHXlXsagUts+ipi1V67U9XMwapOAtOQ8Ec/AZDF7TQXn7xcYr9n7L\ncNDjNh/3aJY/0Um3zvHZM+9Ac9LwYtd7k/BYQAX81Dpc/4Ihq0JqhUbTUkqE\nVS6s6U9YAj8F0b1lOmVPRBn034S39RDvYVfTX068TcCaAM8rbudQBXSLzNUH\nKi4yStFDkRGhepIHl/9Z2gtTOScwZSDGguwHkF1NY0zLan+miZUafBkKg9Jr\nDhtq\r\n=L5T7\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDo3LhmKnxzzxi9zvlH+IQ5Q8YmEGjqQoeg6Fs+ygxL+wIhAP4K2RqfK7fnJWyhPkkDIVbx1aTVCZCajj8u7lqe3sTD"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.13-canary-05b863ab.0_1639086717046_0.5098904385023222"},"_hasShrinkwrap":false},"2.7.13":{"name":"graphql-language-service-server","version":"2.7.13","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.16.0","@babel/parser":"^7.13.13","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.1.4","graphql-language-service-utils":"^2.7.1","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"gitHead":"e3e6154171606ff3aa872a0ee22b6192b5b498cf","_id":"graphql-language-service-server@2.7.13","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-VNvkJQVdOSKKVqgrQ7mF6fKbU3YZJ2NoQ/CuzPBX2LR8+qKJzzPFtImBvZDXllM/lMip6hH2ChHNW4aJcNVu2g==","shasum":"beb6cecfce5634c4796873c19b8e65b234a779ab","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.13.tgz","fileCount":93,"unpackedSize":439040,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhsn0oCRA9TVsSAnZWagAAjRoP/i99nMxYW59gYSZ/bzeb\n/cJZhE9JhKKI9ozWA2biTSuhv+aeWI/bjhqMFgGVpspvebhzpUW4beUdIS4t\nZ9p5dJbWbCW+GyYo0XFg2BudfEZla/eGV4UL5ntel3pIhl5X3mMJ92BTFMIN\nGjj0xtHYi3Qxh/TqSTzU3013WEQXQhO7T3lP7B0XvFSMExQgKF2f9HPoaeKM\nnz504szwOAdrUlOcjKLoIbPSeEXhAQc/6PG5SudGiqIeJSZcnLwvWRVLXjEX\nHtTXT1rQMpBWJ4FpYO85TCJyW3DqSTW9aL6Y/5em6f65O0cRN6NwymUUm+mK\nLLAV1OzXTdnFM9uOq7GF/EfoFLoY0zn4whl2IK/v8QvKhJsTbUlQS5lQt91K\nYW7kXLOJPry00UVfO0CpxBkFR3fydGKpWjIkaQFYFnN7dvBHuFVllQpn1aUt\ns3H5H+Lg/3wNm7k8vO6KN1oHCHrV4jr7c+qDb0y3Z9E82j6PGF4sCbqVetfe\niGYxjBjlmeWBXfu73HlYlQWYbQfUeDFV0MIHJJpdyQxT3Yz78pCcxlP2Qzk0\nQ5yS6MhXxLximOE9NeQq1MC0oFhHHIo9qFU4qEZeQZSC3Om6PsZmPFuyfd4i\nXEPIZ9SjvsSJhpPb/f2ainAmyJv0StjiWyU93QYEJCiyb/x7IBPjb57tuw8q\no4de\r\n=TmZU\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD+cdkXRVdRw2RldQ3rz+bwTeyDEYNTPiCcXF7xqMZqHQIgdy9FAf14P4/Z0V8qmugY+nkHZjj/TpZ9sOEyT5AUzuQ="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.13_1639087400506_0.34360517168143034"},"_hasShrinkwrap":false},"2.7.14":{"name":"graphql-language-service-server","version":"2.7.14","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.1.5","graphql-language-service-utils":"^2.7.1","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"gitHead":"d9b4cec38487ea67dff1a67400f3c0ba85951ae2","_id":"graphql-language-service-server@2.7.14","_nodeVersion":"16.14.0","_npmVersion":"8.3.1","dist":{"integrity":"sha512-kn6P5TJE2DFVLbccKZlL/Y72/+MlvAA8tgmkdDP59vNpn9Z3fGLI07FBlXtWUCKug8rZKuREeqWHSeMBcRuN8Q==","shasum":"b87bfff57f5447ae6b031068f1417fa0dde791a9","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.14.tgz","fileCount":93,"unpackedSize":441852,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiEABDACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmp8RA//fF3bFmxHRL4OC+lns+0X4L+yxxceTRQcrEspnVdoZqEqHwIT\r\nNREFaZq7F4U6Eer17aloxMG2QK7LbH8XmL65CL0RlnnmIi20uueirydXcSS5\r\n+tnz2gYiKuy3mq2ntsMX0Qo/W/rKuRJTzvjfX19f7CywuLXUPz45eQoQOfj7\r\nsN+jZ89tSCPikK4jLSdb5U2Cce5HYDLKgtUHZ5ZUUydcBY1otU+ZmK0GRv39\r\nNvxYzQcqNkLRvImaC8nncSkAYSIriRfHAMp8YwuPecqgABC9Avb3QqmeW60z\r\n8BdCu8xIbQD6m/9tQz7OmbRc+sAZs+vN52xBF+4FLXmYZh/jmr4KFydorq9F\r\nXOa8V+Q7r99UTJP7ddXPD8R9mRCn2BtScQGcWBd7RAhhSOWQPe/O9xPnCC/z\r\nkbArYKKi/R4tRBv6S+b2JzttT2vZcx4LYcviPfgyvV3ilJ4vi8zNVKNbPgDp\r\nmPDFMiFqmEhslJsEq55bvT1VzkrZUxacy1Bfn4hGNizTXEbIlv22uhZAwJQF\r\nmWFVG4XhI1V7oSsuM6FNSYEk19ru5pp+ipd684TTpP29/q2OA85Ic74NKGZ+\r\n/4uCsmFHveScZFLLLX1ZOA1Df5L8VsfG+f71M95DSSejHwCr5JB7ers/wfS7\r\nM1xDyQFelwH9fBydTAfj4AEba7OV38jSFbs=\r\n=zRid\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGeOEG8pf7dFgGqPlEO1G3UvTR0o+bSEO/jfVidvRFGgAiBwbetWxHmo+a/xGzF6j5H15GiXKhIBGK+kmn1NO8a7Og=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.14_1645215810947_0.9109190837122434"},"_hasShrinkwrap":false},"2.7.15":{"name":"graphql-language-service-server","version":"2.7.15","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^4.1.5","graphql-language-service-utils":"^2.7.1","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3"},"gitHead":"a352fdd5d5cfb1ee981529832d89d6c8f242b164","_id":"graphql-language-service-server@2.7.15","_nodeVersion":"16.14.0","_npmVersion":"8.3.1","dist":{"integrity":"sha512-iM+tYJ+lJAlU6UDhPUqezIDWIzgTSwYVpAlERw1LRv4HM7GIUlzx5bqPjxQf5o8zCYrctexkcy3bnmHcTxhfpQ==","shasum":"c9d4cfcfebf329da61b1c42d2628b55b8e5f79ee","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.15.tgz","fileCount":93,"unpackedSize":441837,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiJ0uQACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpgnBAAjjhp5E8n7wHoZmYkUe6/lejm/R+yd4iEf01GqvyPFGagHWwM\r\nAPAU5q4qI/vjx+PnpBuI1EdobWLyOy5Bj4AHWhtyyTnFUQSXW7I0PeL6Pvx0\r\ndk7oy8ViWgYq6q7fZFgp4kXveiF2bfA+6V4ao7ke0EsKnUBRrxP15o/RjIb1\r\nHLRzxcBDr3hgZNLWHCSblPsXknJSzmBWt408IycvP6uO6Xibd38HnD1z7hUk\r\nVFIu5SoW5msw5o1IY7nlOvgPorSzJtDHV1GGBkkl8zW8TDZHXCnrqiT5TZgI\r\nSaMQIu+Ck+XK52mVWaREGLq86VJuz75i0r7YsE0z0YLpO42SP6F9q70w9Anc\r\nZLfuQtA1kycEOPjnp4AX0qDWl1zzo8tLPPoL1Jot+JNgTd2LDblVFFZko7P/\r\n9K7DLbgNlJWXN+CWla7xhvjxyqPBh1PZ6ZF+/gkj7uwfgS+3OkWwYPLnt8tE\r\ndu5Rm9JirCQ2Jg7EChiQVJb9z2rmMZF1LpUf2WrZzomjD2HdSFwma2WiSSGE\r\nn6gPR0weBPV3+DYyCqitn0yVr+nkd3uRg30zk5QYJU2IMd6WMqeOqYsGDtxk\r\nfbvsMltkm3eg3ynu86fJiRpu0jidCJKdIENMrQ9lVBfEGAjtU7UX1QqJz2TW\r\nG3t4wwFmF1ELbUNKVGo3FW2kQo4GoNK+6lI=\r\n=EQx/\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCYkdhp1ZeQFDqYM7XGYoWSLNs4UtSrTOf7ct7Y51XLUQIhAKJomaJu9fUrTyBivp6cRoxgeEh6ysItJMO2MjxDyNzK"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.15_1646742416534_0.5078371798851118"},"_hasShrinkwrap":false},"2.7.16-canary-8fa698e7.0":{"name":"graphql-language-service-server","version":"2.7.16-canary-8fa698e7.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^5.0.0-canary-8fa698e7.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3","vscode-languageserver-types":"^3.15.1"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"8fa698e7982b60a4befe4345669e3f707d949ccb","_id":"graphql-language-service-server@2.7.16-canary-8fa698e7.0","_nodeVersion":"16.14.0","_npmVersion":"8.3.1","dist":{"integrity":"sha512-o4OCwL88p+0bGO/0jBW45NdDEIe68vbN3jmrPHWfI2A0rkB18m14I8LSVVP8PSrDiqPaI9DQCfGvaM0RNiA2bQ==","shasum":"2c27aaba451441520fcba2f35145f810face2d33","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.16-canary-8fa698e7.0.tgz","fileCount":103,"unpackedSize":500008,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiJ1ZxACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpXIg/9Hbh7F6N5PbSqAIow9sVoPmeqi9F4t6yfI6JyWmcW+qW0hr4h\r\nXSe2Kl/RaF3JyyjBzgqyA1dd77tt1PzQY6OootaEAWuJqyJ4PwOQmlOm+cVg\r\nkwZLHh8trkRfwI6DkKXRwkK0JjhwXdFbbO+9HR4fO+OwA2eIy4+jc3WB7lzh\r\nNpYquMCFunqwdxE4OJ678L32E2E4FLmeFcIV8P0ajslIj4ILB0TfjkvqdjDR\r\nB0WRK4wZWljWaNMaJvFWCVuwNtS7hJEp0bRpNFH5zpc/NlXWo4bVN5VzyP1o\r\nLesihtNk/pkrZxI2m2FOFz0WjDSRlIscaw4aqN2nKiwP1EfOVB+WyXgs0Jbc\r\n4ADJV/b7D0fWnBT93GRy+xncOe4LzusLo5cK4r1nSQyezkmZPtTOCDeHqx3v\r\nHp6KtVp9l7GksvwgPn2YXmzGaPiqwHoPNTdnnB7MdTsAq1TCQgTuVlQFFs2X\r\nIryol6FRiIY96iFSN4oTcyntZoiBT+WA1EtvHlMXWF0xEqSdCYMPHcCyvO/V\r\ny64agQDhcbFkZZEwESZcvbnM+pW3Tm9+F/NGSzcO1dM9p3tDLCg8ptePe0hN\r\n5wdNhoGabnEcZHxmghWay86HEL/yCZRvbFO5qHWJ6VjAIy+QG3GC7Ptm+TEy\r\nT/zj0Lg3jlGcOIPd5PMtRP0dO87xcttd2vA=\r\n=z89J\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCkZZawdHusZOIdSGuodvB52zmjRqsW3udo2vLq4z2h5gIhAI7ZcwXuSpUt3RdavJ1NTLb6NZcBu3UEuuSorXDOYtDJ"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.16-canary-8fa698e7.0_1646745200926_0.6016481192551237"},"_hasShrinkwrap":false},"2.7.16":{"name":"graphql-language-service-server","version":"2.7.16","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^5.0.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3","vscode-languageserver-types":"^3.15.1"},"gitHead":"8edb4e925d457722e4158c47e2c300b22b6aa16b","_id":"graphql-language-service-server@2.7.16","_nodeVersion":"16.14.0","_npmVersion":"8.3.1","dist":{"integrity":"sha512-NyLIJ2GGJzClPvt8XMW0ik8s83CjCnJXhGNCAdsB45lH7ISpLLgfsDbPzC6McQMt31W74QCk390soi1ARViqBw==","shasum":"f430cb13218f78e0adfbca964b21908851a696be","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.16.tgz","fileCount":103,"unpackedSize":499973,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiKzXHACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoCixAAlG1OWhS1kDDaUhNdG4AmrkEyd9SGThk1XJHPNjPBmfsJ8nTS\r\niHKmmumF3552aI9fxGpa12Q2s9VjL2RLFhQyoLMOrUS+8Q+eJPEQoRsMIJtb\r\nR+TipuiW4uceulaoz1mTYTjex8MZuS+pTHeerhI81vkcZvS8jO5G6/SWieh2\r\nm4hLeW0/wzpsuiVAlRpYsv0z2OWvtv9YR35GxjjwwjZhV4Z2B13TkE3GEkE8\r\n3iSntrkLdpUV3MVHBmmfm7E+o0l4tbEIhR8hLugr9IsXJ/WDz8cyus66Lx4X\r\nzxEl8uBMAVL0TcVOyeB7YP4RieU+91sbc2T6L69h1bysMENygWCuqpJ4AZhd\r\nxiab+c8aEIvbZi0cJScUzKUmfru9qQG7BJFs6qBzp7M1cTwNQeQoO3qycQ69\r\nWpOtVDMFFUysaND1+nrBAX+mvCUcnGjX2IqdgYl168Sq1N9ku6SQd+310qwr\r\nXhtj2oh46ItRutWBVpEu/0Efs6KG2iDOnl+O6piJQoZm1Vj7tPTyVoG1OdXW\r\n0FYLriBmsWgrOGxpBPGO3ctuFm5k/F4N7qwy6AaKN9k7uzo3MjrjbpsVHLe2\r\neaFF1YZ/w+lOrO5sXFIs2+Gzlg12enzRgu9TAMt/4qygP1nh3GismU0M/ogm\r\nXhp+8kQG9hT0z1p+x6ZxmmvKUKVtY+Lpn5U=\r\n=0aFc\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDExUJYZF63q1gb0ZSBtgDw+jnhd0WGj0RnwNUJd966SQIhALcZmXaRMBFWIT7msfkwb285WpyZgJlyv0PEiVZqXVz8"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.16_1646998983645_0.7668887931862429"},"_hasShrinkwrap":false},"2.7.17-canary-9e6d341c.0":{"name":"graphql-language-service-server","version":"2.7.17-canary-9e6d341c.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^5.0.1-canary-9e6d341c.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3","vscode-languageserver-types":"^3.15.1"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"9e6d341c57015824b69f61fda32f907587618bf7","_id":"graphql-language-service-server@2.7.17-canary-9e6d341c.0","_nodeVersion":"16.14.0","_npmVersion":"8.3.1","dist":{"integrity":"sha512-n7x1Bn4xmIS8vnHmU2YxlazIXZmGLb2SJJ+ee76cyFVQcJwcTiKsJBpPwsOGGMwvfa1Z8LG4KabnG/5soLXbfA==","shasum":"896eb14c8af0f98a815e507c32fdc30fd5f5f935","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.17-canary-9e6d341c.0.tgz","fileCount":103,"unpackedSize":500009,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiNcLAACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpLBA/7BF4q0yuQpnhJgoyKU06goAjyNIZslrQyjGijGqJqgPzadLqS\r\nzrehqR20cbk9VTSeIeMzwMJB3SdIgoP/KHLM35rlPR2NnSbZ8KH6iYQEVoG9\r\nLDEghMMD6AoNHX1PixCXmGO+K9lCju6NfWQcwuXrzVMfsa0Zcz2UFVpuCsmS\r\n7kVAzgUCkTYFDjzAGFg0+YmU2UkWlJ5amcME4S6hdXTltzyrtuqOvk+Nrn/d\r\nWa0gs4MW5Ijxt+30nvoPhHIhxitWKResz2GEnchL6I/0QnGXFWSV3LOi0AeB\r\nfFrNxf2Ze1u3wPwxA5OPqjBGPmn03XBuqRYzCbAwkr7Ucaz0tUY/JdWUjrZW\r\nBbpV5WowJInR3KS6EOZMboA3Y6dC+3OHHREAYB7gMH1ykgI1GcBEWpGht9XR\r\nKRqDPCcPEh+DVx3ZZZnWUHgcvbdOKS9Q7zwdye5zMlAUhI5L9Dr+mHZ+4uhO\r\njWbM25qvuul5rZnopGNrnlIW9yHFmmD15StJDBf23RyM02YiBZMUcvwmSxhx\r\nthAEKN+JVG4Ccl/90UmqpzWPymGMCQYRqonqERtMgzHbo4EjfOx11sy0+CSx\r\nEtPNzZk4lhxfnxs3TOAs6/ZR5pcbh1YdseTM3iAWMf9yVq48CGR9QlKTGxJ/\r\n0mgSKz+SZQVwUxmSAMEHVKmLWA9v3hHzCEQ=\r\n=YCbA\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDjvDPGOKpceEG/HoSl0VgrX/WvF3/5LjcUYFLUenXkcQIhAPIrZEUbiVhNPTiZNJ4FzShPuhRbUYQTBE1SmV5L4QJN"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.17-canary-9e6d341c.0_1647690432551_0.1630333885190527"},"_hasShrinkwrap":false},"2.7.17":{"name":"graphql-language-service-server","version":"2.7.17","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^5.0.1","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3","vscode-languageserver-types":"^3.15.1"},"gitHead":"4686971393dbd226a59e4771cd69301598e5bee1","_id":"graphql-language-service-server@2.7.17","_nodeVersion":"16.14.0","_npmVersion":"8.3.1","dist":{"integrity":"sha512-SuOy76XImlvUq0NbtJL6L645CUN2MXBQjsRg1KybBVVXDdyI8VEaTIKGRH8RUiEcDhFoV2nEZRrs4HDYMR1Ttg==","shasum":"b342f97190cc7e88fdc3221eaa6e511494da4343","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.17.tgz","fileCount":103,"unpackedSize":499973,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiO0XEACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmprLw/9HpI52e1ZANn+gk1DlwN41juXOzcyNMCtA0swxdgM40WKWckK\r\nq0n3J2L4BgWVa5cq6jIleA2KPVH/4KYjBtYGL/FsFa5AG/Ag+4ipsd0p7sMV\r\nrycc/iQBe+uo01R+PnDga3KcYJf51gwAMNcPI/TL5aCUKOKpqWxXV7uVsnl1\r\nG0KRFpfpHuqHmzU81Ay7PkiH/kDp58nQBdLcow3uSXakUZ3e4jdwmtDlI27f\r\ndSTmGBQ26TbvZXpfZCce/4ILqLoWmRxDmVClMr/JLzvUU3MLvP1RX0Vzk7lo\r\nXNDNg+sPz6GR4ZtM5oQUGDRGFEndVHI8DXDKkhMJT1dgjLM9yaHzy7MEo0mt\r\nOJaB7BLiWvyphCYZ7rP+ct7zgccGihHGewDd47sZmQhbFdO38bWPYduBriKL\r\nUc9KDVDKUmqQU7LKYZ7e7PvsWyML5vWibD/5PH504CbsdyMrOvajMlVViJ30\r\n5am56EyKh2B6td6zpFgX27Ye1ZfSHWeUkz1wBy3ws5DlVkq4W8ResMS2vl0B\r\nySDIpjb7NgsmYM6QmtrHLsYU+A67MkrMtdbKyBZQXSP20Px+iZnkk/ZAV3Sb\r\nTNVvagDdE52bSEzE/hSQjYbKivJnhi3nbW1XRGEYReY4Sk7gLT9Oinvsn2NI\r\nWLUhMv8+vV+rczhAj1yaYy7froILj+Vycjk=\r\n=FK8y\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDX+xp5lwPX79P4lqxfkaHuiwT/ZLClKM37eRK6qnVnlAiA9ouku9vQemlmfaV9+EnrjbJjhxJTBDo/NK8qO3kTKPQ=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.17_1648051652108_0.8982244059776103"},"_hasShrinkwrap":false},"2.7.18-canary-a7362f99.0":{"name":"graphql-language-service-server","version":"2.7.18-canary-a7362f99.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^5.0.1","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3","vscode-languageserver-types":"^3.15.1"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"a7362f997fc469ef510b42601eb72f15701046d3","_id":"graphql-language-service-server@2.7.18-canary-a7362f99.0","_nodeVersion":"16.14.2","_npmVersion":"8.5.0","dist":{"integrity":"sha512-73XJ7fyduCnwH9FVfp3mcthywieQb735W9QqA6M9CEpENAP3MTTzpwJFjRBMx/PQxk6tvM//+3dV1VkzeYP+4Q==","shasum":"29dddaa52d8c82016be8e29aefa1befbab6b21b5","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.18-canary-a7362f99.0.tgz","fileCount":103,"unpackedSize":500733,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCdvGtHJjvQ7k/REs0+47M256WS7QI9imyIBzjIalxNkwIhAOEYFZTmna3ed7xpAYvKQUQmwfm19QQv+4am5haImeUy"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiSAbmACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqpLBAAojR+qjJ4VwIN50YEBq60kYZj4qEYXywa/hVkWLF8A/b0rcjm\r\nUdzukT26S3pybnUXmGmUwhXL+bzoQgCX9SALPkI3ybPWdHA46p3mdDGWsovq\r\nWwDgivpLAXsxXjBp5GOMCKAFxcd0APqGJs4P3/j9YDf3x4z8oQFOKssHu5YF\r\nOg0aZsJMjShTbu2S/5LcyPu9stWe6u3U+zEUhMmQoiz1Qyx/u0dceLhU6Ej/\r\n4RhIwJPxnr20eWcMeZvSxISgNE83NOjP7cL/gR9TrnND/Olnnc89SaxBkc+G\r\nIUB1ytxDqcLqnsU1jFfaZhG6ACI+aEjt/TWZf0O41zkASaVKLRtpc1qZNmms\r\ntliYDW3DW9oNKrBvGt3K6lJ1Qje/6+FIRk+Cj3RUkWqRt96gvS6eIW7S5y20\r\n36KpmBBvGlSxtFfNKI9gjHyYUk8TXiQn2/39Zw0JCDBlSk/QeQ75wwQbWdtS\r\n65C+BIDRq2dTV3c0l7YnzyJSyp/5XGGB9/ULiapn+Z4XEEQ/n0OcXuSuRZ7a\r\nsaAec8tGqoV/stVCwCHgKR5Z4liY5NmfLCLAssYB856ivFTDQpm0k33CNYwN\r\nDvuYICRk7812IKlelKS2aGNM2Kf5Phbj+Hk9WWb1Dv28ktsivtkp1ROFs1v7\r\n42D9b61TZRX+a23GyCCt+QuG6rQEOsmQPXg=\r\n=nkFG\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.18-canary-a7362f99.0_1648887525813_0.18731531514249333"},"_hasShrinkwrap":false},"2.7.18-canary-5991895d.0":{"name":"graphql-language-service-server","version":"2.7.18-canary-5991895d.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^5.0.1","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3","vscode-languageserver-types":"^3.15.1"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"5991895d0e46935f6b76d243447154cab786856b","_id":"graphql-language-service-server@2.7.18-canary-5991895d.0","_nodeVersion":"16.14.2","_npmVersion":"8.5.0","dist":{"integrity":"sha512-a+K4JxlUaz+bO7tgWhPnA1fLlXWWX18hgFeR2z9hSDsLCiW/Y0/gLeBxmiG8DG9KBAwOsOs69eJOkQn3vfrrAw==","shasum":"a6c58bec2afe4d62cce312b27a5653dd33edc8ed","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.18-canary-5991895d.0.tgz","fileCount":103,"unpackedSize":501121,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDYdRazAB/4vAOTT35S7Oi9bt9YdNtwSdWrsbPHTvma7wIhAI1qGbbcCzUF/zq1OYgO/deIWBktcWIJeW+oMrOFvMzL"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiSBdOACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpJiA//a1e1EKlZnWc/oye722sbhbo1f4usv3ck9q5boD00FoO31Maj\r\njDs4btch0zSpZjVQzbXHwrbYuHoo9HxCO2FoUZf7SukIADAnt7/DMVXjxnoL\r\nUsRpCEDbmORHxro/BnW/g/vVbk+9RHulZtRMF42EivpvY8cbqiZQ8dOk7wDQ\r\n530sS7PUSB0QfmKiQ8MKONQpxtrrIM3G27lcVU9VkPKe9cZhKgEi9Q96BBOH\r\n99MYf+NmyDzvkEtv4jikyyWkHuKDKRuK6YDlA0RYOVkJr+pMswIL7iIQbMSr\r\n5Lm2VneuFhIV3hInmIw594NwM/lJTEM41HPiQRh+S3UwrrgW07wY9rfDIpDR\r\nIWB9h311FSwAsOQGw3aPGFqyYWu51QIwxxZQepuLxUNuQoTgbsCnH9rygDxG\r\nqWsCwd6AE6peehBJxOK3vnNQr6YU7I1Sjs8L2VFHpzehXUMNHRcrx0b60M8D\r\nfEkRw3lbIUkcMBBxJCAo5hB77K+K76kyoULSyLEQkEcqFm67/qRaFpeOKPH0\r\nTY1m/jswJLiG7Tgqb81nhdISfbZEdHUBLn/BYZuNQXA8w928JiB0z6BgUwBZ\r\n4N77gvuLeDhz/p6nI3LLkfoSpH9KGYY+jQUqul6fkdj4waaBCYDzlZ1oCn/G\r\nebrguy5ceXXjC6mze/rnVmNOxZ7zM1KC2Cc=\r\n=HMm0\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.18-canary-5991895d.0_1648891726278_0.5242800767906257"},"_hasShrinkwrap":false},"2.7.18-canary-c9d291ea.0":{"name":"graphql-language-service-server","version":"2.7.18-canary-c9d291ea.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^5.0.1","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3","vscode-languageserver-types":"^3.15.1"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"c9d291eadbe6b475c24d42bf2b3603df127d4a89","_id":"graphql-language-service-server@2.7.18-canary-c9d291ea.0","_nodeVersion":"16.14.2","_npmVersion":"8.5.0","dist":{"integrity":"sha512-gCIHeX1FBTLiI+Jp8FLrXa5D22qAlVxIQMCB1YqhzogKIsucg1m6bIly/YZF4Hu8Nb2zMZEgEWn1C1OKL0FueA==","shasum":"4fef56b129451621246ff83a4a523fbf53fabf8c","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.18-canary-c9d291ea.0.tgz","fileCount":103,"unpackedSize":501836,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC2W9xfrvdHTkhZHKViRBLgUTmbuGqBFKOO5XqvxhdiJQIhAPrs78DbmwxJxeFkO9s59PMzmY+ceFlhuIIw5fAtgqSO"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiSG9FACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmqj5Q/9EB87fY2aEot14LthJ9uEW5wtSbMQOm3/nkG1aJgLM6k5JYu1\r\nlDhIaGktrYHNOArtvxyc4Zw5CDSb/b9JmorMQj/Uf2MQi9oHjxWPdV6Gc9L1\r\nHl6jvS+SAoOVYmhMqbVSWh8QrjnEItxRkHm10Vwp0kyLEC9yNUMzWOxfQ7Dg\r\nx24xhqOVtNqkSNyvx1OVV8Qph2heRFAphMhPgAaBWuqkfgU0W0P+YoP++NCF\r\nSeuWNSBi+Y/fwPl+Xp+716dcfEi347T7TCcN+5KvcSMEtRQn638KOxcR7RD2\r\nUPeCfV6JoUPxcR5XMiq1FbVX76HHSMZQ5qSrgRKeJazsvZFbeweE18O7M2c+\r\n3EfgNjp0agvD6OSAS/ySa4EjbN7enFfOEzEhkmfcp1G6Gf11WRaHctM2/wYP\r\n6DnWLQy22ELDFpkDTpGsWL86IuZ0S31Mx1xF2DtsJpa7jzA8Y0EBFqM0dcLH\r\ntPoHjK5HFFPyVWZLuxtwIlCXRente/woUOFSTIyS1dbYrAvPWYjBizh5oPmy\r\ntoafY1mBblx3BEHcL7mlflUiuazfmI4/ziTkPGXCc4FzzJfEt6QGfbvWJ8M1\r\niZuZVHK+ebZLT0mtB2cQqB7EB4HnNH6Et0x9poCnZewKhL8q9NQ1hpP5aLqd\r\nsviy30eR33YmZYaeVL6N3uhT9DPC5Ghs718=\r\n=qQWJ\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.18-canary-c9d291ea.0_1648914245219_0.7163281259733068"},"_hasShrinkwrap":false},"2.7.18":{"name":"graphql-language-service-server","version":"2.7.18","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.1.0","graphql-language-service":"^5.0.1","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3","vscode-languageserver-types":"^3.15.1"},"gitHead":"587ab288c4a3c4cf27c94f3dc4220610ec106427","_id":"graphql-language-service-server@2.7.18","_nodeVersion":"16.14.2","_npmVersion":"8.5.0","dist":{"integrity":"sha512-V+uvU76MW3ZKV/Zbhplqh8iWghE84azzBp1eVCx6oGaaePsoF8tNM4v8OdDM9Gp8vaeJdqfry5eBv2L/SNLNrQ==","shasum":"1d95702808bc3f418f3aa81d3553ce013947599b","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.18.tgz","fileCount":103,"unpackedSize":501815,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFwYFX097Ki7Q8TNwFksNYigR4WU1YoaooLrBHziiORoAiAMfZuU9nA5yXnSqBj0ca5obCs32gkVxxfZqpn4HO5elw=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiTpGgACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqJ1Q//Ye1kn5JAR4HRw418LHmI60lDERggd0N4sXjxVBAEiGkj59oq\r\nr5wUxUVLKgO7Z6wXO6+47tLBmHg308lkPuhOo32EvjyWVJkiW2cRQN7dJBvo\r\nv1sLQkHKol5Ed14z3dIxJDmGqRXwCeAwIHO8/Lxl2zns87StwI1ooP07OTwM\r\nPGf/0js7np5z9mgor7NEdgt2LphO2fz0zBrHeiqMD89KQeM0I/ZrPkZ2ZT48\r\n3/xDwPTG0yatYUxpKIC/iVWCzTZfLEXugm82Z8dLEvL3wbrnnbs97ZE6lQoj\r\nILit5NEgeg8olXJWIJRLkhNJFTba2Hwo9pXEZMVMA0oLAD0oBAFeb1lyvPdb\r\nc1NOTNjcuTKpyB4QqDFEtTTLtcejINo2xXdyegggVCdHtKMvt5KhSTI24VSz\r\nU6Os6Ana0VmeSwtCb+69AlZo54ixx1p6oejC63WKux5Ub9JrP+0tw0a2FAJH\r\nFXiPEUPThNTSdB+qFpCYItrjPiV75SEpD5woiADolo4gRWOOvVpBPYJejsJB\r\nzNIPlABfuCQx/W85Uk76FOpI9eVCQGWO9JA7BPPrRzKa/mH49rd1aUu/OX+N\r\nLjKr1NcP91MbUUEnC73ZKaHLM57dpoEDYJLQ8bAFJyVIxcKQeez3FRtB+r76\r\nGQfbLC3mrUW/xyn2b6ZgzJHY+cpGKrTbTPo=\r\n=y0a2\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.18_1649316255869_0.9890482100136677"},"_hasShrinkwrap":false},"2.7.19-canary-fb52a553.0":{"name":"graphql-language-service-server","version":"2.7.19-canary-fb52a553.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.3.0","graphql-language-service":"^5.0.2-canary-fb52a553.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3","vscode-languageserver-types":"^3.15.1"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"fb52a553f30fe6e295901205342b88f5e1fe8b67","_id":"graphql-language-service-server@2.7.19-canary-fb52a553.0","_nodeVersion":"16.14.2","_npmVersion":"8.5.0","dist":{"integrity":"sha512-w/9Eqa8fI0x1ieXrNwIUjXUTacD5DVOQ+GjHowFllG8UEahH93oyxGbOD9QYus2rC/BvwqM/ciJUNJZR/Qs3Xg==","shasum":"54ada97aee53965d6507fb88f1f3b62e78554218","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.19-canary-fb52a553.0.tgz","fileCount":103,"unpackedSize":501890,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD+IBGLHcnaIJr0svY5pQk6GhM66Wl3KEJ8Xitu4/AxPgIhAORQ+07tLGFgatZMw4hE0z0+Elr8IiBktIl/0LLCGX/+"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiU8aZACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmq5tg//UxBGZzBob30mDKg8mcZ3NmHVOi4pgWg+B/ydrcx+XzaeV4vp\r\nukxh9TOxNLv1LC/2Jl3Gp3+uGDYUuRgd5hdWCoqdloiAQrxYi6M+O64+//yz\r\ngZJ7+J0j8f3dHh7iYBaYGXRhiYMmJykAAPuM31RIsz9nwcbdYadV9mWo0cZK\r\nIF54KLnXe2kcuXEUhmngNhckg6rh0JI0w18QAfMJ9uF/Qj7wdOcqg47AUVJ/\r\nvKEwB0MIGdOPEFwiZc+cRmcmbt9dfm2nBAZepiiAqU2Zgs+5vSDFxcWS+ljL\r\nXwlSBurfVSmWEoizlxJ1USw2SBvemEdSMG7CW4AaAniSN9i8uwXeCJM0O/Ge\r\nOT8rS/eF/3M3lxmU5HSVwZHy1bL8+6pihPgG2FNbtKy7+zYsQUTnvgB8Mdyq\r\nl7HRFCeYyrklB8Nopdku9Crs/qY0FJDUHwljDyb1AqFphvDf4wrEcWn3JZ/s\r\ndsB6ImtVpG9PHBHjbdiL6r56vbBcs4eD0xPjEOWHmiW8eVWaHI2J4s22OkUx\r\nXfcHhLSEaSMqfLkKmeZc0jpxnTmDVBYcfP1kDinFVO+un4B+kUUJn8sPSABf\r\nQXbJzG131LpPWYoxO+3XwocMEs/jhP/KacCdJ5bfwldHay0ygRJ9+L5mv2tz\r\ncaeSAAH30Fp+kygPGVZkc8ICBVuwYtHGuKg=\r\n=OFYJ\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.19-canary-fb52a553.0_1649657497684_0.007123456766265024"},"_hasShrinkwrap":false},"2.7.19-canary-63a8a0dd.0":{"name":"graphql-language-service-server","version":"2.7.19-canary-63a8a0dd.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.3.0","graphql-language-service":"^5.0.2-canary-63a8a0dd.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3","vscode-languageserver-types":"^3.15.1"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with it's own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{ \"schema\": \"https://localhost:8000\" }\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n      filePath: 'exact/path/to/config.js' // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives *legacy*. you can now provide multiple schema pointers to config.schema/project.schema, including inline strings\n    \"customDirectives\": [\"@myExampleDirective\"],\n     // a function that returns rules array with parameter `ValidationContext` from `graphql/validation`\n    \"customValidationRules\": require('./config/customValidationRules')\n    \"languageService\": {\n      // should the language service read schema for lookups from a cached file based on graphql config output?\n      cacheSchemaFileForLookup: true\n     // NOTE: this will disable all definition lookup for local SDL files\n    }\n  }\n}\n```\n\nwe also load `require('dotenv').config()`, so you can use process.env variables from local `.env` files!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\n| Parameter                                | Default                         | Description                                                                                                                                                       |\n| ---------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`            | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`           | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`         | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`             | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`              | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vsode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"63a8a0dd6e1fc925d3e3372d632f5ba2a0575d4d","_id":"graphql-language-service-server@2.7.19-canary-63a8a0dd.0","_nodeVersion":"16.14.2","_npmVersion":"8.5.0","dist":{"integrity":"sha512-7+ufGj++kBIke3QAY31XpTcYtHLTT8dEA4HQeeQPyMAZGuxVtOZqNzi2aBLIVAgSyIEuuKnpAoymAezLY8qkRg==","shasum":"7608b3e8290be4d3c4ee2bee20656d142c7507bc","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.19-canary-63a8a0dd.0.tgz","fileCount":103,"unpackedSize":501890,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBuad170Fuk1gTB515oLodVncIeJEkYbi9wq5fsbeh+DAiEAtatP/0Z5ozZs74Lz0Ni7YfMcacXqM6rRV7imUPMjDS8="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiU8dzACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqgIxAApLAKiQXYSvpIysGdSlGUpHoNTjBT+POIPUIPMSkkKOiCtvG3\r\nbbqMYGnVkaD4lLweUSV4kXyA9KLxziKNe6AoXuwymUsn0bQQB7GGUR0TPUKS\r\nbDt0B5EWOUPWesQmEh+UkNokukpjSZkywV3GXRCmAYwEvQXqVjDqUCN6pi3q\r\nGKEBW0+z5f3U4NJ/v2O+tnvlgcK6qvmG9tl6BSOsIDthvqqed9tyRVw0mMBV\r\nH9Zw7o8RwrZgBKQnqecdx3OQFCsDV0mzL7Ep3ySpHp0Lm+2gSzO2N2oEKx3A\r\nkpwykRhgntX7uDHkTGshfwYO1Gva6OSbYJLj4APEYWSKLO4w1TEj8cG8f4BB\r\nRHZu58Y7Qc1yNeAHY6R52R7SdhkBbypeNEX8v4JRrKI8lQakPoia+Sy9VsyO\r\nZ1P3pBxLoJonZCX0hEwX08anlX43O4f1/+weDSCEw9TqcPNB2SRpXkmcXKFG\r\nvt15fYFa4aIhzuYlKQiE/KEAGL4yKsFPFXIUiDoSijiiksc61z+J8sDrgm14\r\nbHu+dj+5ZGAUmJbgK7wARKMylTfp2s//5mxJrDRNmr1OAxPsnViPjyGs+sC5\r\nNbM4fU2Y+7fU/XwfeQZaqAnDCpVN5h326n3eDh7k/9964yHUR46quVfQJiPk\r\n8amZ/rdE/Nh3dy5XkqDzT6buW2C1tHgH6EY=\r\n=Gr2P\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.19-canary-63a8a0dd.0_1649657715303_0.5794893888918013"},"_hasShrinkwrap":false},"2.7.19":{"name":"graphql-language-service-server","version":"2.7.19","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.3.0","graphql-language-service":"^5.0.2","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3","vscode-languageserver-types":"^3.15.1"},"gitHead":"bc3fdc7d878b4284e795d75af20352424f36413a","_id":"graphql-language-service-server@2.7.19","_nodeVersion":"16.14.2","_npmVersion":"8.5.0","dist":{"integrity":"sha512-V2zx/MTAYAx7/cALo67IUmtl1+JZxdDHr8sH3w5A7Ai9A3BfE6wBcBUyaNs2zot+8s8BkjmduoN6MITMSbsCOw==","shasum":"b3f5b96ce5b1555e5af7cdb4ce5d2a5c5918933c","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.19.tgz","fileCount":103,"unpackedSize":501853,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC8oHIpHAvI1Oq19v7wGalTaTirNsClGfSOVBH2Q8GM4wIhAKtOJ06auVqUNrl5+tWB365qytxL1Gil3Kpg/QJKk8fC"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiVDcJACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoJQw/+ImKSlCtIg18dO2MD61jgD9rPu8LFMHtltKUpuaS0L3JIj5gY\r\niFPDxh40FOFKY9gsNrk2KfmPJxcu04h0cbJrGArpVF9x962JwSXsZd5QSU1Q\r\nX+GqNkrq1fpcysLQln9YF6Z/NlfzsQS51yXT32pkbWy92K/Z8C6egwnj0uKj\r\ntGnj7IGD1Jex/5o1kzMabP8YMsySRlCuvgyhZeDst58OJ5aAgC63oJ9+9p43\r\nUtTvefV1Qju2k2kOH4BFm9BggBx73/DzNEF8Z0GG4kQsChvBuFH4H5s7H4Jn\r\ntFjHDgOIcyZcgix3KmgLFoQQ77/yIXYC2WEfBENZLkkL2fLPRnfK020zSaGq\r\nKxyPeLT1nV34iLdcqPvnOsL8HzFv7r9KOR0hEBXQErQwYa00NXStshwuIona\r\n8tsXz+Dzns6/lWCPcYF8pxFJa7zwqJ6J9qRS+kleVHuR5Os5IPimWmHL4hYc\r\n/Y0zWU7x+h+Gr5TxBnCMS1ogl7TfR4jb45U2EyyNpvlHF6LD8NvPS0WZLKqd\r\ngiqlOG0kpqz/yGGSH0KgYPaFyX8gFf0iSVdSusUacxXV+h0n0kY1u6BjgYYg\r\nAoyLsObOdnvlEbgMMbwCzqOik1FDIKZ/g1sfnBR4+qZpCmo2Nt4DgELoVGxu\r\nJI1r0+IwiAs+NeFCd52L2eV6EMuV+eLGs1k=\r\n=3uMK\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.19_1649686280981_0.016639913453230015"},"_hasShrinkwrap":false},"2.7.20":{"name":"graphql-language-service-server","version":"2.7.20","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.3.0","graphql-language-service":"^5.0.3","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3","vscode-languageserver-types":"^3.15.1"},"gitHead":"d092bead3b433e84f3855616ed585be77414b91a","_id":"graphql-language-service-server@2.7.20","_nodeVersion":"16.14.2","_npmVersion":"8.5.0","dist":{"integrity":"sha512-xF9U71gck8U6P59pa2TsbKc8WsdKP2xsOQrBqWJIZRwGX1vsxrjBAvvnIZF1fxlkffRGgIyd66kmjzh7t8hGQQ==","shasum":"8782f46b961a53187b3f584d6dfafe72b758b49c","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.20.tgz","fileCount":103,"unpackedSize":501853,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBarfhDRIFbAJBjMMa/aX5dGChxKYaqlHF3lWRTU0jZ5AiAn/Gv6vlO7lg+OkqypatkJj1LeJAsFrsHWz1db2uQEdg=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiV6jXACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqY3A//X4ge+BXO4PBRkJIDZ+gcTNdIGG+irBRrTRint1oVaLGFYExh\r\nKU5KSRZ2B41ou6sYNZS6PkBSYhWw2kz5+Gl5WIkOCEGO1NVftzCSXMjyqYjR\r\nKFJA4ap53pk2/suEjrsmVlvP1pH5BrhOH+kmPRPuBF5+u6QfHXjHcKj0JFqN\r\nsmBz6J7WRDYrQodaYTb7ggdL8YLOS1+NKaX3rDPJJ7VY/BDMZnfXITlYfiCF\r\n+BcmE86g+QZxBTYfy8tEwM4FNK4duo4wSU5llb99tsyhzWqFbVzLP6yQX76R\r\nRr9W4MFm24N48wRLlxpMJ6++i2RNpyKhhYWoBiKXSSSVm4293C2QKhX2vwjL\r\nj2iQ8gI+V3Q8+eTWOAh/9jgPjps2WPmkMpllOeIBfYPFpkyH8awLxP2tE+Oo\r\no2usdUjC2jsHVZvXzzsK1OlujKLPYKFdW0Ki7Ke2F86eBTr8E8ypZAM472sW\r\najQBV2TUhSFbDhJtHswh0ZRlwLFSfToBigbjTjLE9UtQA4moRNDJnqGNdAlD\r\nRq3F9o1qKAk+U7Ugg3rJsFR50rP/gFBoFWQt17fyPBnFyq9fBFAVva78jPAc\r\nwQX2Mr+n4ZTq4Qq1i/YZJToMDYVIxWFDEJwwB6S6Blgop7aLxj8Ke5eN29LF\r\nuhI5gjAYyk5yRd6emyvkiKF4mTsPX9LNa+k=\r\n=Rdfn\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.20_1649912022970_0.7584107761340357"},"_hasShrinkwrap":false},"2.7.21":{"name":"graphql-language-service-server","version":"2.7.21","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.3.0","graphql-language-service":"^5.0.4","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3","vscode-languageserver-types":"^3.15.1"},"gitHead":"b7c29d40d3a76960800ad33a4bbda3467871ea9b","_id":"graphql-language-service-server@2.7.21","_nodeVersion":"16.14.2","_npmVersion":"8.5.0","dist":{"integrity":"sha512-qhGu4mNMLLPgi9a9abOWrv72ih79ElQAgZIT6lqmgb/lqHtfSyIBs03jOEESmUOOTAEJsdNPCcpBzaQ1cQeaAw==","shasum":"883ef1a18b871f81ca21872e5e741c7fa335dc82","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.21.tgz","fileCount":103,"unpackedSize":502085,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFPuRz9S1bh5UYfOCOuuhfFojvcXUsmv72GZX2gelxLWAiAu/338plHvsqpyXlRknZxcwWiNt5hIjBdiDL1pRzkwaw=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiaAOxACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmqnng//cO8URMaOYTpcFPCdH419hW/tz9++QGV2Q5GGi7PGmU5tk/Tn\r\n1bHXcSArSSBEzQOOcpsMXDKZE4XIOWXV8e3UGDEASr/OF23KFLE9qRHPDZQL\r\nlucjKBrMhFAEEQ+R3tGkU6xf7d9YJ7HiwxWr+OznE6Rfec/Mv8MqzabWmiFh\r\nst6INVbLJRprfEp5pT/MOOIma5A1/TClEM7cneEgtUryjo8Prisym5hVbM4+\r\nvl13VxOFdBy4yn/visBXiWu00832noRBPtdFKgdBkRt40KFa1/bj2CNrjScW\r\numobT5rKe+69KlIqo8+ZgB7wh6h7vwvYDgI4K6cLFcVYLHkhmeGB8d8FOWcv\r\nbB5hUsaCy2Cqx50yYX8ju18Z1g2o3KFdbKEzpYHK5qYsl7G5FQ7u+Dh4Fgsp\r\nzeA3FhzWKjZ2bFzHOjiJyiHHbOtZDFgrhGZvWG8QM0V2bdP2ZmLXkS784Abv\r\nwLKw7kQqy6AkYihjezbndspNZEru24ORnm96s+se+XUUwE3Y90ufswGmIBZ7\r\ncgPM0YDhTl4z4DUF8HG8/pJ6I2JNZ27vkxmUHUXtFX28jWUoYtX0c1cIuW4P\r\ncoRdCkCMW9pyP2h3hOzKxE0U7SK2dLDG/V1wXX1RRe+2QIN0M21YkfJuWTPd\r\nVjWS6QH5qomkcYQs9/lzzjoUFYmTKSqquZ4=\r\n=sqJC\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.21_1650983857595_0.5282652586107255"},"_hasShrinkwrap":false},"2.7.22":{"name":"graphql-language-service-server","version":"2.7.22","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.3.0","graphql-language-service":"^5.0.4","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"16.0.0-experimental-stream-defer.5","vscode-languageserver-protocol":"^3.15.3","vscode-languageserver-types":"^3.15.1"},"gitHead":"9074ea7be68e1c8a6c64d33e5434a348762f93c9","_id":"graphql-language-service-server@2.7.22","_nodeVersion":"16.14.2","_npmVersion":"8.5.0","dist":{"integrity":"sha512-PmTPfLgpc2eZr8XVoXIX42Q9iDXGLdIBSFwTs/7cYjiZB7N7EmnT+72W0PBdpMZD+E+dpuQOicizwaQEuJo5pA==","shasum":"d0abebd7eeabc9df9088d48116871bdaa406c5ff","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.22.tgz","fileCount":103,"unpackedSize":508009,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHAJ5RWkpGoYHPPufJacs3d4XiZjVZSQDr7FxHS83+O8AiAR33Li0TlNHXejMekQ2JW/mOJ9FMz+rXCz7+xxO+BArA=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJicgxhACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmp0dA/8CIcMLewnGOM9x9vATY0U4KWOZ9vVfeNLLGSWGWLuBO6Xjnpw\r\nlxfCgUZQu236Nhm0xW6v3WPzA8jXHh0y06hFVX1/nI6DbzzAo7ofjmRgvDlJ\r\nspWOVh1tOC7y0E8bheQ1cJu7fcl9AGwhssrAJxhayhX6zL8RCf7rJef23pX8\r\nbGWz5gHRLCbw70p99phvOrc/KDnwfT+SIVcYDIItvn7qzx1qS3cMFB8QGaBt\r\nEggfmh0wsrhVoKsZoZb1Osmf1In7ntcZHWx+WA9DrQ8O2kdsF3BKB/oJNhOY\r\nv7GHh21RfWHPDb4J1hoXSJozfedRhKUa2+uardSZDZbEXtb7/YTMr3lriL3Y\r\n4avNukiYXbTIXSxCR+QwY9ldAg603qn/LO6UF4UkZey8fKwNTAh8M8hMxnbf\r\nJJJ6nAtl/zobN6RbjJpasQTmgh5qxB0Jr/EvlMTWJSptiHIWiKK0A9dBhI99\r\nRSzM+cTF5WcEMzo/d6wZLw9LaahTd4FElj9QHQBo0BB4mBzYGvinIvOXSnYX\r\naOlNxyIHX2h+pYLldxSbjz87ahjW+FSnh8oy27AChEnz6lN+11Dy6czb0ruA\r\nWbOchmKXSgofkXdmEonscJsYW6SUR3WHbHUZQ0cCU7h6WTk2MxS69c3VLuDZ\r\nvcs+mUZgeYzrfMMIPDO9Vz/NVF/Hr2ydRVQ=\r\n=qQvS\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.22_1651641441033_0.8720753213345462"},"_hasShrinkwrap":false},"2.7.23":{"name":"graphql-language-service-server","version":"2.7.23","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.3.0","graphql-language-service":"^5.0.4","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","vscode-languageserver-protocol":"^3.15.3","vscode-languageserver-types":"^3.15.1"},"gitHead":"2832e04bf1619e90150137d2922961b514ff6367","_id":"graphql-language-service-server@2.7.23","_nodeVersion":"16.15.0","_npmVersion":"8.5.5","dist":{"integrity":"sha512-mA7v0XEPrTnKWVvQWAOUKOnhInOnhGiFhwO8iWJekrv/gmEwak2zYfGQG3JfesJ0D9yk4pPEgRJvv4AWPRdlcw==","shasum":"53af43e975a7b3d62da1d3ef59227d56ea4420ff","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.23.tgz","fileCount":103,"unpackedSize":507909,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDkdsPHA7m6iovBFCvKrISy37lZaieFhpTu26mKY0uMLwIgZpFLfz6oW+RVmV3SzaLs7qY+4zBnbX1eyqtGqo1WEOA="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiiet+ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoY3A/+Nfi3tyJqLawJD3dEvpYsmk5GQWGdhhmBCjGYPVebIqFysxuQ\r\nvMMRApNzycKmfVhCG1+nIW8+bkCI40YQgBrZYsME16LBdXwTRFaK/18VFmoS\r\naaUdMqIbgP/8kRQusJGufw2JB3yBJ1lcSuPSqv9VDr3Zh7sdU47Fw0Q3BJmG\r\nJbu/26HUNEcczUS2AtCW3PjT+LPFti+gSblznpFOse2NZEwQ91AHomFRWQzu\r\nSaoA0WDWgDUmUd+u0oBrd0LnzxaAcg5L09pNjESxchIHN9VSN1uw3u8ZiAOx\r\nqHbOccIoOoclkDuiSglGRyn2ucdpCMjEy2pyo3pivmh64f/pCaCRk7a36TqQ\r\nLwesJgDD4tBNxi20yR0+oMfhm2P6xYEloG7Hbu9NpIpBktpPCycaDUiLrSKf\r\nVfTP7a+Ds9Ob8DXkFtW0xwHILDxuK73aFeSclGe5bUg/VFW6P4M71Rz1lY0z\r\nwY8y/2Vwu3a7C1bFouedkJjYWVsyjPb5aMUir231/n8LkkULdnJmxUtda3pj\r\nMmuGClgvrb9tSlUfp7mfHELW7/z+LM9w4Q7zcvd7ETY0U/KDh8PAL1Rd1JrA\r\nt9MtW+yN1K0OxbdNF2CtD2vaDc15+8mQjio/c/Nig5dfDIJhTWXVinYjrFCl\r\njxXECYCVn4TvonAKRMoYYoeg9ZTOEkz/BU4=\r\n=iX6o\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.23_1653205886236_0.6851561442345684"},"_hasShrinkwrap":false},"2.7.24-canary-6116786d.0":{"name":"graphql-language-service-server","version":"2.7.24-canary-6116786d.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.3.0","graphql-language-service":"^5.0.4","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","vscode-languageserver-protocol":"^3.15.3","vscode-languageserver-types":"^3.15.1"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './myproject/schema.graphql',\n        './myproject/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a basepath as you wish in your `graphql-config` file to preload `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"6116786d299a2fecb6201a02f483e601c954de99","_id":"graphql-language-service-server@2.7.24-canary-6116786d.0","_nodeVersion":"16.15.0","_npmVersion":"8.5.5","dist":{"integrity":"sha512-b6FNUSKa7pQ9+dl2paLoBIJ60SxS7n0f325e79qLfuVdqeZg5mNo8m7DWj+r7gV0NAVm6THGd5g9T0n0i3rpHA==","shasum":"fff717a08e97988db68666be4f8e70f7e53be19a","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.24-canary-6116786d.0.tgz","fileCount":103,"unpackedSize":521729,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDmnE6+nvQ4H8im+sq6OFTgc8XjHw5Ve8JoyL68nmTImAiBGH8wEtsTKjQcOYjwyV27w/hK3eEMkVIolcWxbtXaY7Q=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJimhwcACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrOYQ//WAWKFE2DtZNo1OV7zjKFhVrurpYfkhYXGQLtQ4y15cZ6nrT1\r\nwMVhK9mt57RwdpmhXw2DmosnFXE/fQ+fubn5MBR/uM8n0qCf2mG8Zu+bf4OU\r\nTbfSlMWa2rCpR5TBZoFrAJ+6eOR7SCi69bds5niDlm3dQqxmP2yEap51Xcvn\r\nWBuwuxF7SRDwLgG90XB0fcZnfJJ3C7dxulbn8PJw4TuBaeR1HGZvXp3i6mQ+\r\nW2cNJRUkxs9jaZFCfcLagqov8zAm9VsqkU5A5u7giMtmMwEi+BGMDZqyb1bb\r\nLt36NhNVuEoOR+isp8bn+eN6OuyalLNoIDIJTx1vBu8K42QMm6kSubC7ZtQl\r\n/y3+vpbUvr/8/C8h2psmk1ZD3uy7Dh93VD9mwR1X09FtmdAz6YDlvLOSieje\r\nFtkQWihJq1gH4f90IhZJXSvHxWhBrq4gbmZkE5E2lE3YVoNTjWUd3bCXyfWa\r\ngBKBvCymNWj2lgk8Cc7B/MniAUrSa9nkar3aJSnG3cm+JrVY5xwNmnoLeE/s\r\nqbICDwcwVOm4TT/dt4GMg9uzE3sO3H4Lgwgwl8y3gC4pwtBgEm6ritDYD0oE\r\nYFsEcsLi0fYA301NL3nG5aQED/z9qHUM1osWk/aSa0coPw+jaKzCsV5eU2tH\r\nzIcgcBmrfv78TiQRMoV5SBofOW8D9HmfgUU=\r\n=Z9vS\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.24-canary-6116786d.0_1654266907681_0.5026908483364929"},"_hasShrinkwrap":false},"2.7.24":{"name":"graphql-language-service-server","version":"2.7.24","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.3.0","graphql-language-service":"^5.0.4","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","vscode-languageserver-protocol":"^3.15.3","vscode-languageserver-types":"^3.15.1"},"gitHead":"1818982c1beaf2f65fc5df0d21b5e2e5d2d448cf","_id":"graphql-language-service-server@2.7.24","_nodeVersion":"16.15.0","_npmVersion":"8.5.5","dist":{"integrity":"sha512-KkqN3H3MACKHb4rHAT/MrDjHNkoLJj6glbFzGc9iwhvaj/6ALsk+bVbYaFwoLgvmmT1XURgvrIuXvnnNZnOsFA==","shasum":"d311572211b6278b9d416227b71eef3bf919d5dc","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.24.tgz","fileCount":103,"unpackedSize":521711,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD1Kt/nq3khgY34kbjbqhk2JNRisaDHhlrq/9S24I6eiwIhALSSSiZTFWcHH7iNUk2lD8QJZtGg8O4nb3xc5nIZo4c2"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJimwAgACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoppBAAnwbzs4OL4L/Yb/j+Z2OzzjI+wx+nwRKpSpv+oKQf11YmARGb\r\n/vqPCZ9FauJg+//YSwtC0bjacTs+0PXY6Udr+o6nRoByMuCJzlVKGoYmAz1w\r\njqg9/jM6Y/R64r4gopXy9q58oKP53zLOT3bI9mLnjLxrDdzquJcEPeuwrlWc\r\nvYq4hx3HBlqe5ohESpMkcRKuDvght5Vh9h4wFzw6NkK+GCgEo+X9dKMmbRpm\r\nNfEHm+z6zBH+nmyMl4bDAWoFIHtQoXX/O1BC00g2JlgZFBMEMkeLGKorpB3W\r\n7Zh2tRtjNNAq83Ml6pG14L/g/eXdDJoscDd10tLEoId2er+sUBaFrbSammOG\r\ngaeCMZMXDw2f9zRJ0DOGddekbOnzw14XXZdbBddLbWPw70yOe9QxNPgvi9Ko\r\ngFU8LTiOHLoUNuvdmgexvoCrRpSGBvuqMpJq2tuBXwY2ki6MO6mVnKRMNYos\r\nIEKCe5exyWxWqS3Kipp+FOcKlu7nez0azO3RimybyPeL1/ZnVf7GA//8T3HD\r\nmXoPssfII+K+/w0I3udO4euWDB7LARvKcvH5w7Pduc0n13PgY0C6wmOGEgq7\r\nG6fHyRDfFROJEcggCski60k7/4MrGXGv+HCPee/vOjr3MyG9JKwfFofRsZ9S\r\n1cFVXcQHl+u/67r126iy7X+XMl6Q+xJbMkw=\r\n=8u9h\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.24_1654325280134_0.7803946969032844"},"_hasShrinkwrap":false},"2.7.25-canary-500eef41.0":{"name":"graphql-language-service-server","version":"2.7.25-canary-500eef41.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.3.0","graphql-language-service":"^5.0.4","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","vscode-languageserver-protocol":"^3.15.3","vscode-languageserver-types":"^3.15.1"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './myproject/schema.graphql',\n        './myproject/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a basepath as you wish in your `graphql-config` file to preload `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"500eef41d77d3c695666f7db76cf133d5e1879aa","_id":"graphql-language-service-server@2.7.25-canary-500eef41.0","_nodeVersion":"16.15.0","_npmVersion":"8.5.5","dist":{"integrity":"sha512-5beP476c/sLZkZyLtavGXlVEfCXmgzPlFCWBX3yQkJyMri+HOIb354XPFs8fq4N4BsQ/AjTtmy1xrNoUwlPOmQ==","shasum":"a2542f7d696144dbe651b0bb3d9b251f8f6cf840","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.25-canary-500eef41.0.tgz","fileCount":103,"unpackedSize":521476,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIG9o8QsguU73SrZHofg4F669amVft7r5z5MUKyziZ/q7AiEA4OiaKQkYpfWpytaBETs6FZJ6eRw8gTZextJHX1uwEm8="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJinF7AACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmphkA/+POoHIQ4wbpsdueXYTHkOZEiGYhEnTa6cQdoYqeg/YzuZB3Qr\r\nXfaT58s+5Qv1x4fD/FdiM7cB+OGdgrOYfEUJZZmZ0FPhlL+Bzz70vrPBSxYJ\r\nVHdahqKhClp1ZomJ7oB05W/ABd2ZiIWwd9DYTTHoMWLieEoLqbCR8WpM0rNw\r\ncoo3n9khJMx9nNRiLEfqi4LOUYyTbXBQqPbfq05KblhvKnNPZ99HzY3ZDQHU\r\n57xhiPVvosGzjU3Ic8c2YhQFuKkNyynF5orfdIXFtf2PPH/P4xKqvJ16+9FE\r\nfYeC3NcmH5jjd+0mXIr0DbcHDH3QzNOg69rrEHf/0MJesobHz2nch1kSWrt/\r\n8XhS0nlVULud4aJKkQTXKwWn59Pcm5tq/XiiplUpt9UEOltRL4P+b2Bis7Z3\r\n0U6lbxmEPLMe3htf2zS1ySWuMUSHiQ+wIxahdRhaZc8ZumwJwmUh+rTethff\r\nTWL6kiLk+MC3AAn5LfpUwrCXZlt2kp3DJ4kruWxZ8lOEi1aDjqfEjjdMhjqC\r\nrWt8Itld7EGMq1jy8Kl/XNKy0W5s+M4qU43um8cd7tumc5mG8sQ4hv0cexVa\r\nMAuuun7V8Ou/QHZHyZUhnqramuCzYQiiXvvwNXgz5qXzwPMfB4RSsd2IW0FT\r\n640X41tWVYA8EcWwsvSkYnwaT/5CX40hPLE=\r\n=1TjG\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.25-canary-500eef41.0_1654415040085_0.5132386467854317"},"_hasShrinkwrap":false},"2.7.25":{"name":"graphql-language-service-server","version":"2.7.25","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.3.0","graphql-language-service":"^5.0.4","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","vscode-languageserver-protocol":"^3.15.3","vscode-languageserver-types":"^3.15.1"},"gitHead":"e2db3bcd4703395f652a64d5b04579f9b91183f7","_id":"graphql-language-service-server@2.7.25","_nodeVersion":"16.15.0","_npmVersion":"8.5.5","dist":{"integrity":"sha512-6P9JXW/qYkrBpCQo5+lBP3CvMaSrs2WldNVChYLY2QJVWIEIgb+AZuQy/GCRqqMoW83sCoJPd5vpkNfYtLaF9A==","shasum":"895dce78e467168567ebbdea60770cf84e4f701c","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.25.tgz","fileCount":103,"unpackedSize":521458,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD5RvfDSMIGFqHUEsjsPcZwPIicLtB/ZWuMi+HTRxPyaAIgM+XO6TbuyQQi+syL5KOwz3fE2rGuRGYS2Pk/4PZe3vo="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJinbTRACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmpp1A/9HvROtOuhcAJxdTEhFRM5RyiEqrF4uqnvGIikwX6U0zwLtgyk\r\nxednepTgoheYWXr7QDtSN/XCp1HbTfoJPhykLsrgpkSr+Qj+cwPQtcPFdFle\r\n8BRK5+EKhZq63Kg9WoIY2PPqSm2G+4T9JMjUTKJYRhVW4O5V7y5K4KTedi5a\r\nUVlpcjJGRa285GBfVwkrFBLowjFqUsMHgkPe36GnneCaatl+MXJuXq4IfEz1\r\nSWDA7VSNlliTdlh6YMiurSO0hGKV3LcJDNQ6WmZX2qlzoB8r20vV/rjzBCG9\r\nnGsM323w7tlxGeScUZU/jRxwSgXTTTSaq7tvKIPq3/jMad4cTYU8VmkJE0o4\r\nTX8GEezn4a1lbcdXe3NZ4gz/C8GoHjR7/yCjWN8lsuTBnlI3iOT6lYwdNKPd\r\ndUT0/piu5xzhsnJIDPF1L8C/yiPWydso+9bpw9GPdBd4O1jf3+EAVsChxOoT\r\nJp1kPC58qjYFCgZfRKnPhaKHwPqp1/fbo1+ygbY+uShOS3TyMJgB5jSpCyFo\r\nyFu9n68t+4w69Fmm1OaIbsAKHD7TaHctuy50HIUiY79xdjaw1avyX7hpZK3k\r\neo8aVSokpmMKU21/Uiv/SYK8YwMtcqU50G46SSv2EQgRGY4jqx2OUYfzUCoZ\r\neAYnoxQxjaSDckJJJcVj2uMTcA++tO1En5I=\r\n=U0LY\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.25_1654502608925_0.92757795022626"},"_hasShrinkwrap":false},"2.7.26-canary-85c69db3.0":{"name":"graphql-language-service-server","version":"2.7.26-canary-85c69db3.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.3.0","graphql-language-service":"^5.0.4","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","vscode-languageserver-protocol":"^3.15.3","vscode-languageserver-types":"^3.15.1"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './myproject/schema.graphql',\n        './myproject/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a basepath as you wish in your `graphql-config` file to preload `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"85c69db378dd6560c231f414360ad1f0e079d5d5","_id":"graphql-language-service-server@2.7.26-canary-85c69db3.0","_nodeVersion":"16.15.0","_npmVersion":"8.5.5","dist":{"integrity":"sha512-4EWw3ZDnrbb+uQ46HDFeAnfhRpq+3S5EI+csXIDJharRtppiPeGEv0g7HQyau2aRd5oaWfcAr6pqmAnnf9dJYQ==","shasum":"59e686d32f61dc53c7d6fd10ac11ad54008311c7","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.26-canary-85c69db3.0.tgz","fileCount":103,"unpackedSize":522516,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDYmwLnFigoRC6wFIjKIukGFwjLlDkMt9An3kEyW51EzQIgJWzmZHQD/V/4q0+qoHzPeAlmx2YyFlSZfEd59h32p40="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJioHksACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqaGA/+Jo9jLkDelKiaubZ9QrQ+J/RjU5PjDJkPBaK8PQJWgkiRq6V5\r\nLNcP8C3ts9IIxwlB/HdIlq55N73g/JN1lPhzKBO1EhCmpHZ4pXhzyIsOiTEV\r\n/3HamggIPLA4KE0VAZ8Y8IoB+s+ewEDTua8pxDFr1W7RYfdFue8BBVMy6oyq\r\ngj2vsASAnyRETPxLvF9RBgCZKSOHBuDeCbqkB4147S2Jd4Q2oAqhsXDkXhjy\r\ntAq3iUSuchpnPBtBDpcgai+Kt+hCP41FnULddo7+Wad5t6zGo3tS6nlXTa7Q\r\n+KKN01tYutkJnEUQI/RZlsQUVwOq1cIVkDkF6wLj9k6HKrGQnkmoKgqu+tyx\r\nR85KLCql15wfROZ5FIISbPRZA1Sa9odwazqYTRwKAvWjJF3yqTpDTOoV35nO\r\nxJ2P2D03hi8cS7HXuBrG65ba8h+vIV59WBxJFF3OLYUIuSvvc/oLMfldvO4+\r\ne2bK/T7fxdRHowDTF0lTU5q9KWRLb7xVRCctMGltpXuHERSLlresOgWLGJlB\r\njBzGym8e5i/rztQ1THt6ztFvWbfm8r3S0HoW7RCt2PGwT+x9ACfYOU4af1Y/\r\nddDnPgubUz0s30xYnS84/NSonvrB+jxGRwNvnMSKFWxOOGetHEeHZ6JjM4lL\r\neE5C4tN78I2kpW9Ts/MvNpDrhDZSJ0nwCLA=\r\n=1/+W\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.26-canary-85c69db3.0_1654683948271_0.6775056988199579"},"_hasShrinkwrap":false},"2.7.26-canary-6f259838.0":{"name":"graphql-language-service-server","version":"2.7.26-canary-6f259838.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.3.0","graphql-language-service":"^5.0.4","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","vscode-languageserver-protocol":"^3.15.3","vscode-languageserver-types":"^3.15.1"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './myproject/schema.graphql',\n        './myproject/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a basepath as you wish in your `graphql-config` file to preload `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"6f259838749a0e30f1a62e584acbab0cc8b000ce","_id":"graphql-language-service-server@2.7.26-canary-6f259838.0","_nodeVersion":"16.15.0","_npmVersion":"8.5.5","dist":{"integrity":"sha512-rn8r92ewMttgwTaO5nxjuZpGssiyQne7ltjO3ihCXcr0lx7E8nlBZwAiQ3BpHAOHeEWsZYE/Rj1Nuexv8MJVkw==","shasum":"e94588504bdbb12413aae6cade5456b88054d6fb","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.26-canary-6f259838.0.tgz","fileCount":103,"unpackedSize":522516,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC8FAEvSKuHHz4IXRG8MCFajAWjhHKUxhW6sZM6Kz8+/wIhAM3ffLir4gfv/N7BPIUy+s+U+ewsGe+zn/azfpms8ueh"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJioHl8ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqJZQ//eDDPN4kHf33KtOZauXfSSS/bp+Ylu+a56xuV9fPHF2nsYA8I\r\ndoNlojIGs/N+uLIiUyaclNX4R1S0cCcLliE9L9JxC5gaAuM9xi2tE63NW0Oi\r\nUNd8x7i/9p6OWdyfbMmi876fq2GXDOtRLRf1UnkM/Okno2zQi3gA2dcZtIG5\r\nnxnj24ajJrxv5OExcEGxE5qbHBFOjvCWuwb6h21hBqO7tY+1gRFZdyi/lOwm\r\nI3fp0j69bHuhJc17DvfYRWJw1DbyTW9nY+MBHvSwprCxzVOqqMo6WU7phiLA\r\nu5qbiVjmkEdaDmG9ZJ6CExswcKTfAPKjutroTQYfn0U046Wcj7L9brHolw9+\r\nPVyOENZHMtXVxGdgfR046VV9nmKlfxwpmb91Xza9cu/qB830LLxkjQCES7LL\r\nj10Bs9Q8GQwQy6jKtaoDM/jIZ7M8quGE+OIVfyegxFhOkMgy9ccduWHCv2yM\r\nnsnLgYpAWPbhr8wQ48F+rpQ1eKiZdXgD6woOzKI7O+AVvQqy9kDYonPT2pHn\r\nTCzx5FhsWMTkIySD5EYFSBVxCu80+P1sQqA/FvWLc1ztWaBfn3E6uAEfguJU\r\nux41r4cTtb/v/967NkvfDn+1qmx4w1NYlql8QWk+mbzy2SmE3DcA96/hkUtM\r\nIaGir8ZAuBiJstEsbxDkVJEyLviJPfzvNXw=\r\n=/MCs\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.26-canary-6f259838.0_1654684028429_0.6640682895141241"},"_hasShrinkwrap":false},"2.7.26":{"name":"graphql-language-service-server","version":"2.7.26","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.3.0","graphql-language-service":"^5.0.5","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","vscode-languageserver-protocol":"^3.15.3","vscode-languageserver-types":"^3.15.1"},"gitHead":"8deee4575a965f15cdc6235259ed5e1d4761f95c","_id":"graphql-language-service-server@2.7.26","_nodeVersion":"16.15.1","_npmVersion":"8.11.0","dist":{"integrity":"sha512-D+3H3/U/rZGyWVKff9b5plxNNwuBFeeZyONDPHSHYtuYAgdr9lN8AMH4QoLX9kWkkLiQ5dws9b2BKx5xRM4J3g==","shasum":"8d7bd92e7735253f84a307e6c7b596918de6dde4","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.26.tgz","fileCount":103,"unpackedSize":529347,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC6cuQyxgCqH6I3nqrgGJu2iL4f5Dxz3cX7vySsldr2lAIgEt4liNswib7pQqUiyFFR5Yf2jkW4ydbmDy58QQDgAz0="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJioc1bACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpDoA//S/RjPo5rWv+lhbMuqN8EDorP4aUkfDBlC0ygs71r3GdvuCZj\r\n7OtjNYWNM4HxmK2ufGQ/ieCUVd1ILELy/Myb9MdhnvINmVKRLLvQGC77Nh4C\r\nWPSMdplRuALPQCZyCTHrs2zMtzq4ynNHbUWrIH8IWTTJeccEx0e+q/19s7Xy\r\nVCwU/KEKFMry18PcSWN86CA4Qov/SFu2PixMNcAGm3b9zFkalXXOmZcy+Ebl\r\n7cj7lIReaTqQLFmt3IoU6I+nGwq4YxkMgPmie5Q/Ece1rben+bWTDRbkgiUj\r\nzbyKELRWEuJkAOspVG0Uy8eQEIR85VQCXy8VABuKvdLDAvBSSZso05tyGtgY\r\ncmqlMDC4n08SZADFV2u8M35Lmv0xMViqanFuiL2L4Y1T4opQBGEXfN1inUwd\r\nn9AaW/hPXyQhSWSoWibHqRYgHGIZxsza58WLTBuXLq4Plo4BBY2D/gjsDVRQ\r\njiLP50A95KD4aOF20q5Nt6D99V9TwYwuRgLQjVY1xEhjgzXHrVDel/YuOLOl\r\ncRlzkX7HoCnepHlWRYIGzwAJ7ge/EI8oDfsbSro2xl4+t0eerUM3t8vH2gD0\r\nmVCwpJt49X3VoRRTdLo2eXDUaMTgf0ZRE6wFzP8nUHeIKHKbWKU4E9d/m0bb\r\n1BMYeuR0rNyWWfWckZromkZ2QAcCYreCKmI=\r\n=DgDQ\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.26_1654771035006_0.6859403119172458"},"_hasShrinkwrap":false},"2.7.27-canary-4bf7a139.0":{"name":"graphql-language-service-server","version":"2.7.27-canary-4bf7a139.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.3.0","graphql-language-service":"^5.0.6-canary-4bf7a139.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","vscode-languageserver-protocol":"^3.15.3","vscode-languageserver-types":"^3.15.1"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './myproject/schema.graphql',\n        './myproject/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a basepath as you wish in your `graphql-config` file to preload `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"4bf7a139069f0a0254c69f1ac250a74fa72fb46a","_id":"graphql-language-service-server@2.7.27-canary-4bf7a139.0","_nodeVersion":"16.15.1","_npmVersion":"8.11.0","dist":{"integrity":"sha512-7LifqcBGa6J4+q9WXAfaLbsizBZuwQCbhuZMlYfO17zKjo0U+wK+fEFFVrXYgfYJkyrrGf/XUurSsHzDASVoeg==","shasum":"55b864c5d70a6b7c9e444fd97a728d419ada89f6","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.27-canary-4bf7a139.0.tgz","fileCount":103,"unpackedSize":533191,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDQyOR8BzY5MoVJ0yYKvYspDgmHVUoDDo5N/Y/JSHeXVwIhALBitkwo4XxCYVF9oETVMkZBx381LNNTQymLMwlQjApR"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiqXwVACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpOVBAAkrFFZlgZbcbM16xKvWZz7o7Tq3z5fTq+kzJi7b1yubeh0sUw\r\nIS/i+o2ly8aqsQW8cjWa+Pwaa2O1zOwHkX/sQoc6Is3AUyVhvHKYp5okVu8f\r\nR+cnRzB2D8cLdPPayvIHxOoUzMsp7iQOtkgeUl003wDu5kJQOZFCBhNrpnlF\r\npLeB3QJpN9qOqPL3GcEeGVZX9Cu8/fLk57P6r5sderkt1xCcV9uhI9YPH6Wq\r\nZWsxXBnXLTKXe+su1aqX05/QzIffI86cFeS5c8/4wvxR7/gNm+w5UVQWEm8k\r\n889ngBEE4aA7uFRx71VSZw9JRI4hMcVhiNzclVrLb+gnXsD35xyKOkKI10jZ\r\nyEbp7hzhK7efcUckISIRWxUKV8EZr/oMvytRPaN/dhwaNVrIB7On2PhuB9JE\r\nFFRcS5dAieS5zENJkCRycFiELGFFUsrg2UQU4b93XTqaSmwE1RiTWlj3OVFh\r\n69QhmfCy5keJatHwEi9rAcNBFYpGlNFW5V/9nIIa1Dyy1mfMsaRLpctyJsms\r\nSw6PqDUPZvxMSjW83Ne4JZbEzshnDDI+6uqm/AT1GckDcOUntLT174xIvrDd\r\nDnV36Yoy8DMwyi6TCAQNbimXZOB3SLTkQZfTooMs7Z/AJvHag73CkWIEd87x\r\nJRi1bEmoOjmyaGrFa7FxJUGvM8XFKNwiNMk=\r\n=oXT4\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.27-canary-4bf7a139.0_1655274517799_0.20751719507201005"},"_hasShrinkwrap":false},"2.7.27":{"name":"graphql-language-service-server","version":"2.7.27","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.3.0","graphql-language-service":"^5.0.6","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","vscode-languageserver-protocol":"^3.15.3","vscode-languageserver-types":"^3.15.1"},"gitHead":"915b4ff9264002cc45b9006c14417fe06a6ab9e3","_id":"graphql-language-service-server@2.7.27","_nodeVersion":"16.15.1","_npmVersion":"8.11.0","dist":{"integrity":"sha512-ogHYC4xrOx6cTmJ7M0e/JbNljjP5kRGzof8aIzGrnOxPA53qG9XqUJEu8kKiEhiVh+AkUt2/mpr733xJcjP5kw==","shasum":"46774623c1e3052f516244c3034ebcb1f7cfc5c4","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.27.tgz","fileCount":103,"unpackedSize":533155,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCMc4yFCWj6aheczy5tOFLP3lprk81axt9etqf3+xFiBQIgf1dBrujLP84+/2jRHZoHHOZ+o+4dNRlMosfJTaQtggw="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiqYBLACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoTWg//TF8P2F9qpEkeChLZ+SsjhoA0rVkUagDPbDP5tNx6KzPPHnbo\r\nRqaN7ZXbRYK3AZG4ktt/NHESAJlJydS5Iami0OXRBZ0aKOZcpvJkM7FjoC8/\r\nCvXSPgZfc6ymISAWtgH533DQiC70zH0eaO2yHXaixMDCt56ws++Ooc+ZIP9H\r\nzfl2MvFQatxILMc9M1Z7CVrtgA7xJpYZUgLRW1ZFagVbtPJhKYT1l+IVvdQE\r\nZkWxrOJxffdVw2kQG0D0hQZJmSs+YFCK9rGWIBpK8k4HFsp9h3pOl48Q/jqe\r\nLAkFDw2PeYhn/tzgIyYiObYT7PATKn2UInefNDfm+yaAhZsIr70zfiBzmSA+\r\nx3qC8jx9X96iig0CkEPztob8xSoCat+dj9weLZBIhD0s77SBwoa/hxKKRqjK\r\nAsh5m1BJu12fKL+xo8yHD2vMB5Oyf7FIZ+GsMmlYAfOspJg8Xi096HSTXg56\r\nTfE8dTe0e2RAOKUbXxwdrc39m+QDsfaUih4BFqmpoBZQAXozYXtSUJeM9Vlu\r\nxIF2e4+366nmvqTrph8P2BAY6vkzgtEgEu6h3DL8a9UuQLaDONDPUXmEc0D8\r\nG1Eu+GL+ywgBvWb638NWS9XUV9Shwn2qkPUEWjlTWS5UgzytvQgOpX4XuM1G\r\nnyouvNRH7j4LilvF5yLj1rxAiwjQel7Ejj4=\r\n=CGXY\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.27_1655275595411_0.5541802742321458"},"_hasShrinkwrap":false},"2.7.28-canary-0ac0349e.0":{"name":"graphql-language-service-server","version":"2.7.28-canary-0ac0349e.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.3.0","graphql-language-service":"^5.0.7-canary-0ac0349e.0","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","vscode-languageserver-protocol":"^3.15.3","vscode-languageserver-types":"^3.15.1"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path as you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"0ac0349ea0021c92c91940e4a5e6ea3200e71af0","_id":"graphql-language-service-server@2.7.28-canary-0ac0349e.0","_nodeVersion":"16.15.1","_npmVersion":"8.11.0","dist":{"integrity":"sha512-MZbxyhPj661k3uBzvBaEYL7qIwnw+Y/Z+41tZ5iaSDWKouZReeFSRCWJ8jkqTViTaFinYhvyNIsIpH4PEbCSBw==","shasum":"2bfffd2b9a49e6b4df87d8bdc1ed06922db8b8c7","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.28-canary-0ac0349e.0.tgz","fileCount":103,"unpackedSize":533399,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAW79gFzPNm5D2St4+zn2HXh5rQ71AUaXKZGtMhfvSHvAiEA6CuPw3KoQIdeqEnoIQGSUFBozl767KoGhN7al5xzZz8="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiuB08ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmq99A//cejQcI6NEG7lapZhAuOlAOxGrV6G4XYJF5+fnoF14aNue9qf\r\nrbbU2c6ES+jToeB8a1GiYtu32oL8FNuVpKVr3j1LVD3LMaOYgMWDYXs+4za0\r\n3aBG7DLi9kP5LaZh6vwlLPVh74en63KFcrMD8WDJ3B50esTV7xLpqTS5CJlG\r\nyRUiMzO7rhux4eSAPonBOd/g2Pe+ZA26c6wQUIrfmse02mE3CsupMZQTeFQM\r\nbNh2dlK2HYHGKKwQeuCeQ/T6ujGu55/2UgCvqYT6WgBbYeFeVoW0st/jNGjM\r\nYlFrRMvi2ELar0HdFXeSiK3sp59YvNMrURQASQWNlshYjcUt/jVMiVVc186H\r\ntvLaPXgoFV7ZdLPKv68gxCj3gHJetgkGt46UavVD6AkeKOxCXm3riSQ6ujbo\r\ngncLHMYf1AESnhJv8d+f5W4bqAvLAB2ElvypKW1psdz0mdM2qjkCy/K1ApgY\r\nn2eybiYLZ3EwPFcbf81+4Llxom/eK0CGtXp4SvdEuTcrzyDLHT9d71tXkOyw\r\n5Yz+YNHSwLeAfTDgSTc1CU8yCo7e3f8sQCGRpUp6s8X+vwYni09nOZ8DIWqt\r\nrFilunfBcZA2bZKUXWCBbjhtq3Bhw8ZsfzvEguox1oIwar+I0epqOJ9CVAri\r\nPmqgsC54RjepwqoRUo9TvarLMMMHF34ZGsI=\r\n=2Fcg\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.28-canary-0ac0349e.0_1656233275788_0.9803564893366339"},"_hasShrinkwrap":false},"2.7.28":{"name":"graphql-language-service-server","version":"2.7.28","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.3.0","graphql-language-service":"^5.0.6","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","vscode-languageserver-protocol":"^3.15.3","vscode-languageserver-types":"^3.15.1"},"gitHead":"ea15939fc6d5b96e91793377f1ddc13065cdf27f","_id":"graphql-language-service-server@2.7.28","_nodeVersion":"16.15.1","_npmVersion":"8.11.0","dist":{"integrity":"sha512-K3XbelXTnz8E3GsQiZhIZKueWSYa/fu/o+ZH6B7w15rUSzbBUQAy0D6Tf1dz11eHcMeRfNAR41zFxM/gbICP/w==","shasum":"b6dde6f5d710cd722484421e0c8af392eb0e0c76","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.28.tgz","fileCount":104,"unpackedSize":528969,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDuI6DQsWpcnEn5O/hwKLwBfd1YY8mf5BAuYQ+67WivkwIhAJcRVMKTEjUmer3NbRjoT2jYCT5NqDpTtW8xv+qcZZFC"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJixcgCACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrUtRAAm3oio0F798NkVw12L+eytgC12jQizRzVgC2Z04+/rIzia9KF\r\nGcyjrX+Smqn6gcwcUIrovJaKBHfYVrMMrpBwxtF6z2GUZfCXac3HG4otRB9U\r\nZGkhEpv2JGFe3QPkfhC2f4kU/oqutcM3xtWdW/4ZkoJmAtD+Udr86kQQDnS7\r\njo/ff1B35XyIZpLdLHjcuKeUkGtX0B/8n1EOgxE57sll+eBpmRb0PjsSPM/b\r\nUwVaLVv5n/ob3QGw7zQ8QS30Q3dYinCMlcn7Jf2yGKQqKqITDkInX5d3tKHt\r\ne7huv3DbGAhkuwYCL93zLtL1RYzHrdWHxzLFW2cyr2wwOHWEM/k46lR9XMtr\r\nKbzX48oo++JT+jezYu+DnyKV4MxUVVd61e9OtJBg+od0SRBA/2Ya+iSq2wP8\r\nmHTE1qdEzpPfDaYDYmCcm5qTAv8q8nMbn+rI8dm5MRRe+dB79+xGY8/zw31C\r\nZBebOBolRB/MmzR5NXX5ow0AadkaYYQJ65q04BOCRgzHmPmXPozDSQgxghyF\r\nxYSio4VLuOU91pqNWYMvzPcUIFEV5clfe2ut4uIXh0TMWgJvmPRT2PKFpXkC\r\n/HYPmAXUWSLtJeFXBpjAJ7p+pKVlzqV64S1hq5aBNDcJQCrqvpi1rNNmuaZh\r\npO5UWgIkxAmjpYF4ZVuZ19GjHMRJ7FKhzIY=\r\n=smQ+\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.28_1657128962066_0.8733138016612314"},"_hasShrinkwrap":false},"2.7.29-canary-e992d7a6.0":{"name":"graphql-language-service-server","version":"2.7.29-canary-e992d7a6.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.3.0","graphql-language-service":"^5.0.6","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","vscode-languageserver-protocol":"~3.15.3","vscode-languageserver-types":"~3.15.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","vscode-languageserver-types":"^3.15.1"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md) |\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html) |\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path as you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"e992d7a63e07b6ba0af10f8a3ebde462f1ed0149","_id":"graphql-language-service-server@2.7.29-canary-e992d7a6.0","_nodeVersion":"16.15.1","_npmVersion":"8.11.0","dist":{"integrity":"sha512-7eWlL8BQEk+7MNh65WtopG2pSLKXn1gKNzcjCRA+GVoKRBuXR7JwTsDcOiDqXXiGYqeavnLJyNY89eWJYGgACA==","shasum":"5d750b3c270775a5900ce8e6b7969a6394c58d1c","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.29-canary-e992d7a6.0.tgz","fileCount":104,"unpackedSize":529033,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHxKfzkn9Gx5IZsdHWhjGBscKVDWy6aAsJIZfUAVVvxvAiEAwf79ELWK7FkqBz5ePIfBA2Wvdmzm3MWG/P7qWURL+W4="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiyIrrACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqASA//ckJPUtq2S+oMxeMhjJMXv1oZGSyvrgWW1JQQOuLekOIctr/W\r\nfqRgqkgkFH95Qn2cUfvOMZmA4NvYMsS2CGyXvaprC+KY+wGO3nsyhh2/HHcW\r\noU4bbPEsWul47ZiZ88BciP9FzwdiSZzLT0SKwMud9pGW1wsee/c7755ZGMVf\r\nApGTttdEr6FK1nNP+cdh2s+ynaSPHkjrBxE6jTrrCIK3maVVmzHV7lvh7O9L\r\nRzvpr3jqRRj4iswLzchHvlXkeYkyd0j58zhXA22E46p6gGdBcwRBcDsaCyk3\r\nZtLNJxCc8DxrC/elUCsogFxGRRS5Vv8Grc6TTcNVZpB4BsLrk72Rou05VCrJ\r\nyA5C8I4j0gxNstxk4/wbJCb6PUuhkqTKII4ChWP8z6fv9jKE+lLy7EICgtRC\r\nObaCSPWPf74fdY+E24QIkbD/i+rz3FnTdHYYQzNSPYKJAm4i/WCheLgj1n2V\r\n3INje9vs9x98o/EHMnO++STF4i1qvJ83ikAfjAdZbdTptF+KYBaXAjK3a6s0\r\ntzVV+btQ4/GxuPs8qVTS7SltjJQG4t2K31Hy7QG/+zrDvdRwgPvbuefbxzMb\r\nsihYapVGHFz7z7VHR/frmKLMp6hHNC1MJTxIdX4EpI/PX9sgC3RMQMW1idgH\r\nXMc3nSi4kL2HnkwaWxhwJ8RznUyNNl0i4r8=\r\n=QqJL\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.29-canary-e992d7a6.0_1657309931652_0.26911839428048734"},"_hasShrinkwrap":false},"2.7.29":{"name":"graphql-language-service-server","version":"2.7.29","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.3.0","graphql-language-service":"^5.0.6","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^5.0.1","vscode-languageserver":"^6.1.1","vscode-languageserver-protocol":"~3.15.3","vscode-languageserver-types":"~3.15.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","vscode-languageserver-types":"^3.15.1"},"gitHead":"eb1db967d928488b51772fabc4e78486569f7187","_id":"graphql-language-service-server@2.7.29","_nodeVersion":"16.15.1","_npmVersion":"8.11.0","dist":{"integrity":"sha512-CJcP4CHXE8qhUiNY70b+qZGR/0l1aR/vkj4t7cEziBkNoFz7W3aGglR0DO7ANEyeaGROclsPLTgH5enBMR75XQ==","shasum":"4ec126a51b82f28cdd210be044bda00b51f79d35","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.7.29.tgz","fileCount":104,"unpackedSize":529015,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFLxle7sA9F6KsB5CE7Kfyws+ElrQJDt9ysX5uTLrlZBAiAgbYxKCuMnPxptePLIdqAPD66f8fRHtAkyeG9KAu8L4Q=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiyJIjACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmpi6w//dhDuwtxCZpD2/9SkGAt/0m46KSf7oZjHeWGotUQwVFapvIQf\r\n7oJvxzr6Xyg/pn330UCymjnzsK8xTQ06aV0sS0KHyMYiAKSF7+ABGkw9GJdy\r\nMwLZCC05VsAzReL3wOfBtRKV6f33++rh3qR0PIhKz3ZzMy8ropucYQgBaN4J\r\n/ISUUNddcrMgV2dQDNnIxqVcS2MlLOx77gFsPemAS6qZXUyHUfhxNmFyDYYQ\r\nVdvmB+OrCn4ltXNC0RNbvpVP9CrDfa6lXrEDC/HWo3nGwKfKAgVbKj3zhaX0\r\nrZ2A7zpfro4puXf+LReJesg4yGg0c/FvQ4p91B65r/ab3+OAIEkaNV3zlszv\r\n6HRXuiy55mBXTiRRp+Wdfc1bA/ay6F1x6n1jauHYEjBYUzG+aHfYUZqxVk+U\r\npE0LD+IfF5htPhFno1gFTnZVlKXubJa2zd/hUMfHMokdoCwR6RTKE9Ybu7p5\r\nWkcPaiSICDonwa+ccTrxwcRpawfnYw0NYbsntJY1FwvwNlFdWHa1DrNKiafN\r\ngRUkHT2y+kSTgib840aQNnExS6pZEoNxSxcjc8EdYnWpXr8WnrQl5RjpiySd\r\nBPKTt6LQyulPfOT/OszPFe1WtM/kfa1vcoLNjOR2BpT+NRq1mPHFIvWVflMY\r\nWLLXR3ssfoPKRfk0CnzO/aZG1IJ7RsWaDTk=\r\n=9zqA\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.7.29_1657311779220_0.6769258645991638"},"_hasShrinkwrap":false},"2.8.0-canary-e5a02d24.0":{"name":"graphql-language-service-server","version":"2.8.0-canary-e5a02d24.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.3.0","graphql-language-service":"^5.0.6","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-languageserver":"^8.0.1","vscode-jsonrpc":"^8.0.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md) |\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html) |\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path as you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"e5a02d24e8eaa299fb70c2c36cd2813068bb623a","_id":"graphql-language-service-server@2.8.0-canary-e5a02d24.0","_nodeVersion":"16.15.1","_npmVersion":"8.11.0","dist":{"integrity":"sha512-DIGhxAxIoEqZXOtwyFXu3SgY3S9pzMjH0p4t9hgMheC9clw8QJOpmlNLnh9xLjFTYpofZFUU4zBdjZ2/p3vUmw==","shasum":"485e4ca2a5d7d68fae9aeb344041de076cdebf64","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.8.0-canary-e5a02d24.0.tgz","fileCount":104,"unpackedSize":528591,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHqGWjb6hUuy20qNFbyVqhtEhq3c9pAgqF/Ft/DopTnOAiBVJmjdfzoSTz+rHteqOcJAN/ZpQgLP9Qv8FMg4NPO2ow=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiyuZRACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmp3rw//SKBLqEvtZqxURJBlLwsM1KQ6fbmVEopEJO94RkivcIILroQD\r\nxluQVhSQl1Y/9F3qHdVVeDqwrtxrGOgFQPMx4yGUEDYMThFwVRvyLFX8z5pg\r\n2iYSul9zuhs+0EPgVWHS09uuxTf5IwP77W8tSC/zdT4Wlld+XqnEC4jOamDq\r\nRts+HHrl5EfWsF6j8WjCnM0RuJRk8P0i1P6r/T8qwJzFx+JqOAnBiwhKbR30\r\nVnx2Bni4/a5JgaxLq38rltKqHeSXRFM6u9cc9VwwufzC2PFyi3gEvrhXGKSR\r\nsAA0OU8rvr29CimzXWWt/EuXnZjH92jNhQZ6BmtbKQUV+cpGuYaPnbT9JPd6\r\n2xsf2Gg2zhZaCZm8BxBBxHJrN35oXpWGq07X2D1RRKJSeDdGIHfFLub/EAM5\r\nGjXNN/1Jr3vZjT3NAOX3nK8Mu19ojjOoRVfXX3P4Z7OPIXLRcUIRL6Q3JKsl\r\n7M8QP6WMmljujEOfJGQ3Xdgxb/pWr9Sh2L0Ebv0XX6Uo/CnW7hIxXwVrPv0w\r\nDRoCz22TdXe+6Xy6gnJN2/nsVwX7e97jJs7pB96glJCo2skJ8xaoWOWNgWOV\r\nQE4C5+YiONPCdrbfureftFXfDpx9qOopcArXCy3VLQGDIOhx98o5dO2AXIgJ\r\nCkrGBbGP8jCbUKGL9rf1C+ydIkGcSpPN1+E=\r\n=vXVD\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.8.0-canary-e5a02d24.0_1657464400928_0.7093415862862784"},"_hasShrinkwrap":false},"2.8.0-canary-7773f5f1.0":{"name":"graphql-language-service-server","version":"2.8.0-canary-7773f5f1.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.3.0","graphql-language-service":"^5.0.6","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-languageserver":"^8.0.1","vscode-jsonrpc":"^8.0.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md) |\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html) |\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path as you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"7773f5f107d66be74ca7c89cd52e754ff426599c","_id":"graphql-language-service-server@2.8.0-canary-7773f5f1.0","_nodeVersion":"16.15.1","_npmVersion":"8.11.0","dist":{"integrity":"sha512-UyPAfwBXlIpbXA31kR/F/q57IJk2MsuPJ8oAnVVx3bhHMm5lnrz1wAGO9KB0FOJfV7Z6MGLVPwlPTEjB9ToRPw==","shasum":"3e62c963d8c106b44893362dd3a1bd45b4058ca0","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.8.0-canary-7773f5f1.0.tgz","fileCount":104,"unpackedSize":528529,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBVateo0FAhhE1s7t3+P6mlHzFXZQR3JVrLfTLheUBbMAiBvMnkFUeUP7bJa1KRz7OFV/nhUg60vljVJSzZyfj5C5g=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiyucRACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrvKRAAnz3fYgH8TXG/xunhpupJH2I3ElXFw9OSiNXWEibkS+iCs2Nr\r\n5RtzZ2nV4x0RcQyZQfKXQzlIexwiRUw6s478XdHuka+b2kkvHe5rV9NgjsoE\r\nrjePzOr63DKh5Eo8Rxi7QJsUpI3D3Lki6rJV5BtAa0YKBfK94X5/ogOv0/AD\r\nU8xLRR0eLlXDEcf+vNW/wBIwm+UM35D7VRYPBI0P97fw7OwOCrf4A3rVYLpK\r\nEsNgBgXzm4eLmOHpJX3/YAnfV0SWQJ4LZTMHRYl+hGqHkx7+xetUQo3HQRI0\r\ni8fyRl2ndWteD0h6NELRwv2FIin8vft4Oa4BCLCKsjp0Qm5h2rUtYFa37MzI\r\nVbcNF1Tqp62231f70TMz4iVFqdHX7SqKYvw2ZNgvi/Nwr0zzyFXivIjDwnVj\r\n/RWiVejB0F8qAEbsUhRZ9XYQ9BHl1f0TlzuuylTF5pNku0DPKV+SsG06fqkw\r\nfLNa/bmcr9dFpNjUh+8/Tq2ezIaSgTWudl0UMwqK6Bs+hOPdgne/zk2TEj9O\r\nOsrXwd3+7URmUg0h7YgXuTAfyluVHpmM19Zy0zfJCLKfhXryKcZuL5TRq4Lr\r\nozFvhF/Y1QULFABzPUnyX31aXn/J0Wsi76E8bNzTCgKbz7ocP302SQXPC442\r\nZZybvRYcZFIBJJSu+opCMTl9/vmbT1Ydg1s=\r\n=ak6j\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.8.0-canary-7773f5f1.0_1657464593492_0.18716640589053202"},"_hasShrinkwrap":false},"2.8.0-canary-8d6d7f38.0":{"name":"graphql-language-service-server","version":"2.8.0-canary-8d6d7f38.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.3.0","graphql-language-service":"^5.0.6","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-languageserver":"^8.0.1","vscode-jsonrpc":"^8.0.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md) |\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html) |\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path as you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"8d6d7f383b43a6ed0d6cdbc82cd1dd55973e90db","_id":"graphql-language-service-server@2.8.0-canary-8d6d7f38.0","_nodeVersion":"16.15.1","_npmVersion":"8.11.0","dist":{"integrity":"sha512-rkthlD4i/V2qREAnYjasAk/6BVhK1C/zZJkPvctuAQmOJpODae7p1ltHaUZ8+VZ82WAt+e5SQ2JCZuSxo03sHQ==","shasum":"3fa3ae884898e67194865014d41c7218376057fc","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.8.0-canary-8d6d7f38.0.tgz","fileCount":104,"unpackedSize":528529,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIG5V19ofIhA1kU9e7brvGEI7Uxg2BAsTHq0X2mkwhS5lAiBfJ48jy3/w1DunwvJETXoAU2e8qslPmmV9+ynDKHJ5/Q=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiyu4mACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmq2NRAAjdv0+cWW7+i3nhedLGDFKuNHJdmRs5G4vUdk2VDsjvQt8k0Y\r\nMflzc4BlLZ6UZ6a7t+MDevkgpq1sxYLzaNmWEktXHyBGZmyX8EbEPQ9otkGd\r\nnyrQ4OXvwqiRJyAz+AJ1Z4331SDbWto9JxrG017n1N3v1mKsd7meBzw4WjBa\r\nJsgQoAs6iTHBQKYVxS7sAAwGegWkVfxoQ9dJsw2pGVy9AK5HumeibnimL9CO\r\n+8sTqYT95XojbvPdGwQ9FKnbs5WA7oOivGpgz6imVvzSobSddmaLxwuPO6uL\r\nOb4M9wgoI7U5TZRgK347pHYdpnx+LPQE3wV3aNoy0kd9mcJoDDRE5pzQC+W9\r\nlyDNzJwoa+Hxt5IX68c3bLojzTvPc42JJ7GGnmfFkFfEq8Yp11KstqY+u7+U\r\n0j9fRIlVAilg5S0rZArt0aJuAovaEPxpS1gb5i+6NYorB6HIWqRDo2WqCF1R\r\nMrqc4/wXxyley3UxS6mw4ReXVUhQioH9BuxgBTLvC7FiHKq86FsI/CVPYg4k\r\nQ2fzSKjxqpYBkdIxm3WAkG+6sjUPT8nH2aUMHJzebr5D6vxD0l9vauGRCJlq\r\nTZlWjdm3M09rn0pzEoAv8NbtuWMR/maVQSZvVG3Ryj5qM14KG2pZJEvKOm+R\r\nXvAf3qTQPvb1Co9HIL4pLzGdmrP06eDznxs=\r\n=RRCF\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.8.0-canary-8d6d7f38.0_1657466406664_0.31217324527346246"},"_hasShrinkwrap":false},"2.8.0-canary-0ab0e498.0":{"name":"graphql-language-service-server","version":"2.8.0-canary-0ab0e498.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.3.0","graphql-language-service":"^5.0.6","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-languageserver":"^8.0.1","vscode-jsonrpc":"^8.0.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md) |\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html) |\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path as you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"0ab0e498e11e0fcfddf7eae0c707b132e9d0c79e","_id":"graphql-language-service-server@2.8.0-canary-0ab0e498.0","_nodeVersion":"16.15.1","_npmVersion":"8.11.0","dist":{"integrity":"sha512-c2Ly+pNI32Hzgy+P2NkQ6QFWmveaqeF4BHh0SRZIbCHDCuw4vNHVesHgyGrXmIof8PZADajYTlJHtLwEApg6MA==","shasum":"b2be01a919af85a69eec6cfb5c92b1fcf21a4084","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.8.0-canary-0ab0e498.0.tgz","fileCount":104,"unpackedSize":528529,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCRV0XbI7qAssTUz3GY0OVs9Jm+eO2aBJBRX1dICyLvnAIgbRbyi6VoVh/76M3jCFtZiXTjejcQYBsjSeX0M3bL2XA="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiyv7fACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqRaxAAo/N2kr6i0M6JNMNkD7R4Bl5met2/oj4QbQuelAVJUEeh3/Aw\r\nL2PSoZoZUpPAzDSuw6mH/yPaTISW5PU0nOuYPeQoYV8lUSFckw1oPA5ILTg0\r\nGghHbHOSXRo7eJYljcTO1cK9JiK2IAFILbSV7fRP0AxlADybeDaNSj82ias8\r\na+z4Lz2XksRMLIeiOgcUxseLpAo6lGElY+q0pUs7ysxDjeTCvrPe392pCPdC\r\nH+NljYtuSsdnxUQ5FQkwRqkYbhCtGWmsghxPBbumQ8YNEYSPuln/365eKOat\r\nIDsRo5PxGV6uqvI86hdD1Tm37s3mhTBVLJyaIyijgiArRASLqYEROI429QE3\r\nCQ6yTEpVBRipbzuV3+z3PEA1VaVEGVcpRR4waQUHViVhz3To3VDuBbMuyHNK\r\nern7TnXZ11dEZHLdKzcA5jUQOG9MHOXOPQWBp9rmb97CqUA0ORP1euB37cQk\r\netS1lVaDSTjFHoeVp01CVgVcRPiTGsE3Am+/kb/+P+Xx3tYUvnAHnTrHOzJ/\r\n2Divi23+lY0Pbyr/oQATR1SrcTWGtOP0h1KOFxc9inI275xpqlSHEY/2hWM5\r\n10FdpD8jL+18LOukPCdM/S50kONvTD20fMqAZlYbZ9Ocmo9G3SMRnAeRJoJk\r\nOI3vFzf6DEyEUWbwpDSSTyGAcU4Wv8j44+Y=\r\n=Gb8h\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.8.0-canary-0ab0e498.0_1657470686940_0.21180384750021064"},"_hasShrinkwrap":false},"2.8.0":{"name":"graphql-language-service-server","version":"2.8.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"^4.3.0","graphql-language-service":"^5.0.6","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-languageserver":"^8.0.1","vscode-jsonrpc":"^8.0.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0"},"gitHead":"d7d877580da70ee25c351e9b8d04a1b9f3bd9dfb","_id":"graphql-language-service-server@2.8.0","_nodeVersion":"16.15.1","_npmVersion":"8.11.0","dist":{"integrity":"sha512-2f+LpDbQsqyycYgC8aWMZwHda3j6gvCiCzaJL1eSwrcSBY7mCCR6aa8fBYlp0hZm7lpOxVrCxdA4KtjK0SpKKw==","shasum":"4e28d8a49785e9ebf47f38af2b9f32a3afd7a01c","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.8.0.tgz","fileCount":104,"unpackedSize":528511,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIF1mt9lUgyxKQ27toYfLe+vZeCzSqH1/+tIsZmJXThYrAiAR0ss+rgjj2VALFhQBq7lDG85HkwmilCM7mLY6S04/UQ=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiyytMACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoiCg/+OlRSp5AJG83VAnR9ySZ5dkQGauHxzwLwpzjWjZIDaP5zSVnL\r\nasL2V+pF59oikmQK5jOA5J3Qw1n813OPpWu0gqc4vMEi9nyTJEatDMc0TEu8\r\nhpFaPz9BjnLvRCmIDPJ60vI38qOczLGNLBXlalJW94DtTV4ZG8/8SAeBno+6\r\n/sm3P00cmTYeUwdC20r/dMvSd11tM66s00fEB4BPRZHF9aBJQBxRBKNMDMlN\r\nbgd7OQ/4S0eHULJwu1ddaSdajJlQQs4GuLvhWOHvIQcaMWTbbJJ8mfE2CUFC\r\nWWVCFp4cNBWYOl1565TmXmTbeTBk+s0gVvLY8K/1kr8XQNGtWJW/QG/xReWJ\r\ngyDb/M7yLndD5X7R9yAt1gLggUT94Jj97jFqeVMxTyIxwyUaueHi50K0y/Y+\r\nwPswHhFz3bywLAj7TV3atebJROH6Xt7qz3z/JrjKUgbNTlJWe68UuQlf91E2\r\nadJnovqNFzwVPHwoH6cvQBihtCdGTqKTDNvNej+TJm6vsxWz5XR60rYkFLWn\r\nR82R8GvAYSc96QJ3MW/8OcvT7SMYVjy1+9Eh9MpZlL/FdzXpoPpQfbZhstYJ\r\n/830Cg0njAuT53UZRibhNMH0+fzLjvQjbjYPJo34nYxBVeSX5R9jBvmTc8xK\r\n16B6xGDaV2s7h+CXcbuKqgs/0pX2jVJ92kY=\r\n=uMwt\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.8.0_1657482060420_0.534758692520114"},"_hasShrinkwrap":false},"2.8.1":{"name":"graphql-language-service-server","version":"2.8.1","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.0.6","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-languageserver":"^8.0.1","vscode-jsonrpc":"^8.0.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0"},"gitHead":"0fc32737ff5a22fcc8ca6ab4926a1162873c0967","_id":"graphql-language-service-server@2.8.1","_nodeVersion":"16.16.0","_npmVersion":"8.11.0","dist":{"integrity":"sha512-/JBaT1odDJHeM1YMrY0YQxcmBD4xAaB2108xdbNGjkUPw7PURQOWbPc5XhSrnuYBUV88KVmjjeCFx4wH+EhDeA==","shasum":"e5bdba5b761d39d5881d5c88b4ee3cf557bc597e","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.8.1.tgz","fileCount":104,"unpackedSize":529146,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDPlNpy8aq+DHfqmfDbl6j4ZhZu1q84VCT14TDXOi567wIhANz7yFuI2OBiqMhwihqmtzkzig8+IOsvN8J2xxIevLfZ"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi6/tdACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmreTQ//UZ93PEHu07/SH2J+V6F63SjpmLhScgco2bHgC+iOOrJGuQGz\r\nqmNdb7rSPIYW6Wz4KB5N3PRLI5C6OFgTDTHDOv4Ba/D/tjuf4UyQzvM1NHI7\r\nWa7VOY1uQPKztwx7QyeNf/7KF8bJRJmzHaxHGHmPJvXBcqlMJblIcxk/Q/t7\r\nuME+ccy0t5X07Uur31zyDbXaC+EC1nQy2erGUeVmdiAFi04i+0yIIDNs6wiy\r\ncirsQ7XNY0OHBDpBpUhjpYiOQ687dIJiUtVA7N9vwLUxgkgKiZ5MNxrvOuJf\r\nieHztEiHHYIiaP5G9+01egHUtk8nvKwCFRaoCgxeqmSAsb5JBv34CkwRQrDS\r\nY6ewiNhKBGUYsU4jEMrDBNZj2N4oP2O82VCv2Ez4Iz7vrLKrCugfHOPeVZ9H\r\n7jjDzqKlkUNsi6MdnYfjxmtsvmO2j9SLTX4G6c9eMahnORZ5q7FjvH458z2S\r\nbHPnUjHmZdP3EwLiD3sIWl11elzB5D5VPvBoiewL8xYW5NCDg39IevZSof3H\r\nQIvsbEwDosIFwzf13Hi0/KA8PPu7MPtTJc1TvyutrrkwpURJoq2Q1Vy33YwX\r\nncLaCSlwZujjMzLyLYhOMtRW31ab0kFcJ6Ag93jo1LJ5VoGw1MjKPWce1aPB\r\nvE9BrgS3sH3Avd+wiyWo4EO3Nzfte0mNrhs=\r\n=XSX3\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.8.1_1659632477083_0.3649343002713872"},"_hasShrinkwrap":false},"2.8.2-canary-814664ed.0":{"name":"graphql-language-service-server","version":"2.8.2-canary-814664ed.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"4.3.3","graphql-language-service":"^5.0.6","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-languageserver":"^8.0.1","vscode-jsonrpc":"^8.0.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md) |\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html) |\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path as you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"814664edf52bf53a54ad8537b9de085b1b30d733","_id":"graphql-language-service-server@2.8.2-canary-814664ed.0","_nodeVersion":"16.16.0","_npmVersion":"8.11.0","dist":{"integrity":"sha512-JSO61QgE4zVbmQBXH6RLn56fPY7igPPpXhaGJhCWY2Th9+s1zP/4zFrSvFr3s4idFeJOQG8u/L8rcqIShblPfw==","shasum":"dea5cc6c7d7c264ea58a34de8b438437383460e2","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.8.2-canary-814664ed.0.tgz","fileCount":104,"unpackedSize":529119,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEIDTaT11jzGKz9wg/W5rc4aoZGlzLhiUe1dmRRnWQPRAiA42FVhyLSDiz3CylYU/BTet48fLFwS5lbvF9wxPBEz4A=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi9PV8ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrSPQ/7BYWUucZfXeD5fUf+MxJZuo9SgA/fK/gqNzvkYc9RU4U9KfjN\r\nTL4/7RXtaDzgbFo2b3NflcVqZ599KQ9amsCTWX5XyIQgJfbP/iZSkUbRmgPr\r\nd8+ObGtaeP82N2tvRPjMfL9nVwqlveWakOg1TnXgyT+ViSXcUo35Jcr9gdbd\r\nTbKP2ajD/yn1cHe8jJU/j/ytulnrdPzY/YUO4VDlk0qxuI/dIPYRVkjma2TE\r\nR83cUNVmXct6K1vgq8lqxeZ2INfZM18R2aZ8Mla4friDI1tdd8TPvBnJ058p\r\nB7IQhLdOUDw+Q3tV35AUgERfc7Q38Ybht02dyIMRME9HDRriqyBrqxeu9670\r\nKk1kyTE76sCLPwv7h6Z8sgw8w0epx9WkIRhHRHKK0CDpYfo8eFRRHFu8jFC8\r\nN5VAok0H/4GH8odkccFxi+pCYU2rEtl3sCJeFFYu0FhvwqtcrKe/MUtpBWHc\r\njaUwmD0gvzIltYyX3aSHQfK/WQHk6DvIWSDeLmjE9pU0PHaFMk1PTj9xx3jz\r\nnu3o7vDuPtcoHGCrGLDrTtmcJu7kpYJBVrxghWVaKQI7HIcxJS2QrL2R+6h/\r\n2LzNjT95eKfO/0IuUlWaqoeZhxkEdl20LV58UHc5JNtCGLOOb6CwztbyfqaF\r\ncsEzAfnhOWhNu0AOMPN+Bh1gTdfXvKckO+A=\r\n=a4GW\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.8.2-canary-814664ed.0_1660220796519_0.4077091724475108"},"_hasShrinkwrap":false},"2.8.2":{"name":"graphql-language-service-server","version":"2.8.2","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"4.3.3","graphql-language-service":"^5.0.6","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-languageserver":"^8.0.1","vscode-jsonrpc":"^8.0.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0"},"gitHead":"3cd15bc2480ccd04913aa1e01cf3b5c1892752b9","_id":"graphql-language-service-server@2.8.2","_nodeVersion":"16.16.0","_npmVersion":"8.11.0","dist":{"integrity":"sha512-hjq/M+iHbzvLYwN+z6twnx2+Q/jyS10hRhNPzR/bbBylFMPqqA8GTJTKmKQapahIIS8WIM8KmD+RhxibEHukLw==","shasum":"6d9fe69995f622185efdda220b2b6375a10a19a3","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.8.2.tgz","fileCount":104,"unpackedSize":529101,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCpIfXTnz68lalVNR34fvOYvAgyCsthBgT7jqhLus32pwIhAOg4Z3NuG4WvOOy0zfsjCezlLI0H1In0e0MLr2XeRK1e"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi9TRZACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrlKw/9EzbvIxswu6ej1hHiIsyeRgu+wJEnKtOq8tQTD4HnGZ/V96ka\r\n7wZdnCAeEehNdSdqPwr7Gw3xFh53XWQWRLxSsqUcRR4igEd9LboQUbi2pPYA\r\nIXrZOXHA45LArQSS06tAphiU+E8FYmfprkZL5P6UPfOCSNQfHqCAHesmGND7\r\n/OxpHKicWLgClw7hCBIVzLJQ608KYnP8EThIZoVxlfSW6PhOiaR8KdqnGctt\r\n6fBavmXggM8jQQBIwZ5Ut9zBFnyrkP7typ6KOuhkQog3HS6ej05s62qDnHR+\r\nmYJOby2m+Gf8VJ9xqod+xJ6qfyTEOaNQDgmTSoKhQY+0Td2mhufKZ+m5dF31\r\n9ubbYzABNWgmXHROQh22MDPyoZ9QjuWKo0YpyIos344RyubKkTF5jZZIoctu\r\nK3w4whqkJAEn6Pa0WnicFJBX0mgJRrUfMUdD+K6MmwlngsDQmeyNvrn9jW42\r\nS+l4R+qLoXqSakzKeSbCn7RH+YztTimiwM5ALwv5r7q+/jqAzF9sEM/cNcYC\r\nmlm9QZB/F9NPAtYRVqMQWE/8Mxgo8n0cSTeWNkNFPYrq7/wxeJk+dxDhj4y+\r\nwi7ZnNzl6E7/NaCB9A+cA4HOnwzz41/7puHEHCn5edE9rrIAh4Q1mYwIDWBz\r\nEKS7qWmT34xsOVLZUvrU9dxoh5L5fr+l88M=\r\n=4w/k\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.8.2_1660236888771_0.1747072793265767"},"_hasShrinkwrap":false},"2.8.3-canary-b2565cf9.0":{"name":"graphql-language-service-server","version":"2.8.3-canary-b2565cf9.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.0.6","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-languageserver":"^8.0.1","vscode-jsonrpc":"^8.0.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md) |\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html) |\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path as you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"b2565cf92dc9443bdda4212c328cb2b97832023d","_id":"graphql-language-service-server@2.8.3-canary-b2565cf9.0","_nodeVersion":"16.16.0","_npmVersion":"8.11.0","dist":{"integrity":"sha512-pzhe+bKYd6tRRDK1bLyOpJtSN1gSiUCTS6Wi6A56ALbHSKNUfoQU7RDfi7C1mr1uFenRIxfTssF5BVAIIKxzIQ==","shasum":"b216a1e4029cc7fc17a7ffa81b9c3c2ca1f5fb0d","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.8.3-canary-b2565cf9.0.tgz","fileCount":104,"unpackedSize":529119,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIH5ZQQIoy+2ZQW9qHb5UQ8gxl24u8YBFxJhba+hyP62TAiBuwUG9Ze875tp8wQgYUKWr2V2Gllxpk8PfBz82jLDTfg=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi9YNNACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrBzxAAoZJfMjiHkiE2802cdgBrM18KIsz60EHp3eCrO8qgTg4kut9y\r\n3S56gfP9+xGnjHkvQM56i/ChrLo8YXUniP4OXgHaXUKcvXhKhxjXeGBNfxpm\r\nAh4isEYNQ0Rj4rVxgykyY5yBm416MmVVvZP/n3QeCMr13/+ebm6GvNjocDCV\r\ngOzUDyIlLrk3Y84Hwn0L4Lspkdl9pK1Yc4pizeSW/RZ16OvC6WCbuZ5SK+5O\r\nSk6PSuFRiLQ+Os6iDNZ0YfSFV6Fm1JFtLPurn7C9+iDAVy0lrC6+NbEkQ/gP\r\n2/MsT5HG/Wxi/rFeTdWXTBWbmxpmMsY1xw2pWHONb7RZ3Hy5D5kVpDkMEtOn\r\nv4+Vx0w2tDLd6+pNKzVFC2al/7pTbhrLviMa18ng7tOI5RQYPH7bABgEuszQ\r\ntP03dArP4X+P3y3KF64a1UqPmBT+GXINeQg8tZcKXwk1EvIP5f9A/pGrEz2Z\r\nGoM4HANia3Eskt1PinVPvssob7z6fVvkn3WQEHq6gx7uspQjWDISRYOVxg/2\r\nRfm3EIjQM9ebLgi/SBicZEiPwDewA2/WoXuMQqVGeV6IIWuAyFhdiWL98ZIh\r\nkcqA+R6A4F/9wcudXMAVmUJl3vXLQr7F7dkX7QlixY85ZmbF3LwBOFs/9vPD\r\nCpfV6Sibem/6Wt9Ll1miOWthkxctOtBCz+A=\r\n=hnIp\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.8.3-canary-b2565cf9.0_1660257100984_0.6104479095115007"},"_hasShrinkwrap":false},"2.8.3":{"name":"graphql-language-service-server","version":"2.8.3","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/types":"^7.17.0","@babel/parser":"^7.17.3","dotenv":"8.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.0.6","mkdirp":"^1.0.4","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-languageserver":"^8.0.1","vscode-jsonrpc":"^8.0.1","fast-glob":"^3.2.7","vscode-uri":"^3.0.2","glob":"^7.2.0","@graphql-tools/load":"^7.5.3"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0"},"gitHead":"6498d5de7889cc80016ce95c068a435073af7433","_id":"graphql-language-service-server@2.8.3","_nodeVersion":"16.16.0","_npmVersion":"8.11.0","dist":{"integrity":"sha512-DxSuI6JXwJKN3cUqD9dJbB/MNijmlPvT54orHTNqX+CrlhOyaiMwOsqJ1BcVccUmbfIBPHuotV2sPOOSB01iKw==","shasum":"ab5df58e6ee3885a7da425b3fd6f7e7dcbf7d908","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.8.3.tgz","fileCount":104,"unpackedSize":529101,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDeW3QX6JY+5v/23126FnI04ptu3LYETfkruwwYbsrqfAiEA8ZgjuvWmewaX2Z6Ro4914DKrcMVeHF906iuKHrBK1Pw="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi9YcgACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoSmA//UEAgEa2XsvU0cXZlUL8qkovarz7RTyqUtJLeLfArABx+wu6q\r\ny5xjZHqR2oaFwDSZgQ+mC4gOfa90lDYDf9iKw+81alHyBuf55ckxbevs3QCk\r\nDAHUehb1bsm04MCBSGsriRxEi3s4AdMQ0raalOO+ZpCpXkokUvGwUdtNk7Gf\r\nmnJPu0VEr/ZaicsUsTGx4pzFgzHkQuJ0Tx9XCi+TFgONdAqLHHvCDl7sfsDc\r\nyi5zxdnPVag8pWFF3CAQLuQNzXY9G0QmZXZr3tkcqoFNwauWfVrTbD2QTrP+\r\nT5ZuzdAfnCHPpAhbYQNzoZljDet9l2sulS0Bg2jPF1P/4HLqqO3bBNZyYRQp\r\n2o+H2yED/Bx838ySA4E3cbvwMcUrOTsGpMTtlXPdL2msQvka/cqrYfCYT61C\r\nkffIdiH87LX/xaLQEPwFSGj+uztu1zC0V60NiFMnFZEAw+a8+baWC/hQtqk+\r\n1KcURyoeDCkwS90qmgeZtnqF5UEgvHqHrNhZ6HK19XESiKNCV7IjQrwW3JMi\r\nn/Gf8uwq0e6dBM0dtaryiboOZ0ZctVIYu3QGdV/MSA7hnSqQhyb8HeaCzv1m\r\nYRLmibGtTOwsQXbwojh1YCb0vZztS2RaYzLDXGy9sRGnS8mqoSMeOPqCNCdZ\r\nJkLgdMlzS9Z2YWMy9pKwSSrud7gkcNiLyDk=\r\n=On9K\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.8.3_1660258079843_0.5133782181355597"},"_hasShrinkwrap":false},"2.8.4":{"name":"graphql-language-service-server","version":"2.8.4","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md) |\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html) |\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path as you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"dda1cf5454d72dcef09cbce021ec4cfdf1517c1c","_id":"graphql-language-service-server@2.8.4","_nodeVersion":"16.16.0","_npmVersion":"8.11.0","dist":{"integrity":"sha512-LCRrTBZHbop/ckKKvzHXnP5RXx24LfsFhv5w00wV1oMdGr7mMZivoMjVmrd1B/9CgBrXew/RjMbQtUjo8MGSfA==","shasum":"ad2ca1ae11f1a7ebfd4f4d92d06967015b933559","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.8.4.tgz","fileCount":104,"unpackedSize":529344,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFmwnkS+uKSSBvAUlXaB7aezvqIilMyZQQ3qmRo7n025AiAQECvsoTf8EJH9u3Qf4/9tMIY38VvoKg69hUqIemmTng=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjBh9QACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmrm0A//bKfclomXT/fRsrIvJ46CyiPnDMqX8/TP8nkdzKXsc/jLXe1e\r\nx1eqreYb4d4TcYh5SaWB6zgP7qLLOFERnTxAROg0X6ivSSS2m7YeTobrWn6A\r\n0+gvjB1hhM9iluB5640+mEfgRmQMYlvAQqTX3ce9ZFJJpuNIeHjnGmStZuY/\r\nn7cAP8GR4hT1XaPzubNsuYMzf5Rtc/cJfG8BW4/rcCKitqg8ZnhChNn/jVzh\r\nHo1bw3vR5vLfK9JRNjg/oXpyeB36MUpEreqy7AlfdThUcyS6eEVj01Zylo0f\r\nZDtAPeKw/2r4OhPoWs0KaOqh+/l4LpBz2d2QzKQ8fykEHQ2Gmf7tmotpP5I3\r\nY5NJX+sszk9zcon+L6irUGFEFD2AzzchImrxbgS3fhO52zRgyKDYdlIsn0uE\r\nJjnP/VHeyD09jG3sHk9o6BaOF4wkp4+NK1/sbK3V1M6PWoKFU4Cw2e0SErj1\r\nLhyIvSerpiQs+BP2cJtj0oJk309kkeUrWQ/jrLNYRn/XeH2j1/liX9zKUO1b\r\nGn/+cvtkQZMzCfYAscnSj6S0w2cZdvashuzDH6uWYTdmaNCrrIfDzLdfTaOJ\r\ndKdeECaEqDtFMdk+SYLBBYxAhdDZnELFGqOPgBmMTB/E8hD7kScbetI1qo5/\r\n6fxTVV1DTKLd7x19/lnJAtuPR1woMahOl1c=\r\n=IKnL\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.8.4_1661345615769_0.4798696909676572"},"_hasShrinkwrap":false},"2.8.5-canary-8fbd0032.0":{"name":"graphql-language-service-server","version":"2.8.5-canary-8fbd0032.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:language-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md) |\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html) |\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path as you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"8fbd003264fa26003f7153a153c8bb2425eb1290","_id":"graphql-language-service-server@2.8.5-canary-8fbd0032.0","_nodeVersion":"16.17.1","_npmVersion":"8.15.0","dist":{"integrity":"sha512-UqGEXN4TzEGJ0m6Bi5uEYcdIk9QH+7oc0Ho43dmb6v7RspH0iyULx9Zyf2EGW2FIvqSlNHKZUPGmSHrhzWcSTg==","shasum":"10b7f4b0f5c2aaf622dd750b3ac63a5def23e74c","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.8.5-canary-8fbd0032.0.tgz","fileCount":113,"unpackedSize":566697,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC8W8VcN83XzZwOKhudjt/PQOhDYR2F76AFVqhlA6603gIhAIiYjrtHe5iLmytJCMuqVYex6auGrDbp429D6wem1D7E"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjQgQBACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrBihAApRZFlBma23Xd3FarWoBDH87sUZSsmvv2Zm7pP0PWqsdlA6hv\r\njR4exc1TFukEgcPVDX2iHUPexZwjzVvRBvVZCKY38PoZUsi9FsLxJHymNsta\r\nk4slz7T7Hhh5piwqevrdN9x7sq2qZqTum7tMh2tX3OtadyZaVOomvThXKR42\r\nxvFvV095E5xCWcErQwCnXFrH+nqtI/8yIpDNcXouRwOrtJI54IV6ZlsSDDgR\r\n1hExBmQOz3keS8Dsqusrje421IT7j+aFHLcxqzfIRfVo1jqc69Uo9qvDDq+k\r\nKcd+3NqslLj16c7EgPEQUwTpty1GuledPdqXcVW4zHcZYPsgOlwu1g7H2BUb\r\ntUCBW0BsMgSaXiyC2bToLg86/DjORs58Vpux70FSvaEV6KglKr8uIrTtHmd5\r\n+cVMmSC0OIk0Gmwh+oULmg17JgnUolLoXtmAdvZx35j2J9GrAeekYhbazQg4\r\nxed/D5xFTm3xp6VYO/gZIiFjLhy6zi4WrxVUo0UkF/mQXOxI3eC8CdysKFTf\r\nbf/CJ4lrLn2m3RVLgHnOvVozjphqQBWhmnNZW+A5qK/dwAUMxTGLa3TJMqX6\r\npOSLuWKgEGIREOvVeqdORrmX7lKjWOaj4ymRfxNqfIaTbgMJl+7q6vwp8jjj\r\nuU8SrJiyPo9eR85yQ5JOan20p1jbI/POe0Q=\r\n=opH+\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.8.5-canary-8fbd0032.0_1665270785076_0.516273182576622"},"_hasShrinkwrap":false},"2.8.5":{"name":"graphql-language-service-server","version":"2.8.5","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"gitHead":"ca43e69c0c6042448432a4e3f22044e265adcb34","_id":"graphql-language-service-server@2.8.5","_nodeVersion":"16.17.1","_npmVersion":"8.15.0","dist":{"integrity":"sha512-vpdVlbgI8C30hONOVu9tLC7p0fwIBH0pHrD2FIOBecp9izdZPRWPyD9BRU6guBeJChmb37rDucKPB9ZANb5l7w==","shasum":"d54e86566edab9840caa43e65c5a591966555cb2","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.8.5.tgz","fileCount":114,"unpackedSize":579953,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGTw0bxiDF1R9PnYl8jrgV/8hI1hbLLGB1TbeHh4Fu+uAiBmoSGBK2u0JDiO2BhUyfHt+mOlSaoPndAxnZUXUGrHpg=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjRJDNACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr6gw//T6q/xqItGp2jE1DTAOpYQPIlJUAy0gDtraTakcceJl/pettF\r\n2YKPbHtwYm5bSoqmMTBWvFBl7MLwooz1vr5FXIxjfAtpOllcx3I35R6zmwYQ\r\nF4WcVQtebCt/en4S3dJTb0p/+GD+TQdiIFzbQIbFHgzhiwBwK9qXIncndKVb\r\npYeq3WAoebN4QhhnA54DudLq6fIkBg3DNWEVdZ3KsHaZemQ4qh/yXUwSLKJx\r\nQ7+DHTJdl4UsG5JB/0kQ+0PI1/L74O+hny0M9Bmy50V6R84LH4B7JFs8O5HF\r\nNo826FX/eBYtzAPtu/LpdxHroESEJ26CKLkWXhQFZMbxCRKDDyQ41FsYQsyz\r\nlSCd2J21ktWS3qeaAgdMg3aMxGUH8pZjJGNLoBp6UUM2tN+RAZH7QkLkxIhw\r\nh+0frdRLDRLdHSr/ZbRnoSgKiG4ROGyZ2ILqUwI09KbASo7y+Tu7DqsazmDT\r\ntrs0L6gmSQIQqVt6e4QwuezpCunRRVS8vxI7gAiIQNlgdOB/jttIrXmfNoqd\r\nsBeHzQVxSlWTQS+Z5YEL4bECwu2D/LJUT0KBm9gB2k5kGQbC1Me8n2z18pwV\r\nn+yb8lEp3Fns4hw2oy/wNWkmNRyPKlvC+A4ScPYf1zWT/FmAX7wpLPGjJ7J7\r\nQe2c155NpDQs5OEwGvuAPuUyWKKhIZbDNpc=\r\n=gDib\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.8.5_1665437901516_0.8270692436634621"},"_hasShrinkwrap":false},"2.8.6-canary-10955e87.0":{"name":"graphql-language-service-server","version":"2.8.6-canary-10955e87.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md) |\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html) |\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path as you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"10955e874e7d975b0dcda04934ba01bdc4e0dbd9","_id":"graphql-language-service-server@2.8.6-canary-10955e87.0","_nodeVersion":"16.17.1","_npmVersion":"8.15.0","dist":{"integrity":"sha512-hA0FptlOPplC0enQN5F/LrmuQINobt9oIHU8Y2gE28gBV06PHM81KFKm09xdn9CdYM46bhv/o/D0BYeyRwvc/A==","shasum":"2136330bc28dde52f9aeae217c990fcabb4150bc","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.8.6-canary-10955e87.0.tgz","fileCount":113,"unpackedSize":566692,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCHecRuSGNfJJkQxDkVXjMHrDBvF1zDH5PzuDFr1arrHAIgVusB/xPcbWLiETWOc6syRNjd8kG9rTNg9geWv5zyDF0="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjRK3eACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrH6A/+KGA6ZdX9HR4mENf0AhmGCFcFbz0224MuN+qzOlRqXo9fNZqp\r\ne8Z/CN0t0RCNNdWBn15u93jhoc+gQbzfgmVdOLtj0htcRnBNETqTJcsiSp/P\r\n7Us7GYDw3Pz5Swy3qsucZ+LHlLZjUWVmMCQ9cg5O8z5czogE2Pvd/8R0BBPz\r\nWDeL2N+lV5sA42jU5PvbE/t3UlKnR6PuHDxlFD8/DrClKS6daepSf0q89yi6\r\nOL6jb8vXN5ixrWyHHjCrDt+L8LZt5yWPCp1jSkrSeFl6d+gXcvMAPKyWFpSB\r\nMHJoVlBINef8yQaE+FPN3/epcIqFD3/Qqv3TSOACMP9zPG7rMjLiiT+vUHnn\r\n1MISCRwpc4tJjQrqVvoUcb0fG2biwY4D9NBoSdwxC+e/4WRL5fVKWtPAt0Lz\r\nLjmRQPDPxcuZ0zhKT87K8cZhDXJ+/n0Q5u9ie+tWBO7rRWmcCDbHiw+2JiqM\r\n3ev47wVGb+KmqeDNP+b8pHRLccqPi+QrtD5HwevpN4HHuRMXeVYaRkvFYrke\r\n01nsSNhg444reyLpa8VLN9X0dn0ljdw0X6poegbammYPW03JHhDmHkvduQ12\r\npAOabDpJtKsaQJLHMSC7Tmkyf3Ot0T0p1pvmYfKFJJZfzW++vbFjk3GRfQ+2\r\nDfO322qdBS5ahcxD6tRoHxn7ygDUea0zb4g=\r\n=qSSK\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.8.6-canary-10955e87.0_1665445342302_0.6852650021528768"},"_hasShrinkwrap":false},"2.8.6":{"name":"graphql-language-service-server","version":"2.8.6","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"gitHead":"364100224ec770f96805d830b7937b2db57d41b5","_id":"graphql-language-service-server@2.8.6","_nodeVersion":"16.17.1","_npmVersion":"8.15.0","dist":{"integrity":"sha512-E97m6NoT2XQtci+sXtaLYPWRidowHq/u9eMg1/SPrA4K/0ih3q2S6GICwoakqOTlws34uDIxtGSe2uIjbOHUhA==","shasum":"1dc6f2cd9e2c6a43a1a87e4341dbb4683150818f","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.8.6.tgz","fileCount":113,"unpackedSize":566674,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEMG3I65YbCU74CGmuuvbvykIluzaKV99qK1Awy0VuOfAiBCPZXJfhQn0kDRPicAMgPRTpnpOanIIidOug6sTEU24Q=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjRK9SACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoU3w/5AKBQwPtje+il0WKEe8A4qPHPcm3RYG7d9Jne/lWayerN4N/r\r\noiAbUQvU93pONnB417mNxHbI95kBo64aEP8rm5NQ4GVCTZ7n9Op1/I+UP/kt\r\n6ksEwE77sK8SWRqOxrTcjgsdBqu4z1EM1DDzlbj6yNdoNwFkOzFjR4xoN0N1\r\nFUHeN4Yd8VCxivN1pTa1NyIQiEySG7KJe12muAsDu6RBcz14xQO+I731lC39\r\n11YcmQq0k2d27AnQz8vmAuhHoBW+okGHQRKxHiFuHcRx3QjP1EzfyuctyZKu\r\nvT6LNlwMGVa70ZibOW1e5DHa4PTKMKlipyUVpIbSZLDiKrX+SJ7aEuRZRRu+\r\nGC2XsCqVDvJd3/RRmWcsCU2EQvz6eTYM6KffTIfhzElf7Y05rbW3VNk2lp7N\r\nJzvCIoimTva2bXTGwSPdkbRQkwYUlooZqIuDg3r2z3SIt0agpyTn6LBbsAuX\r\nyN4qlGfSt91dDHnKn78JIlYHAGlHa9ACFwer9Rp3qYxwJT10KPLo6DtsqTsJ\r\nCDMDXV1ZdjEdiGuEBl6xo1Q174NuFb21/dGn1aR8VxLH/iwDpev7wl0tISQg\r\nCRROSyDHlsARxGWJdD4iOZN0EQXTz2J2fqXmOYxPLR/ld4hRwgpggOaJfcdf\r\nLmAoMi4Wukf9bby7oKZ98hWm9s15C0IuHYs=\r\n=AJ0F\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.8.6_1665445714111_0.7540530435640125"},"_hasShrinkwrap":false},"2.8.7-canary-c8f1bc6a.0":{"name":"graphql-language-service-server","version":"2.8.7-canary-c8f1bc6a.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.6","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md) |\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html) |\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path as you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"c8f1bc6a266058bddb2acc47ad1bc0f675d1d971","_id":"graphql-language-service-server@2.8.7-canary-c8f1bc6a.0","_nodeVersion":"16.17.1","_npmVersion":"8.15.0","dist":{"integrity":"sha512-yGfO52FROzu+z3dQM1gzWY2KMnCGWEsD+d+LAX+jvAFlMPRgJ2oAunx3JDQddu/WMgFhugJ4MrH72QsNO7MrVg==","shasum":"9cf4d55cdc7ed81f33ffc0a1f7840c775936eb01","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.8.7-canary-c8f1bc6a.0.tgz","fileCount":113,"unpackedSize":566692,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDxWdAfQ4f3JfAA+NPsGVf/KD4uGTPFPUNP70iFmJQLWAiAg1AJd4qcq3LceEdLNmOFk98tpSsXRfqsds3RABHR/bA=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjRL0mACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoWlQ//Z67i2E11W3wnhRsRuFHYpR/Eb0qJElaD38gQTpu3BWjuZOKq\r\na1IgjxRmIGMzFmk7SCj/0jqWSWYnIcQ4RFtqj/B6FA7kQhf9mECnXGcqbO2u\r\n7x2C4V3w1ninfUBzQz8lY7y2MnzU+AiKvhInIrqJRG5xTk5cT+bJLJIO/0Rb\r\niLLah/431SzUF7aMmOobb3CNVCcvttMqF8k8DOZlpEsB50vHgl0iw4miXg3O\r\nnj20T4S/YupCjBLSROD4yYQVNVSFCSCQPeYX7MPUY084092KPOdLWKgDleXQ\r\nqKnsgLrA3Dg25no4+V7DYWNIAlFtXTrKzeMy8YVxaGDAhsA1Ga+nWtGfJYEO\r\ntaAug0m/EpSGJkAJ7/Zd4Zuejm3nnqHDr8mP5B48AjzT9f+ATTYXs4b8h/wC\r\nOyIhlcQi4l7sUFeABAb8q1WKhn/nU/f0WWQYRTxm5FotJLLLEg56mWqvIdBJ\r\nlNqjRNaVO2qB+fmXcgxkTHSMhgzb4CZNxHZvXO4/INUSOpblefyy4OyVARLK\r\np2wsVZtW0Jy20lTd2jyD6cT19nz1tApKMQl180FcHijuS2GzvWxmdaw6i73b\r\nRqgPcijO49V1Xfeti0JvRIHLP12Uk2RgjxtxXCCbrVWb4HKakHM3zba/0LnW\r\n5KuRRt1yg0VFWbZyStPBuz9aOzGsNjK7YCs=\r\n=w8wn\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.8.7-canary-c8f1bc6a.0_1665449254651_0.003668623160389739"},"_hasShrinkwrap":false},"2.8.7-canary-d39212e4.0":{"name":"graphql-language-service-server","version":"2.8.7-canary-d39212e4.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.6","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md) |\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html) |\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path as you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"d39212e413d0dd9eb615c52d018e8b58f5651139","_id":"graphql-language-service-server@2.8.7-canary-d39212e4.0","_nodeVersion":"16.17.1","_npmVersion":"8.15.0","dist":{"integrity":"sha512-zdlPOvpB4ntYQ2A4QEcNRM5yDauoAmzAZU6aoHMzhShkS6UdMyj24RcQmFPWQYOkoi0qJkVdhp/jfjppDOmt0A==","shasum":"3441d0bd1145911305da4a34210ee5c1981abdd4","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.8.7-canary-d39212e4.0.tgz","fileCount":113,"unpackedSize":566692,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDc6RsLm1PJzLhUhSIUZN8noPMQQ19JvmUHTWzlHwuccAiEAyja7zFcYFvsV9XF0AMfGf7qWUVNnHLVMsHRxY1PB8W8="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjRL5+ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmox8hAAmWz5hBb3/+/mMFNvE7yPUcYxbzjXadwRJOUM0UCMEwJ0ibEW\r\ntakKWdBLmMB3QypZvCEx2xaK8B0MnYxNhwbUDNo6JU9vYc2vt9l9v4Gqusu1\r\nc8NL1YDlM2N+LyWuk95QHkNZy6FcKNA00fAuHxuWX0Yn+Hj75Drsixrjv/8T\r\nnubzNozRip4DQ8l9lt04Jhj8sBD3lvBGP9krwAIHfspxEy1/PodIOJeusrHN\r\nZT5Rw81hzLDCO2g2JPr2VbII5fUZabWdseqvjKkPVmfnGldcwW2SYANIr0vv\r\nU9z8/2k5orej7l26mnV2rZC5hXO2QYEMXCau6GNjLJP81gOzHStU29O4KEVO\r\nzfjoURE7JZYaSW1333TNzIFpiI64I7G2ZdSLkg0yattel8cetPvY3bs1352P\r\n47njsexEuoSfhR5Xab/vo2SGSl7w4I6bWQYbZo9IDBTBEiTCSy+CHONQGBw5\r\npHT7ZcGB7bHRDejW6t8AWQW+x8vjedFSsmL1ZkIess1XsTuDv7nRlDJ/z/gR\r\nCcG/6IntmqIQXT/yweDLzW6tY3jq0b3PEOZA8ZhLsWvZ8HSa6mbB7mMjwD5a\r\nMBFo6YxwkOAkOdomt7qo4AU1ZN+YnroAmhN73WZetDh962u3FIl3aKvgSl+q\r\n+k8GeD/6AvrqJ8ab8nXppOwwfZsU/YwOxxo=\r\n=rUEZ\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.8.7-canary-d39212e4.0_1665449598739_0.7182399327909712"},"_hasShrinkwrap":false},"2.8.7-canary-d7f4c083.0":{"name":"graphql-language-service-server","version":"2.8.7-canary-d7f4c083.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.6","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md) |\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html) |\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path as you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"d7f4c083d73308cf1b20f6c3408342f109d14a00","_id":"graphql-language-service-server@2.8.7-canary-d7f4c083.0","_nodeVersion":"16.17.1","_npmVersion":"8.15.0","dist":{"integrity":"sha512-zW1G12HzcaFJba2lZVBarQqMm7KHF+cPuqDMfl3AbsYkD34/bRA7ZuO66tNHMvJuqspP6wvxOTXGii+dye9koQ==","shasum":"5c1f479c17af936ea6d3cac5bdd972e0dc9cd70f","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.8.7-canary-d7f4c083.0.tgz","fileCount":113,"unpackedSize":566692,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCNd0KPfeoCXRc17/HJ389H4/ETnvBTQQWt3VBXFpgPaQIgVmy04ovDODBxZSo2WpQjUssscANXWXsoMXFE6cDVXoI="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjRL8UACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmq7ZhAAojGB3H/o8NdR/++8lp37NI5GoR8oTvcUM/7c2i6styEGrody\r\no4LB+UsEIfMa89MVE5jX9gdaJ+5r0fciSmjM+e/ugXBoTXCK0LqDOywo7HCF\r\nynDr0L/wBqy3yEdCYT82ByeojQpZ5vIcUMfNh2yCjivfVYTNj+03Rv4n01aB\r\nLHGnazw9lH5+SSo+wy8oBpiGp60Ruwv/g7qvB89uYzVZShzxyKUsRr4Qypsp\r\nkv8Q6m3Q14b9NIG1rfe9kkk5T3mCCxkmDXxnVzovJkZId2gnLu8Ep60go/uU\r\nPE+jydEJP6buj+QvfAYhR/vAnnBiGzIuf8C5p7tYmV/UluMe1fyGrCjZGgj4\r\nHccYr50B6VdRbwRHBaegZfHY8s4V/CzL2brkKZeO2EM9C7uVbhH+9S06Axcz\r\neHJYmbhyfJabKrYcwq272a2sY0rR1pPruTivvPfTvN/hy6/mJFxte+5mKstk\r\nMf3tLTMC9ifiLb17PmgP1Z3+TwzycmT3Kqmd3qXtzuYlitioYBlMEGTr0b+3\r\nWyqZVlSlk6J7QTw3qBgVPnEn0xwHcHN27nLcJPPNXIKXRoMsMaF+RCi22tn1\r\nwNFpYiLVG78b7BdPuVGvKhn0zSOW1I3Bu8+HWIkh5IkDPWv2fv7P0iN+qLbi\r\nZhO/86GRtG9TPA1bawlDcgQ7fsMiiBJBfcU=\r\n=Namq\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.8.7-canary-d7f4c083.0_1665449747787_0.48898208665501297"},"_hasShrinkwrap":false},"2.8.7-canary-00f81e5c.0":{"name":"graphql-language-service-server","version":"2.8.7-canary-00f81e5c.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.6","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md) |\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html) |\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path as you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"00f81e5c07b53c65e65c7729afe614efea3f4c98","_id":"graphql-language-service-server@2.8.7-canary-00f81e5c.0","_nodeVersion":"16.17.1","_npmVersion":"8.15.0","dist":{"integrity":"sha512-6ymP2NDTCidttyJfTgdFzfFCbTnQKJhC6u95JwcbuPSCwi09OoxI/Jd3W5SOHvbnlVabfTc3+b7opNfIZmDegg==","shasum":"fd6763cc75a0f95bec15f1911ebfdea8c24e9c9c","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.8.7-canary-00f81e5c.0.tgz","fileCount":113,"unpackedSize":566692,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEz9xQxgy3t43jTckCxb+iDvUK9jDnKeGvXIGvB3ku4QAiBka5g2CnUmSXBgGJs8xklYqAV5Ujp/UCsJlZZljQaRRA=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjRME8ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmq6zg/+K3w3j1iDWVjaNy67RPXJk2VuDm7QwQPyVlMYv9VjICRXRYOR\r\n+59SQrvD1f+AbqggpzMQMW4z9jBAFKe4XeDFK0229y0dnmiiJ61AlY9XOV1Y\r\njeT86JA9qYXQo4alDqoczjNNAnLgfwKPaClJ0NNTxlz8Dl6vfTuU3Cj//kTx\r\nlehLRP1oNm8mHMiCvpwSsl7GJZUFQ9VRd0FC89bW105ANhwLnKUg3jFcu3RT\r\nYb+dxrlgL1c4oI19OJj3831IZc8KY7bcrMMp7d5flniayYIN8CkUfNV7oCxo\r\nWp2YhmcOqOXXY9DRAvxw2qPtu2Dr3mqym1RmeR2i1ODSgbRA9Rq+XStxVd+w\r\nUvTicxnJDxJWQjSiBuJBw+Uh1gC5j0nSyDiUymfeRaU6NUt2Keii2UaGfazq\r\n2OT3xlXgWuOS28kbBMtW6XNF2EayLSCv6BnAEaPlGDvy0AjftZ+7ujKiktxd\r\nDOumKSnD5/uqsAQsSCvzM/UQmEx/X2T/PMiz/cm9hb7Nbwal8qcvSIP+TMmV\r\nw1nhjT2izISrCNlfCSeUfGBNl3LFYJJCeILkqPbfW3tqpvzgfcF0QmI6uUOs\r\nmv6QBsHlLX/CX6p8CXj/L91vxzkf3Akp8BsbSIQBg099OZ1kgZumL9DMqAW6\r\nVt72v1614RtskKkNa8/4rsYYMV2w759TnCw=\r\n=3/TI\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.8.7-canary-00f81e5c.0_1665450299908_0.6817723568081286"},"_hasShrinkwrap":false},"2.8.7":{"name":"graphql-language-service-server","version":"2.8.7","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.6","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"gitHead":"e8e533e4ce1d7d23e867e59b56d3c435f64e82f4","_id":"graphql-language-service-server@2.8.7","_nodeVersion":"16.17.1","_npmVersion":"8.15.0","dist":{"integrity":"sha512-A5NZ8y9T9WDtOMgXm5K91kfXc7taWLbs5H/7jRODmVxy7ihSbHPBDoY+5I/lyufGxvlJhW5UOD3XNAi9A3055A==","shasum":"2c37dbcd56faaa8d8cdb2f716fac662e7f5a57d1","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.8.7.tgz","fileCount":113,"unpackedSize":566674,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIB5Rgnr/FOJHl9S/p0NdtfRzJ+C7ynsIRMz43VViBcfwAiBvFwuYgX8fQgdDWL5KQ7z/T63bpy75oHT2Xe2bBiZm9Q=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjRMbHACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpoJhAAiRNTpemwiW/3QwR1ilQUoZFUIzVJpzf6g4kboZPmEgk3ivu0\r\nQAaowSEMudkA+RAxa/xAqRBVNNEQkx7m9p+PUzyt4W4GyedBXr8/acDEZQhF\r\nUVYHj8oip1pxnqZQA+q0aOTjzMPOzjzS5nbElQV/pdu6KsWffzRxn72IprqS\r\nN8llPC2R54sce+OdH3Ezp8uViCf1pxYqnLnAMgnv5/Y9H7nklT98v65Kw3kp\r\nqCyijcXCVhsThF3ZxviwmRzrPZy++Pj2cy6fy9Fdm5E9wuSPL7oRO9tUrKuG\r\nAD6hi0kVl1IKko36BPBwSdTDI3D4on8dSt1+6LGj3Iq96maLJtxLPiSRPLAT\r\ncXkxqsTCHAZRvogDMngjnT/cw1rzLUXBb+LjBoP+1v4eZV2cfROnuVSy3lYJ\r\nsPHXAja/JBonmIfr7m4WYvqJyp7jFglYXgmvEtsTTimet6PXuVYQkQNwcmTF\r\nVVAz7mrUy/gPvGVz0GbTOJnAD/ZDqb2D1sfEcYM7YDjTvWpXL7diTW78eTZo\r\nN0ziPZk/8ZP3SJCVC2ZzElxc017Obti5XETTQpGSPMIdLb7j+cIe12aGAsMC\r\nSIjSr38bnMLCzW5Sw5b21auoX0Mq6VMDF7vrVTjhnBOMhhz56JergvMUf6H1\r\npM7cQZjCrxu1OPtbDGe/oTkhZA35ftCECGg=\r\n=UdLZ\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.8.7_1665451719101_0.7530375820890354"},"_hasShrinkwrap":false},"2.8.8-canary-ee05ccbf.0":{"name":"graphql-language-service-server","version":"2.8.8-canary-ee05ccbf.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md) |\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html) |\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path as you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"ee05ccbfbfa3a1a38ca2c64aa8c0501c6df0b0fe","_id":"graphql-language-service-server@2.8.8-canary-ee05ccbf.0","_nodeVersion":"16.17.1","_npmVersion":"8.15.0","dist":{"integrity":"sha512-7Ztxf0WG81l4mBRkrDk1o0nUWrUJh20+b8z0DzliXRGKfhKf1Z9jZzESmksZEE71q7ZvRsKhqxvBuH126YG51A==","shasum":"58b2985bc2998a09872e25f72582c0004af04aeb","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.8.8-canary-ee05ccbf.0.tgz","fileCount":113,"unpackedSize":566692,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCID6COjdN/4Gi1CK4c6LswgYJqwznEcZ8m7WsSU1LjFcpAiEA1DkmLsCNccInGYHu+eFPipLydqkvP6nyZ/DP+3reDRw="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjRMozACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmonXA/5AZHg50FyBaRPLO+HDakKilCVumHHh3xkK4xDMATcXaUIOB86\r\nsWUFqcG/iEAbUnkTRTyurhtW5zsfesU1vA7/BLzn3BQW+qraKyzZYoIY5cEa\r\ngdVEGboJUkqg7PTGpcHO/WY7Y4/nXGNNXKY1VcEtBH6UgR8kTML3OmhU/JyV\r\nQkyhU7N2NPg4sZSkj+kN4jjUxTGlxAgJu+1S4A0cAXN2nvdbooo+XG+tD8fR\r\n9FCLdi4Bz3ZjGba6DAa7bvjI9JMzp9Gy5y+727VbtPGnzivjK+Pg5IUnOJBp\r\nRk7xmLU/4YPYAxNyB2tKTyhRaLH77nwLawNDVjz9ifn5MlamIxvaW6oC/Wum\r\nB/evjI84ZSC1k2zfTpU1IieJaDQO/78rxxxuIJpy4s5TExaK3ub35Bui3b8X\r\nhXySsP7gRECi0Mb970jvPvXonn+TIUMiR7DlbbVz8yHNEksjfd7hf4iDp43F\r\nfmQSdxbLWbE4YQT3gzIHk/9FbTVKCsw8j4jaTPsnrU/pZKLhsr0oPr74Y9sr\r\nz7OHMunaUOL7v65ObBgzrXMdh+aBeN8lJ7lUzy9FncCZtd7f4cGyrYkiUcxW\r\npRPqvAVLD46sS7dM/nMQx3+wA44Vl/VgVrw6jm9lDoghO9JlbyvPIuM8+/dp\r\neTj75iJcKwXDJDCRmC57DrFzZ3HFmHonlYU=\r\n=bLLp\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.8.8-canary-ee05ccbf.0_1665452595502_0.30575180630698195"},"_hasShrinkwrap":false},"2.8.8":{"name":"graphql-language-service-server","version":"2.8.8","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"gitHead":"b7949b45fad90f4972325e7e0f990479f16d2467","_id":"graphql-language-service-server@2.8.8","_nodeVersion":"16.17.1","_npmVersion":"8.15.0","dist":{"integrity":"sha512-AtTOUdM/jo0ZlL3oSpUNhbEm1ZzZ6RLmthfjPhVHtnQs+OAOITTC917KIc1BjyviwxL88EhTpzlQg8fZRX7uAQ==","shasum":"988a1194e0e22cd4d997f60118ed0195634c30df","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.8.8.tgz","fileCount":113,"unpackedSize":566674,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDnFoUoKtUSS8SOI9BKrWHHIWoTS8+YxMUaYoCzqwR3KQIhALluasyR1Gr9IUJeCyf/se1S3IEJo0PTqHY4K/Ey+oCT"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjRMskACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmqi4BAAhXd1XN6cs0v6FccmPDZfbdBnusR94oJCerhxQzzbcKmF7cW4\r\nbugHVbvpGwnIAI21wst6pX7+BX0d0VFou+d+lsS3UEnSYxVlka2vO2DHraEF\r\nW0FUq8n6dCXSww0/hNPieiU2KSdV7OeJjUB5Q5qKlKs/hhM3AHiEkUd3eU6h\r\nWmGLsZoVR9tM7KiY75B/H55oyjU3ug83NkuK+lgtAdMFZp2V5sRYVQ8geFce\r\n5KDzjBLowvuvx8L9uzuFoyLVRgzFvHbaugdQyGdAo2n2egXsOJ/Oqgy5M8Lp\r\nrUQsi4gphA5fw321nm2NiWcREj+xF2V15wp7M40CdnYxpoWt3l62vV5TatTc\r\nPQxmvXaFHn7apYAvDoFNclXPTs9MiZ6BSIMHbdJ8rrUDqqmpYI8LjIzco/gL\r\n6Xqf8Xj13wDO0XpOcmVdVmZB4dEYJiwg6IWF5rbI57sW4N/IvuDMUic1cnei\r\nhTxtJ+MoQDLENlnSJX4fLQS8SNcxjIcdJxrtJZrsT1M/ugA7G8cqqkiUUjOB\r\nAyG+ZlwqD6Ybz3gZ3FJivCsQ7n21Wxicf5zsKhW/hA2v0soxq2G/JUp4Jq0T\r\nmzXm7p3IIb6lVqDHSkydDKHtReimWbvkzmUgpeiEftk/npUNeoi+3FbecvEG\r\n3KtNWrrDRThh0Dds3s8LaVchRjGBA32t/lE=\r\n=g+vx\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.8.8_1665452836112_0.3481480704318649"},"_hasShrinkwrap":false},"2.8.9-canary-54be86b3.0":{"name":"graphql-language-service-server","version":"2.8.9-canary-54be86b3.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md) |\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html) |\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path as you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"54be86b3fdfbd69390bbb584dc291d0f0266946d","_id":"graphql-language-service-server@2.8.9-canary-54be86b3.0","_nodeVersion":"16.17.1","_npmVersion":"8.15.0","dist":{"integrity":"sha512-kLIqSnk+4hv15E3/96+Qj4NP8rfnpFcdd8qaeFZLnH1b8M6fxuJ814TkcgFxp4YD+OxCptuUTztlPUH8PKVd8A==","shasum":"33b93b0ad72397d6e159c1c3bec37d4b2718b35a","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.8.9-canary-54be86b3.0.tgz","fileCount":104,"unpackedSize":529551,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBTg6H+nULGV7Zv0INd1+5jOG8jLwdDEfGJn/AcraKpnAiBWS9Q95rOhuY+KzFPBA4MhjipXOsehhWLgieV0GkQY0g=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjS/26ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrjaQ//ZBmiaXGlaGZti21rJpvlvQbTCzOsZUmmvQEXMITR0iinaGG4\r\nLnZbYFxjnjAWeycX0XzQ56sgujY+rOy6qcirwsIbWWi/1ziCOSD1MBxzk2ca\r\n8y5AYpxnIWSY2yfZxQ6xMxWZcECemZH5GmB6YPKqbWWcrK18F3/+5EZMjoc/\r\no2taWabZ/wFnq/RyPGwlseaaC1amwpt+jyulamgNnFlTaSk54LnS2OLey/fT\r\nVxhFbLgyHjW4ok+84yiLgCIveXS3JYQOL6Ar3zSZAHcd6XMuO2yyebAQLTs0\r\nbaCMGM+R6TI7oDe9zPTzSBVsfosvpJJyncLJNs7wiCnyCy655Qb6/apIpYoB\r\nEfP7WOKieWS5G6Ri1/ssfASFQqiyIyEckLp7tlWA0NsN3zyXLR6OIYSJQeVJ\r\n2faiUC4KbfeYs8QiG4POrdgfJhUJwpYDfLPOZIsfdY7eUqeK+uQQulEA3LDa\r\ntzfnyXCRJn+ZZGgOwjfCZphRlHf1YSvKctxwxYDMEu6H8KydYj6zyzrGPLJB\r\nuhiRI4EeVtwsB/EFHkffMy/xCw4nsnnnAYrvLj6NpJnYskX2sCgb+tYqhWPo\r\nhxCk7IRbow3DpvlLNJ7InNyvYuLTiQoCk7460wcUPxvRR9DZui3H9N1IVaLi\r\nr2JBNarlQaElkRtOrH39OSLpEzoOokMPgjY=\r\n=JE0X\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.8.9-canary-54be86b3.0_1665924538472_0.5822863396630484"},"_hasShrinkwrap":false},"2.8.9":{"name":"graphql-language-service-server","version":"2.8.9","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"gitHead":"6ceddc69507443b6663facaf5f332999d80c1873","_id":"graphql-language-service-server@2.8.9","_nodeVersion":"16.17.1","_npmVersion":"8.15.0","dist":{"integrity":"sha512-HNy1/kxVN8OFrnUD3fv3bt/epgzbB+YxcZVu1RoXsiIwzJB3C4m8ocBZky/bCNtyj6A3zPTTCwdwQ3+XaXwKEw==","shasum":"2f9edcc874e0660fa27ec6f95df7610a2c6342ec","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.8.9.tgz","fileCount":104,"unpackedSize":529533,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGnKvzAgy2XbKn17/WRS9ocGwwwwXEtnCiUx0EtSrOxBAiEA2xWB93s8Nd5UXxio11b41bcu2KoYAvG8g39eck7pwwY="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjTAB9ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmo9vRAAhyojYgF5MuiYTD3tsv7IMC38ojP2tL2jkg3OfLqmpyNXwhG9\r\niNLZgGOcjT6ab6H1PiFn+j6zMoUfvu8WTJ0/o7qDtQaANzTsMHqi4DWmI47W\r\n4yqeJt3vNYlnN9XIRs2gTE/8kssFyom4EModQkLpPja8CmBLVdBN4DUR0kH3\r\nRhqUz0H3vAP2kcDuP6t22xc0sIZMPsQptzTXN7JCXG84NKZ7H7qZGjgrRvqn\r\n4Nj+zTcnr1mZCkTpfU0oh5LXUP1wbf2nQmcqPJlC+/NKkHLFh6zObybThai5\r\ntr0Q33lUtOozJEqHVBVuao2HSGKKrHI0yCFkjng8BKMP6VyMHVBtmLLpWojg\r\n6E3WGISrJEchLC5eZ7MRigSKosonjfTSSNG00XzamPl+roM1K5EoNKcLX6hH\r\n8UGj0csJYtaBHtkUgdoTVofXeiqhAnHKrfhbg6eLPw8zUh2gs1Ugz/N2iAHW\r\nvFzu0zh9iprvrNcioKh4fNTg8keuXVOgxL9aDyXiPzxN9mJHO6zMAAclC21R\r\nHYdIt221y4u4MvPWYyLI9AQMN6KT1bOlHqiIx719kwi2dZ768ZyPZ4dRlrs8\r\ng6dC7n/3H4TlhsJjEciNRwEr2HW6OERn3Bjk7H7i6XarF0YsMjVLRdJEDLKM\r\n9PI3Wb+7gYXxvmYpORmCFL+RCqycSjjXMss=\r\n=AQem\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.8.9_1665925245274_0.3341770490014213"},"_hasShrinkwrap":false},"2.9.0-canary-9942c5ce.0":{"name":"graphql-language-service-server","version":"2.9.0-canary-9942c5ce.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.33","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md) |\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html) |\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path as you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"9942c5ce2668d71d93a355d49a3ae4439b508e2b","_id":"graphql-language-service-server@2.9.0-canary-9942c5ce.0","_nodeVersion":"16.17.1","_npmVersion":"8.15.0","dist":{"integrity":"sha512-eBei9vMUYAvYCkBUCZ+GaZlGO3HdkZliatebqAn3s63g4Cdl+akDBC2cmNUM0RQNpWC29wYqXPJ0gwkXhfV2MQ==","shasum":"6cb590ab987c6b486e3749dcaab56b5a881ae889","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.9.0-canary-9942c5ce.0.tgz","fileCount":104,"unpackedSize":538526,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCBw0WTJBja8LORKzDrLnYsb9LeKCBoLQ6GlzDvvU31vAIgDOf8jFCXPtsOPg0HvK6Vjmmxef9eBYKiFidSYOQQfNg="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjVBiYACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmrdzw/9HsagRsjhE3cmm7xbfD5beZGjYveP/B3hmLTtF0cqiVPs+Bj+\r\nUKrUmPJs5zC/oNz2YaC70u7c8PyKwIFo2jPn1uMow5GdLL+iVrNljFDfZAmp\r\nCeZniWN8Xve1BA1A9WF8mfz95xrdIJoFoKT1q7USsddei/9CI0f+560QwGdB\r\nO8X31TcClxiZ9Xdd48F/xzn4DkBtQH62FDm4CJRRUskDzTQl+rAlh0AtdLx7\r\niqXNVkpUWgVwIILlogxevXsSgcXlgqroZNNsNPWrtr5O6pMHQ5wL2UyuVsho\r\nbwqeD5F5b1NYz3EPZB4BgXHfAuMGC1P/vMM/ot8HznM3T/N6h2SAsavHu4v1\r\nxOfdiYRJgEe5SQofXFF7Xie+1mdNE3IHgw5U5nGL9gWuEGs1QGxvEXgCV1BY\r\nhbRbStB+ySaeUI1tnIWPGJq54Loa4v6mwRLsZF1y3GfzFqknqtcpUhccKIl3\r\nWIubXdA5WgyQwuoNvjZ/uYtF1yd1CA3apCEwCtNy0OVs6SdH3Ar01kK9talH\r\nY4+zbQ5/xqp87ePUVSPKrU4iU1d8liAh+OEA9VX0lutW4NT35AEQsHZAt72g\r\nIps9dh+X0hHhdZA/ym+DwhVp1bQaJWmlh1q/dIHECsOtPXa6uBOTGSbTaAlA\r\ncA9L5yPj45PFtV4mtoN/NA2I9Mb10Vj5fPg=\r\n=F2mR\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.9.0-canary-9942c5ce.0_1666455704665_0.8691027508899338"},"_hasShrinkwrap":false},"2.9.0-canary-9b2f4b81.0":{"name":"graphql-language-service-server","version":"2.9.0-canary-9b2f4b81.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.33","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md) |\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html) |\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path as you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"9b2f4b81f42dc40c00656fd1f9d858735963ced9","_id":"graphql-language-service-server@2.9.0-canary-9b2f4b81.0","_nodeVersion":"16.17.1","_npmVersion":"8.15.0","dist":{"integrity":"sha512-2A+YjnpuhGqEx5V33BaGO0U0kf/lgx9GcLm45x514NAr6t4YnA0gY6cWo4Xr7sBYWeKsSVi7mLEmi6gfP9BCMA==","shasum":"e34df6731ea5d6da4c84fef3b04318502da69059","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.9.0-canary-9b2f4b81.0.tgz","fileCount":104,"unpackedSize":538526,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDCNXodswrlq3pwnPCa0HgzbKIJNEme9Sy0uaobMDHK9AiARISPluWSricDrpFerSFEtMCtWG5P4K4a9ySq+4kn6gw=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjVBmhACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpjRw/+ITD5yGSA9lurAIfVj2Ch4FVnqw5m2Kat5MORDAHzqnvBEQBC\r\nGsIfqYkr8xtTPxQIJLbFN6r96zS3efRck23UrdGRpIaoVw06LLDCoyhkfO0R\r\nRuxZyr4L9myLW9mEwtDYCNI5L4cA7xFw1h1apkrkEMEfwHkvoCU8I9yfbbUr\r\nVM8pTMbju5N5+9mTcn0DObpHN1ar1qOwk7CaEMtnGO1SsHg5XmHUEXVAexOJ\r\nnB8Cz42FOKOQUnSDiNMJA9K5Ibb47IdTZ830LVzivc9ZYh7i/LGCNWRM79Ta\r\ntnW3udrbeMTd2m2zK6s39kYDsJmOYnwA0iF+bI+AGiDPktJ5gxrMxvefJ0l0\r\n/G3386Mz9l8RMem24GRNSgxDnXf2N1D0zbJ3EvebQKfgk8t22101GAT0v/6P\r\nlvt18de4rK2j0ZUeLTMf1IG6lEiafQgAj4ag7hqqo4P1Vm5WMRhL1499QZQx\r\nRkKBI06c4uRBHapO/aO17HlEb5m3Q33l8CEUDX2UosNvQchXMn2WC3KXOsLA\r\nZ6d775dR9gl+Q1p2tK1rgxrtC3Hmj1P4pE0p2ANUSinmSXs3OeY+a7j9lPUL\r\nYZ1YO5raybRTroBgaTonzZflhXE/a03ve/aNTxUQr6E15AIc8q+Mb313ujnM\r\nT3CBZb0lbtw4WO4kvfFk359q9d4kthEp8JY=\r\n=eGTZ\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.9.0-canary-9b2f4b81.0_1666455969314_0.3017267944274291"},"_hasShrinkwrap":false},"2.9.0-canary-cd06255e.0":{"name":"graphql-language-service-server","version":"2.9.0-canary-cd06255e.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md) |\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html) |\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path as you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"cd06255e20cfde561257a808d58e4ee47b9db79a","_id":"graphql-language-service-server@2.9.0-canary-cd06255e.0","_nodeVersion":"16.17.1","_npmVersion":"8.15.0","dist":{"integrity":"sha512-Df69Dwl11B9pFrc4EP2W6ZO4MIFKkBSWOGcZFpmExka7O4ctkzGOXzNRkuC0sSmHCvYuBW210nO2YLcjuvDtuQ==","shasum":"cd17809c78290366c3a5e9811f70b37316e7ae73","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.9.0-canary-cd06255e.0.tgz","fileCount":104,"unpackedSize":538526,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICrR1R5Jc877+ALVdGW6MLnpaZNJuYGNxpECK28UZlOPAiAtxY30Ju+X4+tToqkqMI4tVOmBj8CtecFX65l6oEw1eA=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjVBo8ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoGOQ//WtV5hORIFiL3tL8gdYOwg1u1KQpSCIrcrmzEbjznLqd1xOV6\r\ngHTFqcqu2s8g4ES+UgQnjvAnDHm/v06DjYOUhGLAE2ltz8VdekmbJcMq2OxD\r\nQT9iN72xY/wJSXggCpQkJvPRTphovq068Y42rplynRYtfX5X3+5bHq11Msry\r\nuXwYZJnp1HPqPIG9i8z0MQTxBzwJKDK7HGprSmeSEsgszKRpiNA3jEzTY1ab\r\nMZWewZMa84a6rOznaM5g0ExPY5+KBPR3kf9se5PCsAog3OPFLJw+wKTDkhr/\r\nn2BZOsQUOxb5iYPCzcJVyEcw642XG3iTHw7GhW1G0aWr7tVLLSQtPnAo45DO\r\nONXAl+c809zJWGUAaxtkwrXytzzxD+z3EnxoQBEXpenW+aA8zFBwIR7qDc8p\r\nT3YP8NkqtlbEFyVqwwnDh0yZSJg2cU8/k+iccJxJmToE38JoTOmnJ+vUkzhm\r\ndeTEdFLnjovkKThDvCJ1wLzyne6XgpEo4w1hVBTwnwHs9ckKZBWdcMfINvTv\r\nPS05kWxim60KAhpzH4ef7sKAZEq17+pFqw7Gb0K8y/TWdTSEkLlielnFw2Fu\r\nUb8ppsnbUoS+K8keWqt5dEbGWcQzQlDPM0Q3Euh/tRWXzHqaH5KEUKYiLqYL\r\nmkxeMEtHdLjlexBciITZ+JSqAQB0zhUiikY=\r\n=DsgG\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.9.0-canary-cd06255e.0_1666456124510_0.9745704472777239"},"_hasShrinkwrap":false},"2.9.0-canary-31714127.0":{"name":"graphql-language-service-server","version":"2.9.0-canary-31714127.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md) |\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html) |\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path as you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"31714127cdc7b48c0b37399e5c3d8963ec8e03fb","_id":"graphql-language-service-server@2.9.0-canary-31714127.0","_nodeVersion":"16.17.1","_npmVersion":"8.15.0","dist":{"integrity":"sha512-eX5/jfzzc70VCw7yGCEdilulTNj5Jpc5SBq2YNEp1IXpuIu21uKI2p4J75LFQzI6+VrxnPmsKDxQU7Yw4CxXfg==","shasum":"1f298be7682f5eef1f512560a54255748c5c56d6","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.9.0-canary-31714127.0.tgz","fileCount":104,"unpackedSize":538526,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDWJ1rT10dTk0k4R2VL70OIEKMao4VtMoc7cgLa4PPb0wIhAI6HvV/3J3C7wbqMrryma3s83WB1JdpwcTjuLSkKMhbH"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjVBvNACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmqkkw/9HmXybELJ+4wMEWWn2UDSovn/BLPu1UVDbMplvBUf4PnMipqn\r\nmF1j7w6JHHTd6HY+bsi13e5/XcK1GlXuEOCkzyttK2L4a9MEtc7ceMe2J05d\r\nQUPMrhAGBBaNHcMwD/xH2+WCsmbCL9AcZnDIp/SFhk+iAGXk1u0oMLbDuS9O\r\n4/eGNn4ySqBGh0JfRRWxrxdk9JBjSV2RtnwYehPiTaWnxKRP5fx3yEBZvtyz\r\nDwgcKiPw6XTeeTbCRZQND1JCI3/aoWNisYVnhkYgFQ/M4++tV1hh7NsPn368\r\n+Kw4HOQPBHhWvf0kHn555IIk2TfMyeJ3NupAR7QY21g7fRJT7QnQFV8ExjVR\r\noOWIXdJ5A5ThyH4tN+FFzWjdtGHkMK1FkQwXJslKM//c4EHWbFto8XfcJZUv\r\n7IKR8wIDG4XcSwqxjkULSV1mQGRHcqL0p84RjORHeEHj1xS+BmoHGmLCWRny\r\nOI91f/V4HH/fLqx8203W/O78RZ+nZvzgCmFWRfDnEZOXHR8jcSpHJXix688F\r\nhQ++e7Kim1jhEoPVAU6/5H8n+wf0NPsF68XamVY6y8six/V3UT04iCgRWWCw\r\nsOVec9rpSez0jYmAgeFMgkabz6jCX6aDHMRbKIpbhcuJ9LrMQ6DOGH2TMqt5\r\nL13vYv9vufCvsdyxyHgNA0c8N3jjocu/JGo=\r\n=8cJt\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.9.0-canary-31714127.0_1666456524974_0.9191638376921141"},"_hasShrinkwrap":false},"2.9.0-canary-9ad678ad.0":{"name":"graphql-language-service-server","version":"2.9.0-canary-9ad678ad.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md) |\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html) |\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx and tsx files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path as you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"9ad678ad2d4a6043b8c5b3276f292b0529f1489c","_id":"graphql-language-service-server@2.9.0-canary-9ad678ad.0","_nodeVersion":"16.17.1","_npmVersion":"8.15.0","dist":{"integrity":"sha512-I90iMZDo8MnTNYEvbgqPqYh93iwxsj0G2q5cB0dMoNCcwUDwMipSDgzneZfLS16m63koszckIekKLn9qqnfFGQ==","shasum":"464b615f96676e267e89b7975f0de51e38812734","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.9.0-canary-9ad678ad.0.tgz","fileCount":104,"unpackedSize":538545,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIC9yJSIL9tB0TaR3tNHTnWYyQ8VWxLJDUd9YXraQIKpRAiAVFhAqHdwfUQo9yh7dFaS8jYb7gaDwEC9Xiis2UvgFyg=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjVB+QACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrCPA//aXDXzEIcu2lcAwZ5KtnHOSj2tqJ6sNC3Hq6VuAUw+XY3OLeB\r\nc4CrnJR0EtjLybCMfbZzP5j+JqPpF2PuOlFIyCwOq3ZcCX6Az6p6+Aoqb5et\r\n/6qrAK6tJ8I7JVAfdyJcXwwMojfoxZY+yJDzaECZ4pMAFeO7fA/jmzuneBNX\r\nzzBMBEuzI1gj8ixq1bHgxqujZZq53p7Bs14fZANiE5DlnTlt0TAAA1KVhICz\r\nHNJ2t2ik6MO3sTfInX2Z9tTbBH0PzEhecCPpa/wdWVN1bbV5mgzD06kTBPwf\r\n+0WFJWdYjC5R7tgtJeEE2i/DMqQokhbJQ/9nSZ75FhTuxKf8au2BM6iaMGQa\r\nqICRv3JrK/sEGuwqf8CjH7gU+02sp8sW8SxSyKt/6iEGxUPCABhdYyCfSw7K\r\nlxTWfz9u/SoeUEylteCbrxXq8rPs1X+tygMWRaefRtSx7vj0/SLzSVzpSarW\r\nTVqxNXmyV0kqJCHSp/v5Wf7MB+jV6bewvcxjDjXHTQyaSmx28F8zhOA1HkB0\r\nRSLZxkcX5KLlkoJuussT35lFxt/VgZdZBECB9AjAEbVnHHEFMZK/5fBOgAQm\r\nmuATQiGegYrrcxf67o64xuJi+vjE70EAdT2Y9BzEiivrr3YmVyG4nItjdI+3\r\n2r2Cy67NAab6YnaNOGLQqh7OE37efxckVJk=\r\n=6LfW\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.9.0-canary-9ad678ad.0_1666457488276_0.5036949489091627"},"_hasShrinkwrap":false},"2.9.0":{"name":"graphql-language-service-server","version":"2.9.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"gitHead":"c33f2a23c67b425a8efb6691da83d2b93bd68da6","_id":"graphql-language-service-server@2.9.0","_nodeVersion":"16.17.1","_npmVersion":"8.15.0","dist":{"integrity":"sha512-atd5Jys2N3rRDXO10Mj94QZ+G7tSvOiwEwjZUigKQ7x67A2rCXlqleDz4vwr4RddTsXk/INdmklz6Ht9Bo7BRg==","shasum":"48586c720fc96d5cea61f61287a2b67f4e3016f5","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.9.0.tgz","fileCount":104,"unpackedSize":538527,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDT0nKy36SEvgwed+HoLcBhC7ihWSQXeY3bY/R0OeX7kwIgagieVQThu7axWvjC0AZin65lIhLCtUVVurJSb7xjBfU="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjVCJxACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr0+w/9GCJRD33/drZ3EUGybCI38x0MpIq3VDLi+w6FKz8WNox3FzCF\r\ndROvDpdR/IzbtsG19tRHcWcO598P4E4mZFwqq8BeR7Qd7cA95bIaiIldn/Ci\r\nk6H3bI7YRfBrAWv1QVL+F3HbASYoKS9aqpdkcLCnBnpHCeidutTwAywjP/jU\r\niFSaluUMC0snueZsGs3oEIuLh4Tw+vVhRNpjpiM6SyTKEoipPZKbPynH7keP\r\n8V2tuN4e6HmqKY47Ghenj49rgE/Icz5vlJDnzsqwEz4dZ81UW++u8aK8nWi2\r\neGO0srEF+BotJ8ow0U/V35kaHbOuMcWBsG2rROiFRZ/PN9UuaT1mXDt1Vi9H\r\nh3keg4We33N4zBbV/MFCLlW4PvdutCQ3ft9JvfYn6siRcmbK7qYf/Sw0Q8Dy\r\nj1gh4VtoSzFLoMnV5hzNG52FslE9GeRvsNEcr6g1Vd9rnEPJCs+PPhu/97FZ\r\nDC5/SuIEPuxdq3XFD2b3SNMlq3rKNAHxCcpldO/mo2fo4L4hjKjPUxgnKzJu\r\nJ9RrBr5K3hg0K2cShr/xp7O7hK8JRi+xcFK1e70GN5UdBopimpsBs85VUrWw\r\nO8D4dt9yxrVlbi4EIFBnxSFrliTwcRWTNqOa4bwZa2fdC76XLR0IuP+8HayO\r\nMZbDtrHLQIzRG77JDAeH4BuwssURiwEwl6o=\r\n=wsLp\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.9.0_1666458225273_0.639300019908744"},"_hasShrinkwrap":false},"2.9.1":{"name":"graphql-language-service-server","version":"2.9.1","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"gitHead":"11f3f621e79f816ac671d0f529280921e930c3dc","_id":"graphql-language-service-server@2.9.1","_nodeVersion":"16.17.1","_npmVersion":"8.15.0","dist":{"integrity":"sha512-gcl81GASFgGw4h3t82/IppXRqTBKcQpnHsjjnRRqFp0D+pVJU5mXanAvOsQ9cxp+QjO91IfbfhsflCK0MvWwrw==","shasum":"00e9942164a5a9cfd9ed610c10b29288bbe608c5","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.9.1.tgz","fileCount":104,"unpackedSize":544248,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCbs2CGpdaM7kbbrdPiI7jFGi1QIEOW6koTWukTvOBxkwIhAOBoT2enLB/zDZF1TS8NjwGf39eSZyNH9qaJXaWn11qm"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjVECSACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmphEA//eyczMyXSvi/eDwLHexrTKMBJNJfoSvjFdohwuzko1pVwZ35f\r\nedn0qCxaVVzUspMMLtkhjtHT5fEk+Bo/GxaZ3YNX3lwHh/Y4PXGNeDNPJGAx\r\ndk7wd36TBt8lDQksyp2PhJTuB7J8imbZXePGWpI+1lD45kbnUwkJCHMvdbRv\r\n2RMsXOgSCO3ZVKwlE4LtcvfpALV9oxVMjGMDnWgm65jZZANXOgBDPyeD8qw1\r\nnVx0i78eFzg4eQVbHAL+EgZCjlInTbEJ7OoKMiu+c2R646nFNK2ieq4OzQ41\r\nl4jQ/NGj50gAbLlVTVzEdk5sSeLmPhbsjqdvvw6V8HPmTEtMnMGlKvgPZn3f\r\nIUnPnV74HEfjb1ELfP56/CX8op6WGL7HolNaPEApXIsIq0q7bAKW0j1znPVf\r\nh/UCv464c93BqQBt2W/jEKjQxRk0bjnvqFEiPPu6yUv1I22FBrh/RtZPjP8+\r\njsuyr6IK0+0MXKOl43mRoPGtp6tQt/GXOXDFqlHeUhtKGfBhqChRnI2uSFbh\r\nheYU27jQBLyUULaFpxO1ChCguwj3ELybrhsQpJ8wO9HSPpLD+LsBSuO76oFs\r\nT5PLMod8bXxLCPscqVDsLGxynVpb35cYyZM1/kEjQMy9/RR/lFPobGPfBfdM\r\nvWE8+UkXsiQDcOhzSnal3loQtYDxQtrf9JI=\r\n=MWxV\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.9.1_1666465938527_0.9768810472089409"},"_hasShrinkwrap":false},"2.9.2-canary-0e3571ca.0":{"name":"graphql-language-service-server","version":"2.9.2-canary-0e3571ca.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md) |\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html) |\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx, ts, vue and svelte files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path as you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"0e3571cab653823a524817cd3562fb359953efc0","_id":"graphql-language-service-server@2.9.2-canary-0e3571ca.0","_nodeVersion":"16.17.1","_npmVersion":"8.15.0","dist":{"integrity":"sha512-RwpreXmS+Un1BYFThW56ETPJpIj8kaC9zr9TyzzYHYceJXRoO2LWe9MoIpQquY7M+LHelvaWmf760EtBTsy00g==","shasum":"57d7efea886b3fdee196dedfe7f29d6f9fe31dbf","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.9.2-canary-0e3571ca.0.tgz","fileCount":104,"unpackedSize":545336,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCL7Yw7N6MBn7hjX9rFgMOWio938cHbbT9v5dSw9OvvAwIhAIUYwZRVAfbG/CtbaV1E9ZWHnYSfeEtI4U1WilPmoWWK"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjVGqQACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrCsxAAjwBH+Bm0Jd9mk7Dui0QgpDOetqe/ir1RQNgdULMh6CAQIAy+\r\nu/vFtO/h6MTZc1Kp36gbMyKY+dxWPNkt8iX+DcRSjvzUlEIMxnOYiPmSLN88\r\n4anQr6ajZJpt1AMGLrZdYZLzGyf6kgverp2DL4ywSU3ZY0/3tuzy1Uv7QQso\r\na1uQSlYcAHJ3pqOhL/RB+CoVF1Q/VrffpKYWCh8q7eKzPPpR0CfH04fd+4kh\r\nE2Xwao7N4QErs6rUepD0Lq0pqr07eScHWQ7n5UmDc+kJedwSwzbCoXMWvAPc\r\nayWJC6mg4vccdfsBfxApr9CY3hASTAMOv0qfIkjRmOXVTXKD+uDhdn/atxNA\r\no+qG11Yuom/j/xUhCJPwCeLWdNnmqIpyA+F0tUXHhgFJIuAk7cIWh+jrW1q0\r\nOppO2+g6uLJV0t1QjzEaGa4XwsSCpZqZ42Wh4dh3IwgJDuFAbMoMrtsR62/3\r\n4UPV4oNYchCS683HfyKOzQ37cDR2OtXP8CJ1zX25iTmUMiUFQB4S+wqn4fR/\r\npgh5hoOqCTsuCz7nEd5hV763o8I8R7zhWQv5a0KqXS/8cFb/R42DKoLcBAV4\r\n/VX6dDy3CgE/D9RD5MYuGJZCSITXBy7bWzyGzVZ+KoMQbITPEX3s60bRwotp\r\nu8kt7OkKsoGwn83TBGvlrlZiGknO4HagjDI=\r\n=y3Gp\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.9.2-canary-0e3571ca.0_1666476688800_0.25082170544812366"},"_hasShrinkwrap":false},"2.9.2-canary-229a9a9b.0":{"name":"graphql-language-service-server","version":"2.9.2-canary-229a9a9b.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md) |\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html) |\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx, ts, vue and svelte files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path as you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"229a9a9ba18ef92cd0d5c2a0c542277f30841bf1","_id":"graphql-language-service-server@2.9.2-canary-229a9a9b.0","_nodeVersion":"16.17.1","_npmVersion":"8.15.0","dist":{"integrity":"sha512-6wZHqzaujcj1IKCk5PMLZi7yIfPjLMD8EHE1UPz/luA0JdYsg+wR5JYb7F2sN2Bklj3HpJsVCb6AqqbAyzIrVg==","shasum":"716c210bc2e74e3a459ebd03ca028a52bd5708b0","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.9.2-canary-229a9a9b.0.tgz","fileCount":104,"unpackedSize":545336,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCvCh8YkVOavqWc7Yj7yfK+mCkAoRKXskY7QCi/gHxOfwIgAaj4PJFLE8PfhywhD8QAkzSMJpYfe0fvC1ufogLXxzU="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjVGzjACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrRVQ/+Mv/8znelcCgM5xy446m7bTx4ac11OUraVs+TlHvPBdafZB5E\r\nNihgc3+syCJ12BQ35ZdvgtgmWxpVp4tbxyNdEKTEfJTcVDxiQyDz6Bwf7STA\r\nQXJJ/mhcOKdvzb2Ynuo0Os4+Q+XQZhcas4kWydGQ488fF+sytZ/brYuetUSp\r\n/3K8u3KaU9uO6QD0OiStyM2CcHh3rvHuOddJFd6nwpNQTo3pwgKm0gjq9jrP\r\nYZONr7pufGn8hKDNCjb72bqbZ5dLIo5oZEl67uWpe9rrfa2G8IJPt/2JTVVF\r\nWlCwEm6qXp1MD/IFmoOR/9t5Jjnnc6Mg1aSi6t8QXovJErIeQzDnJJSTP2rS\r\nKNuPLP4va57nbQy22cQt7mKfhcoUqZM49AKGgcKuODc8Zvd6MT3NvK3P36Jd\r\n3g2xSxyYojAP70ZjeJHwqGfcWHrNo8bz1yRBhsNlHNlAMswR6WSqnD/RIZ7j\r\nrN3wAQoV+pFhLCg2NUF9SVi/7Q++a5Lwoude+jQ1TKfBphaHJ0noLBqF4OH3\r\nKba7UaU7rViPMCkILmWFFzcQiQgLxXMUkKS20zMaNcPJ99L4sprt7X4NMmjp\r\nfF8/zSBDmDJhiNL8o83+Bnu6AYHiQ7PmJo8RaidHkKXGvLNHX0lQFS0AOVkp\r\nuZoE9GKWLcORI0GqSzFNW+IHMTuNKsADpqo=\r\n=/T80\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.9.2-canary-229a9a9b.0_1666477282826_0.19520113835979558"},"_hasShrinkwrap":false},"2.9.2-canary-a593ca85.0":{"name":"graphql-language-service-server","version":"2.9.2-canary-a593ca85.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md) |\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html) |\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx, ts, vue and svelte files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path as you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"a593ca858bc22334e562fbff8533800a182bb97a","_id":"graphql-language-service-server@2.9.2-canary-a593ca85.0","_nodeVersion":"16.17.1","_npmVersion":"8.15.0","dist":{"integrity":"sha512-o6mCQrrwtLSK91lZnRMpIBbz21vbavYwUBxZq5yaTGNLf1JYrt84izqHwijtjrOJ+NhrZ7c2RwFYpGdaclJvSQ==","shasum":"6e17906d81a6dc1295e5c615d4bcd966fa9615ba","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.9.2-canary-a593ca85.0.tgz","fileCount":104,"unpackedSize":545336,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCERee8Nbcfo+7JjZ9REqxhHu/ZTmornlV/Q1T7vHrmiQIgQfYJuRMN97NEjiT56CsHK058rPag8EAhnXil6QR+QnU="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjVG6aACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqxMA/9HQ2niDtbMcb3IrhEFYdObIiyof4p1RxBC0N3klLtJ84aiGnq\r\n3Dr0iWHilOGg3BNzbXFyunvBdVSAS3lsBvGq2pX8Oloj1UiHDcqUiJ+n8WP0\r\n4lhDII+Ot2U7smwnz/Y/W+pibpNA/eKnC/uZhLXLgFvvBMHrzT+lhTv9TYnW\r\nBpSp0jkXa5j+maoV2e8gg73UDecC4k1d5KJEk218fIjB7injgJcTuYD82afJ\r\nclkROslFwt86zrS4M/i5TQUgU5ZFcWbzQxAv+WN/+eG55lp8q3SycZSZa5kJ\r\nrQ88Ifoq7ixLhgchnjnC2Kg8FpCguZWrWy3Dd04N8Tb2VJE9PQBoie38OXln\r\n9OM5ESVKcFITj5KuikVQJvXqHLenGbIZ9zsHA2AE0HHTzDuHZMYzL0leiApZ\r\n7SNvrLzo59m1oDa+YakVroo/trRcs53fVfbV91Jt4HMXdGeIuTGsC0KWHru5\r\nYCj6BSxyo/N4v9/esWTAxC8MLUaxjMi8MP/z3C6p7EkNPE/XOsCD5peAIXbl\r\nQtRrMpwFaPGjbnkxAhOnxpDlK66kMEA9diLEgMrbFVYEGy13PwA5hngAirA9\r\nHP6CD5K1VQ9gu1YCsmw/VOipN5+f5Z+vmklGxTi5/c6UJqe+deBvs2m18h82\r\n3vAjj1GtbBtuT6I3HV81zqSdo2r+ksEHEKQ=\r\n=f2Vj\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.9.2-canary-a593ca85.0_1666477722202_0.6891274771057108"},"_hasShrinkwrap":false},"2.9.2-canary-6b5ad5f3.0":{"name":"graphql-language-service-server","version":"2.9.2-canary-6b5ad5f3.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md) |\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html) |\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx, ts, vue and svelte files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path as you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"6b5ad5f36c4e7c74ff30f69bb9f1848fb5bca01d","_id":"graphql-language-service-server@2.9.2-canary-6b5ad5f3.0","_nodeVersion":"16.17.1","_npmVersion":"8.15.0","dist":{"integrity":"sha512-qed/ZWuO0Nm8Uo1Yjp6J13dJMlw2d2ULzgfyM7uiM6iPQ1z+lUMnCDlzjMn6Z+gafC1By/dFIUn9/cQomMH+NQ==","shasum":"b55f8a3abba819ff21005525cf19f7ed2632fa60","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.9.2-canary-6b5ad5f3.0.tgz","fileCount":104,"unpackedSize":545336,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDLKrkJkg9nD5az5M11/Zeq1mpsyq6umTs8YPr3eNvfoQIgcBfmFCput5MqRhyakp3yYOYPwAvQjme4WeV8FcqaRxc="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjVI+3ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmo/hw/9EFRjFe7JHsFbveO0Mo+7WtDd2OkREA3U8jK6+ooCES4ZwDvt\r\n/HmogfY2PNuNgTKot3tx7PPuTIH1uS1y/MQy2r2K7EpQFLxtCvxC+mlowC/w\r\nm537fl22FCbFQIURmvogHnl7DoyF2ZtMbxMcLjkSUH0KTxrVwB50sP8DdWOF\r\nXukfRGcOwyTCTNlR6tIiG8iEveVGEfi1agAub/S7k9BQZzhDHxaz4EinDMHp\r\nTMUtg5gb9e3+RgbQkl3OBvPV6XnXiSbeYRHdrGNJgiUV8O3Go/uIpr9oZPf9\r\nVHYX1SvXdBS7XJE6plbmGO5AuVjsJcH18L2lNUhfYKvgOqxfc+xr/yw7+J7l\r\ngH9thEAvNHUR3HJJLK8BfLZHFhobQTsHXCg/KlHdw6dls4RYHn4Jkb2WcuR/\r\n7FTWuV5sApSytq4EOnyJHX9ueKfdMZ6QNR9NVhOeDH+oYRUPvGLL43+Cyaxz\r\ntlR97oLUBPoLH0X7xRIMU50WB1m2+7p7/JQ9QnXNa7eBgLUCgz1kiUY9mZd5\r\nYh1asO1zGg9jXH3wrsceEFMwRod57ST4ARuVgrJvEYUsZN7Px2gYG9eraS+d\r\n/Erl+DKmz4v5dpdJqI3gm/UlMNMD3k2DOu/OKGQxrT0wLu52ge+GTaKgnxMq\r\nJAsSmjEkD9KM5ZKYXAQrI07MUSPynK/vf8o=\r\n=jguM\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.9.2-canary-6b5ad5f3.0_1666486199101_0.39771004304598945"},"_hasShrinkwrap":false},"2.9.2-canary-27ecf339.0":{"name":"graphql-language-service-server","version":"2.9.2-canary-27ecf339.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md) |\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html) |\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx, ts, vue and svelte files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path as you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"27ecf339bc8437a1ce1eb55a061d848c400f119b","_id":"graphql-language-service-server@2.9.2-canary-27ecf339.0","_nodeVersion":"16.17.1","_npmVersion":"8.15.0","dist":{"integrity":"sha512-iqmXHf8u8fI6uQkBCsWFP0y5QRq+VEqdadMxV2gCn+MpRTqhjqlj/0ixeQDJ0xRP8fJqv17Jrskwx4S60TbsLA==","shasum":"707e87a8efb6dc87225e71b298bb96382e314cdb","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.9.2-canary-27ecf339.0.tgz","fileCount":104,"unpackedSize":545336,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEsWa2KH6vVVswp4+RYoq+f4uQ6jmMMalP6RkAoFaDMxAiEA4DCTE1Zqed0S9Ok/BHa83VLqia8DcDfi7T1tJDDXW54="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjWndiACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmq35A//e71ix6wf+kIE7AZhaJcgbt0tCugnbHBkEKD1Hb3K3FchfiF7\r\nDn+ptrmgYqkK9xg7WSCl2cC26tW7315U7HXGxqQkBF00wCDSDZMiAmyMmZPM\r\nIsZ0K7neWYyyZW0tRQLH/n0Y7jncVh/hKFMSTG0D9nX6pgO88BXt0NQmHWzA\r\nVO5rDcOLfkh2fMc/suVwWrWuFi4InQ7pCbKJqp97pQ649MQ4f5bQ0UtCZ///\r\nlKDOZfBJm9lzr6iFvR/+cmHg9Vpev1X+2V+QfBt9vpUh+2Mu1ZYCH6efj2Y7\r\n32rDyd4Hhh9zj2EJsxwe14uXn3wEy6Q3cvI5+q0aeccV/FxWd8PgRdhgx7hP\r\nQdu3Kp2X/IRgznvjxh0IFXTUbXodER6fJhUpcq/Dtp4HazU6IC0kEJlw0XH8\r\nssj677iEaJXtqHzXDyVCcOmE4S5z/O8ZsJzR0CXMlup0fJoL9HtZRPOhAODj\r\nSi6SkQZqMBml7+POUbp/5/36hRv4xqZV/vNrrU8hL0UT/ojoTmyx5v3HznQj\r\n73HfpU6Z+b2rrGL9ihFWsE1qD5PgMgrY3q7wZTbUFGn0MwEEO/P5UxEQar1c\r\nc/I/fhLvkEAFQKjqgSvnUCj37gyKjftMFvU6kDdEOUo502hSxwPE3AHh7Xhg\r\nGkcPZiCPpCDcmQQNKtVLiPoa3s08ii/2qBM=\r\n=bBE1\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.9.2-canary-27ecf339.0_1666873185972_0.5282826522729598"},"_hasShrinkwrap":false},"2.9.2":{"name":"graphql-language-service-server","version":"2.9.2","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md) |\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html) |\n[Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the [GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum) definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript, typescript, jsx, ts, vue and svelte files, and an interface to allow custom parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch notifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on [Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see [`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server you want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for your extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the many ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for further customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read the graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path as you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces in vscode - in fact, each workspace can have multiple graphql config projects, which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it initializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this very soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as via `initializationOptions` in nvim.coc.\nThe options are mostly designed to configure graphql-config's load parameters, the only thing we can't configure with graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static `loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc.yml` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://microsoft.github.io/language-server-protocol/specification) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"56197e711853c04f650f9c1d4c87d0092ce09e61","_id":"graphql-language-service-server@2.9.2","_nodeVersion":"16.18.0","_npmVersion":"8.19.2","dist":{"integrity":"sha512-AmgdMLNa9P6uyg1Ct1Jq+i+otAy1i0/jzzbatNdxpiznh4wQ3CTdfw2hRhg9K//EeOHvrmtDzu/Z9HtDM5R4Cw==","shasum":"8d1629764c8f7b2cd5b1e6bf749d827301dfda14","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.9.2.tgz","fileCount":104,"unpackedSize":545381,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFuPRgSPKE/rvJCREst/EnRFMT8xIg58AASp9fGoAbD4AiBfrfc18SZWyKpCBsBbDNeEo47CmxkIsXJBq1B9qk0yow=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjZuomACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrmJBAAitYt2pxA2xoQHZjszxMwMH0drwj28ZYmu/GQfnsEmW2PZ5v+\r\nYiinepi7QNYxJSWtoCvPH6ZES7OzxeCg0NqqV5/oX0P+g7NbxQMasVr+k+my\r\nsQX6lDgaQA70Q6dfhjgvg6v9OFXKu72jXVLotGFDVSs3Sam4/s4KXF3Ve+CD\r\nmbgb2bOtNkdno2n6RDZouOU7cFsPkn9LYaXE5jILGqv8RPUxrthq2dT+QKet\r\n3uaH1m3dL33JACt27zxijKkmyfZptROxiuwMOFte+qOVLTtVjVB2TZYFFaeQ\r\n39SanVmNsbQ37aOco4wkyxu9hvCT2NOlohyapmU0DAf9GwNekXSB7vRaX8AW\r\n9he277TvT7cHi0yf23Yb3ULTxXNQaLPCxIindXKtPEuRYKu82ECr/5vQaLk5\r\naWDQqjcDC5JuFU8/sEJe3qZiknb8Ujm7HydQQUxQUaX3huRsvY3mqP1iKVIp\r\njqtyGv72V7gIzBUUqoJ/12RwNVdqj3A0GNP+KKwhE7hsWSbpz+3O1jROdGld\r\n0yre7mjVrd6iSSqrfs7S5UEONQEyl4hCKKYKw+4wPRZ8grxEG3CVyfar1XKO\r\nEMMY28y5GIwZs8ty9r7KtScriqgYlHv16ih0IWDT8q4TafXxhXnSwUe/F7Ss\r\neia+WRypVPWUv7CBJUo5Kptj8+Kid3o/UEk=\r\n=j1vQ\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.9.2_1667688998096_0.9464450601034025"},"_hasShrinkwrap":false},"2.9.3-canary-c3ab8cb3.0":{"name":"graphql-language-service-server","version":"2.9.3-canary-c3ab8cb3.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"c3ab8cb324a82810d8d0b1b8d0af6d35babb6dc2","_id":"graphql-language-service-server@2.9.3-canary-c3ab8cb3.0","_nodeVersion":"16.18.0","_npmVersion":"8.19.2","dist":{"integrity":"sha512-FNxVo5ZbgDbp0C7BJUJ/HMM1SWCGxiFnLk7fH7JBLXMuJK+Fl1uFRluyZP+k8lRkr2gprlTFx1br8OSaTzEBPg==","shasum":"8c9453ddb09a40ced5bbf75a3679d7cc51287b00","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.9.3-canary-c3ab8cb3.0.tgz","fileCount":104,"unpackedSize":547512,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDiRFtvTnkYApeCic9ZvF//k4AKTCRiN3khHnIcdRkEcgIhAIuJpQOvyRoscJ34nOQGOJOzP1oKXO3Gw0w9MRmYlBHr"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjb7enACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr7TQ//S6Cg1mEi6Imhvc7GUuWJBpBVQ8yhEFrFwKphwsUnL89DPAqu\r\nIPp60ZL2g+QxYLvqV5WaO8cB4N7vTTG1YPzeH5VWN94CYdkd377wqfaldJ2s\r\nYF0NwTWZISQ6AnysnHQJ7jztpavJcSAhzQETJFpozv3wNMsl+Y3FVQO4vOYx\r\nHmdHxOwSdBQjpy4NW3EOwyuJSyNthVRrw5NQP3Q7Qp31mRLoLH6qJA6+EuC8\r\nafCZSXHv3yTAxFEX3kUAjv+LluiFtLdqEgWQFPkxw/FNSV0IibWPDpjEq7aH\r\nYWXAGAc7ZbdhPOWmhgmzdgtGEu2zIF59BMsq9Kn3uQ3Q4b3Cfyw2FHPicFLg\r\nw3SdEhwCPwgXLQFsgVPqrEzGDYf+z0s2dMNY2rIDw10YoFIolzc4GjXDHV7w\r\nZiJnV+L8Nh8UOQMHAFECpZhbnMUP7o3vdLpnJ+xVj+Or6c9Dq02wDTp9AH7Q\r\npgeGsyr8pzljjURgMpQyod9jaB9kPqhnFHiq2DhQvkElcHdTSnHvSBmhOcw/\r\n9jx9GjfSFdrK5YnWtPcdu4Mo+nLAXaDruCJaGOcmk5UYpducGK8dqWNnvBWn\r\nH4mH/bNbocYZehaysjKy8jKv3wAK78GbZqJ7bIsE19ZGiHW1lrpRrRkVuehM\r\nB74/cilYMOYPkUEARCWrSazbkzKwP7nDzRo=\r\n=hbmB\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.9.3-canary-c3ab8cb3.0_1668265895237_0.8893461247881251"},"_hasShrinkwrap":false},"2.9.3":{"name":"graphql-language-service-server","version":"2.9.3","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"gitHead":"a11f090037179a5463fa64c512011a1fe92aa5c2","_id":"graphql-language-service-server@2.9.3","_nodeVersion":"16.18.0","_npmVersion":"8.19.2","dist":{"integrity":"sha512-+/uAtoq5rzvssnqGVdP1NvxtyQNSZos5jStpyaJOewVzKXtchNobovwoLnY4Hql26k9mcV1SVOy2Cwt7j8UDJg==","shasum":"7130b0a005489517b941514a35069527081fcb2e","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.9.3.tgz","fileCount":104,"unpackedSize":547494,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEeJi6hF6mbyTLGX/kJfmAjSpBdVObp6UW7z0AFlKWmOAiBr7ebBLBdPnjGrvZnsCW0P8WZk/q1ZOqn4AFjMybeMYA=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjb7lsACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpUpA//ROfc3cgoSAqfZ8xUU365RHmYLJOGOrQZQ9F8LnNk1nKUuMJs\r\nhjBjBG/eVS6bK384IGFMXCoJCT1D8Ry0dZMPnxogenpWuNz5wjpC8SJ1pHee\r\nor09XxQdqg9sYKBlrALQjJk6cjnQUDqLOcOrMZZRawI/wjVw67Gt0Am4CKGo\r\nV5Cnmw+311xuaAVxOi9d1mrq1J3O4i9zKaAsSPo7up3ISv1w8z4wzE1xG7aC\r\nIOpyAS9czy/iVt9QiisE0z7fnVjmdq4taoPBZ+R4M60MmiwUZhKA10fTVPrh\r\nScO7wRgJ7bl8oKCJ/mqN5gLS3qKxvtmKNmQZsGbiEUA188Vt8ZvcTsSWCiHK\r\nUBFgb0LEm4TPOl1IkvKI7406CqmR0YrfOgcB/whndR0jN+TFEMcicbluSyfV\r\nBFcfB/Kl93mN3W9Q+ORiAKcw/nkCIA4fJ4eqc+73geYxzQZDRKqNCk9LqhE5\r\nElRbI0VhFTS86nBuQmfibZjMGZkIP4LScRuMiMFtUl1MvHCAJi5X7I+/qA8f\r\nsQr3cQAFb3l5z6eyrfZpkuiBBdTebhmVISOfWudjxUdZ7+S6n4I57w+3c8yK\r\nq53o3gBkgVMl2uJ8Xl4VdLM7VIRxH+CcgIgUFx+JBFauP/bVUnw0WW80n52z\r\naH1mj7zAUhUzXmKnhcaBXta+8KMrr0w7Ip8=\r\n=KGpm\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.9.3_1668266348108_0.1987166113910639"},"_hasShrinkwrap":false},"2.9.4-canary-1be0389f.0":{"name":"graphql-language-service-server","version":"2.9.4-canary-1be0389f.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"1be0389f5355afff9a57e2de6a03516f5cc11ba6","_id":"graphql-language-service-server@2.9.4-canary-1be0389f.0","_nodeVersion":"16.18.0","_npmVersion":"8.19.2","dist":{"integrity":"sha512-zychz3ZbqNuzNN1UGxGR4NiGnKSdv3Oj2kIDFoVmXFx6aVMre2QVI4GfgYZg4ltPbHx4YqqeApamIp3LuKoi8w==","shasum":"4ac39e3a257cbc863cac18c9615fc59ae369a21e","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.9.4-canary-1be0389f.0.tgz","fileCount":104,"unpackedSize":547754,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIA5+/HXT8vw1wyEWdFXlZwHgINKn+Qe4B18TLGsmrgMWAiEA/7uUE0tpdkM1kr9bcSkDLXj2Tg7+KEf5XAuwU4hiL+c="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjb8srACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqFtQ/+OPpPMprWkig9eQbREtWnanh4ClQbPg4O2wbAZW+Zdoez3ltD\r\nmd9OZ61DNFYf58jrs751C2BxPU8A53EvrshPRGMhGXB9Fq5eQrE44bPJGxxG\r\nXfWSbXt6+dSrCf3P5QICk5Lh8PZuqu11vQyb6teMK0TbjMql8arH3eG6fu7B\r\nOc4B2kob3SAEWJgUH8qfc5OC4BsA+9hwAswoiskayy4NhcmpmmqjE00j5It6\r\nPJY9+FofZ8a80+FwUeO5403FdeZE573vTq8D0pHGg1mE4XjcLUr5av7f5UUN\r\nVGfTEk3dBHueXZqULktn0xqP/ufrvYuTVvjPkdUyWbTqlwCg+MA4TxGwmJnb\r\nAooAgbT5k2wPV4t9xwAD4cZtQ/2IHXK+XeBfuG7bnwavBN8ZBMrCUbengNgH\r\n5z2kfpLAJuTc2d9ycd9PrRjhZ0VPvU/goWZzsBNQRHEBvBgv32Fs/CQoyq1X\r\nsFeFljNxG3O3sHYoQ5jzEOJ5fNY5Z2yEQ+yFHDj4TgB0+H/3AB+vdEo8JdvE\r\nAza3osq5RqPpDsf2PulBfRanyWDFJZshwNzfp92Hat57TT9gqU82wtJ/3wqE\r\njj0TApbKhdGjsbznsywi1jmp+R1o9ZGdryKpWtKqy8OwblwjcfGjzwpJjUtG\r\nKV34WXkyDIq+g4OPofErnQhpD3YOGqHYxzo=\r\n=NXTQ\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.9.4-canary-1be0389f.0_1668270891371_0.995231497447538"},"_hasShrinkwrap":false},"2.9.4":{"name":"graphql-language-service-server","version":"2.9.4","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"gitHead":"3f9a94648f04097533f72bfa35c8e8dbe617caf3","_id":"graphql-language-service-server@2.9.4","_nodeVersion":"16.18.1","_npmVersion":"8.19.2","dist":{"integrity":"sha512-26PediCh1HWP6vIwiqCCUkh1QzKoLVFeEX79SerI3ETsfCS4RYyFAX4SiiFPLj0JKKM8Xmg7OBjRgiwwa1AdYw==","shasum":"d1cd24b4953297405a9e54e4365d983a0cf7a1fd","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.9.4.tgz","fileCount":104,"unpackedSize":547736,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCc0UKZolDxuroEnGEWJKSTp3BIbtaABPZ3ZnCtOcqLMwIhAM4vChLojyfe69CjrUlPM6LcyMEzFTqjyWZZdzHen8If"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjgN1BACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqqvxAAnXHkiVTh3pv6cnF9i2PQknCs+dzXpu+lGbOQuG3SY9dk5x0B\r\nSNGxS622Ay40i813wNtNSZ/jzywOPzjNJCutlzcAhC63awVKJrbhqDMZE26z\r\nyRcZ1Q2cjtD1i2pBmpqnzybwY+YUF3DXNK809zsDp4XDdeKqODR6JbLM3or0\r\no4uAV87X+Hd8eQWDizG8iSUD07Jgch8bQkF7xlGSggTbnfcSwsOfoKAUYP8K\r\ndnmgTONpOZUbTJNyOabfX/DXYGhVjk5XHqq8JW0Zi0s1s/y3Sej1YXol7yIx\r\nwZ5EJmach5AwzBWICItrW3RS8852vSo9SRn3PSKFCwhJCdb83WSoQHGdnCyT\r\nmiKUu28HgGWx+E5BnJNSBRT7+l27kK23oMFm+gOti29mdpHbgDJZkSmYkkqp\r\nglqt1EFfgkIpdBKYTa/3KxgxSSGuah5Q8uxNi1QuesjX5lMHduYsF0cX7jEv\r\n0HpjNClhaXcblBCg8JlGee5RmDjoaxvrawJGoZxetyRaLctJgRv68yEt2qYt\r\ncUr0Zgg/h4h7GW5v5DzrTE5TT4G8C3EIY7ziRJJYqmVdZI6dq/zBDGxUjDlh\r\nE/+ARuJB9WibafsF/o0NxN+SQnVMyHgxp7RprrX7jEo6ZIaouQ64LAa9qWw6\r\nQBF1KUbQZPbwrY9IfLJYgti5kTovf4r+AjE=\r\n=3X2l\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"leebyron","email":"lee@leebyron.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.9.4_1669389633212_0.9432119551743556"},"_hasShrinkwrap":false},"2.9.5":{"name":"graphql-language-service-server","version":"2.9.5","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.17.3","@babel/types":"^7.17.0","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.1","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"gitHead":"42f2978b627062cd969397778470c4ed9850aadc","_id":"graphql-language-service-server@2.9.5","_nodeVersion":"16.19.0","_npmVersion":"8.19.3","dist":{"integrity":"sha512-u4X6mgoB5ufp64h9vT5UsFgQZ8GsbIIGLHfr/vndujlVpY+iHml9ea1o8on2c9i1LpB/ILa2zF90pJkBQgASfg==","shasum":"3607871062234fb230bf08fe4cf4e24c05f05618","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.9.5.tgz","fileCount":104,"unpackedSize":544126,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD2ekz27MwxLnY1xuz6L4cVw+TnyWXGG3e3TIjgckntWAIhAIxQl1fo1hyi1qFexCQD2OcOpEdxuECLazBYsmxRNHtR"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjyAJ+ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmolmg/+OY6EGEsynNmQe1BxtqgmYxbX0PIYKcQCdO+uZ2BpxTI7nXcX\r\nr5xWPfyvQWzlMu4PCN/TVK9+I5mh0kVlvYD4Ld1nquJiXzLW5M2FBLMVxY8j\r\nUhTBc8M1GFAQLEylsGt4+Zyalv3LhCKBIHlnpFiKa8i2vHq2oXrg7ocaJtlh\r\ns6Ll3fUqB11MddS0u5ekClkNvWJgkXJq3FMHC0lD1nc70tbrlCOUnoMfPKiB\r\nRnoA52y9GrcLcAKs3aApzxrxU+VPlevwAqCrOTXN4Rv0gdglmmV/Q1sXqbd9\r\nkoyrnTDB8H2YMGzz0d3JQTVU/i3jnTkD7PsEwGEqeoVsn1ZDdiHiz4VdZHL0\r\nC7+WhcpxKn1dv86SBBw710ozjBYWHsf2cAGoY6x6kFrv3TDlMqYV2Mxpwu7e\r\n6cW9qC9zLDLxcgD8MSTV8ZQHBccmKc4LwrDnq3fqfFVAxJEoOA7K4YZqiDUp\r\nBJEg5I9ZkCmuh7k1GANEkWloWLfoUlyhv9bmRgNQZTYBc3PpARHKrtGQh/LJ\r\nwvwk6sFfZI+QXUSfDlPCeYWvuh1Eopny063EVtHE7ZS5HxdnPlCQ/tzmectC\r\nMmXqxuqKpSR7U8V8aJJCyeb1dnXT47/roXnMf2+zqSZVOBmkYWVw70KYZvkX\r\norU7DZllKefcGgnVRRuCpvWZiD+XRn5dtic=\r\n=C16I\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.9.5_1674052222484_0.8669274114184373"},"_hasShrinkwrap":false},"2.9.6":{"name":"graphql-language-service-server","version":"2.9.6","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.2","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","node-fetch":"^2.6.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"gitHead":"b2ee6d8a2058e11da3aa9502aecee2e849dc91dd","_id":"graphql-language-service-server@2.9.6","_nodeVersion":"16.19.1","_npmVersion":"8.19.3","dist":{"integrity":"sha512-a+kwNEPX+ZvEUNxE8u8K/haxsfVfk1rn8AjzHWsXUhLfhl06vhCiU0kgdls1d/DiMJ3HbcNFjeKqV9OZcLNhdg==","shasum":"bf92987913e314c82a36a19e67eb679f221007a6","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.9.6.tgz","fileCount":104,"unpackedSize":543322,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICaqlEXcldlcHHKseIf6dxCx/GE0LqqOlgsE+Nb5kc/QAiBK1WHWI/xkJzaEu6uOmq7EWmz+IDY8AwPioMgkWeG1ZQ=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkAPjfACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmpoug//Wf0mI1/HHFCwFLFFRK6C2ao9xnD/pMWbmsPnUClXsziK3urL\r\nH03k95wjSP+neef3FOLIj9XaDfjHL7ei6W5oORTGezAvZDmhRJEdurNTyESb\r\nzrlRVWMnB+JueGQyzLiQPPdwxeNiZcS+rfO1KcTRijoagxz0skSsunXUcuVZ\r\n+HtNMeBO51iYveOHYR6iqpBwY5iC6FnVeA6F2f5UtauSzJmXVR431QpFZnFA\r\n8eIiLXUMbIvybk3UZPyMLaR/uT49uGWNSGjrk+gBnffy0mDkL/X3FpyI305h\r\ns6uwTpBxP2x+OUhNmlk7ymIWmX2b7E3Ux/XIftb7t4U0mmbGpFH72nQhefTz\r\nBLveqnq1kBQeF4So6oLw28MtdfMfopw6KHAb5g6/Bc2DklSGPNolEtFwf0R9\r\nQMzHjOStAt6KnzBkbSb8t/RgGlL/QkYrYO+jFXolhsOvHf0raqawbzdh+qyK\r\nHDrD7r8YhVS8IHoihjE0Vejpd9K6l2uKP3flVaKkGXRkPmMUxpHCts2arMEG\r\nGXgYKBKnlN5rwK4aqG0gix9VE8KY1gsgYo9hjBrX0H4luByAGC83MjCuiYT9\r\n4bU9Yq0NFcqmvnKC6h9H196m0sNIBJ55Vt9pmQlXHUhaOPJdPtX4lnq6CJu2\r\n9CE2SlcspijwtPwnmke+DEsU02KJO1rX1x8=\r\n=E/n2\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.9.6_1677785311184_0.7679980740981147"},"_hasShrinkwrap":false},"2.9.7":{"name":"graphql-language-service-server","version":"2.9.7","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.3","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"gitHead":"0ab7426c765f6a1a44ac5c544e2adff90c1025e2","_id":"graphql-language-service-server@2.9.7","_nodeVersion":"16.19.1","_npmVersion":"8.19.3","dist":{"integrity":"sha512-lfjWJBOl0uuJuEtpdfh8/aRokkggBarncM/h4pXrclg+sInkIKn2JN7VdoaPERmGO9hzPAnaGuVJItSZYcanoQ==","shasum":"f158ed817c6c683e39ac02cc9b61109cc8b8df43","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.9.7.tgz","fileCount":104,"unpackedSize":539339,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDxD5YU2ZkPujiqmtjty1T+ks1/I4gt5N0/HMAKJlbTFgIhAL3sAeDXuY0zzRYDEpkuNvng3lMP9myh58ROe08u48vG"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkILALACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmpftg/+K2R14wTNcSKBqVGX/L6H+KHUrx1uYfiTaeuEEFR1qOLYDLzh\r\nd/zdeHPq5phkN8M52D1TI5lTPKNYqvKFI7Eaerw271ceiptu6M4dRCKXmNez\r\nGGP0s6ixVG3fgSzRhWc88ahHhdKZ6Zj6tvS06OdFvCoLgqahmFo1rQnDU3YP\r\nsMWB8/vM/VJ0W9D2Ml9nH9FrH2rtl3Oc/oN+Kza+IadUyEOtZ0B110JHu2PN\r\neXGg3pD/nNaN5Casn6waK8/Y9hk404Nu0DrltLrbSxRp0tP5AqkC0cdfl0+f\r\noeYwStuWeBU5vGGuINPtynUCiT/P8fPnxEOaiWPvhcxj79t7uMRDrSnQXzTE\r\nfu0LyFABcf2QKUZytun+wF3bE32e2knOyLu4+NDbzNUHK08cxIeoaTdBvkQ1\r\nXq78brZ0VEsqAYq3ZvxzEXMSBt8fJ/phy1WKauwfAYkBwL/osfPF2uhTABzv\r\n9U0kiVRqk0339co/n5nPSUqn5/NTTxApmUd9Yla0MHMlc94QADjnZBFP/mje\r\niLR28XcsvsJ7FhjVDwL7C02QTyAyBsLuW4Q543+g6oCgpZsplTQNPwgIe7Bv\r\n+VNDWF68g7MFcw5CmS2UnWJtaTy6glkNjouyNroBmKKF0pq7NKyB890J5NEi\r\nlEULQu8zIZmxhdPJ5C/zKhpV2pCYrARGL7M=\r\n=H+F2\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.9.7_1679863818916_0.2162410304391602"},"_hasShrinkwrap":false},"2.9.8":{"name":"graphql-language-service-server","version":"2.9.8","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.4","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"gitHead":"63762fda5aff3605c2c5283a0a53e19b51108758","_id":"graphql-language-service-server@2.9.8","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-f3XVTPcZ8ur4gJ11tVvArhAvpbIzsBORqA38MZjNSFeJl2wcZXytNPfz2DvUnZsKm56mrFh3IFiaOOA9N+DRMA==","shasum":"f8bafdbe4a65e13a039b07f662e0b0128669534c","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.9.8.tgz","fileCount":104,"unpackedSize":541887,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIB5cRbrLhyLSc4Gga7HHxzWTe2OJdYMPLsCz1FkU2mbaAiBLrPYUgujiOmgWFlrg2zjdWNM16Dg/IMrNAtQBU8rIqw=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkUhtPACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmq8XQ/9EkXHmrh6bg+iCIufKYlm+tuAw1w3wK1nB/CXkXXctWqYtzTi\r\nwd3Ac9JKpq/Rf6VUIZLrPmSVn0VZtJDAi5mYfQ8Px2Ee8I5OkOTh6v3AeeIQ\r\nUJeKzxLmsYGoG/099nXrU5fIpuCg+f0I08YC0du7404Ja6vrxtqN0YSA6hN+\r\nglsm4DHi5HMYjdwbmYjROyJpi4XhXdbRo479HHk+CtHwotoqaRoO4+bYmJyI\r\nNUNBPRBBsuULlSOt/58aLsG/VvnGVvHmCrMUtamVV5EEkezlPOxpnMy14ikN\r\nZhljkXZ7/c2BUphP1Sk8dyw5pb94ARTip3NhHMoQLMSsOZUsVkr7/aehcW+P\r\nMTIBGLqTmzwaTmOdyaAxmnflWcnbZDl8leRbN6zrMJ8pzvmiLgRoxk8rc5uB\r\n3VRan38IsJZUXRdNJ39BpQMjXFZvVlxrQ14TOu/2B7UowwVUu3WcggCFaZCb\r\nXV5fRhkA2BFHYaqweKT84aOqnjq4NaDlgI5K65AHRgDhfU7qutIrMZnWLrVt\r\nk0D5XQOPc6xWfGNKBMjUiE0LuqXBAICPZe0BkwkcNcWpFrf6hUU0/FzqSbLl\r\n0PQBNn5BrGTPfEXcdjMdF4/bGJzlYGuKjj7xWLZ4Emn9aY/z2S5mhz7ydwvR\r\nxvbX2b64mJCZ+Hv3hyiuABu3Ns0y07ZUqaw=\r\n=rnGP\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.9.8_1683102543711_0.9175265372473504"},"_hasShrinkwrap":false},"2.9.9":{"name":"graphql-language-service-server","version":"2.9.9","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.4","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"gitHead":"8dc136fac5d1e73d2cf96a99c6c222f7de876d55","_id":"graphql-language-service-server@2.9.9","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-Rzy5gMuI8D2qC4B1ZY1EfK3TL7f/nryguK9ggyBIWVMWeMm6hpStvfB3PUkXRoVlV+Zq5N+M7i1MDdn8GlixEA==","shasum":"2ad9435c13e6a7a02180790558964aab921eb9cf","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.9.9.tgz","fileCount":104,"unpackedSize":543359,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCXp7KY5i3pvOeuAqV4d31EzuemhGCfQwbSjW02KDo3lQIgDZ9e08UmoefU5j3ZI9FC2jVhRA9LYyWupnKFsKXaF98="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.9.9_1683286822447_0.5347737704185209"},"_hasShrinkwrap":false},"2.9.10":{"name":"graphql-language-service-server","version":"2.9.10","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.5","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"gitHead":"f9b1bc29020b455125ba303909de57ff6471c624","_id":"graphql-language-service-server@2.9.10","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-6jm0mEl6GTsspMP+O/kIdCvtbCNap9orSY1YdhzZbzDeQmAQiIkf91T6qxMwMHOCN/AbUnD5JSMAGYXHCXNiuQ==","shasum":"2cecc7a63128b830e62cd641756caec154dfc37f","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.9.10.tgz","fileCount":104,"unpackedSize":542405,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDuTczWgfPvoocxX1TnAYBOEe9TlLFZSX97J8clASgtlgIhAOGrGvRrShl0dWrV89XTw915xEYdJtxafsiKhT3ETg96"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.9.10_1683546517433_0.36825327156065124"},"_hasShrinkwrap":false},"2.10.0":{"name":"graphql-language-service-server","version":"2.10.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.5","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"gitHead":"083ca10363254be408c7ed4bd5bd113ca45ec921","_id":"graphql-language-service-server@2.10.0","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-epJCsy5O/EJ0X6K6OU2IW4+DNQM0GHeb8FbGZvjdVJIXgEhYNZTdyCv9a5DTHFQjd7IOa3SQ9fFBKrQzD2u1Qg==","shasum":"32f9f49ab5b7d89b41ecbf584f728f2bce0c34ea","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.10.0.tgz","fileCount":104,"unpackedSize":544135,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDAhgaeuLNzPZ06tP64jNQVijbFrOiXUk92tOzhOVepMQIgHDnNJ+WMSNTHzpQu5hUcCfTj56Lj6bb10rkKFwL2iV0="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.10.0_1683547219519_0.055650837283825805"},"_hasShrinkwrap":false},"2.11.0":{"name":"graphql-language-service-server","version":"2.11.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.6","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"gitHead":"ce03d2add0adfd224ff3b7ba7936838a0e16786d","_id":"graphql-language-service-server@2.11.0","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-rl8E1mxEqGsUDez7U0alZ0vJbDZocXt8Zexn6EZM65aeCQJRDKXxs44CBCVLlNtwSLrPkX9C4w7sWlYHVz5OMg==","shasum":"38f09054da0394056b60dd562a976ea0672880d4","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.11.0.tgz","fileCount":103,"unpackedSize":533140,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCECJ9b4njcwqFIS7RC6dkS5/VUGGe12b4AJ/rWH45k/AIhAODOGL4A2wuFOb0kqjeC4ceVX3krC/NMxQPlD18esyG+"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.11.0_1683806431894_0.9722145096581623"},"_hasShrinkwrap":false},"2.11.1":{"name":"graphql-language-service-server","version":"2.11.1","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.6","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"gitHead":"c33dd29eed219bd96fa37ae2a45aabfe866d263e","_id":"graphql-language-service-server@2.11.1","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-TEMPvdmOzrI/hW5ZMonz60UMTf11blGDKqykqY3XxdAYS8ZrBPFxNMntA1lfyoQzMDDOseUVu5B8LRPxZZfjcw==","shasum":"f4b3fea340eae3e1c8d4102bbeb9cf521078af28","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.11.1.tgz","fileCount":103,"unpackedSize":532275,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFZcSjnuwTno0wdqCTMOJjesljKu1bTjdoXenH/G/wt1AiEA99+t5Dhh9wbxBwbfTyWljvydAQCUoE+ZTlKegCdXJFU="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.11.1_1685226138816_0.7735115828786694"},"_hasShrinkwrap":false},"2.11.2-alpha.0":{"name":"graphql-language-service-server","version":"2.11.2-alpha.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.1.7-alpha.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"6ec273bd297239753f3faecf3eb85ed138351092","_id":"graphql-language-service-server@2.11.2-alpha.0","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-tkNx8wVKHhuc4AlQ1pRw7ZmkmjIo9Oba/jDQN5+HLuZn0ifFEf6gXJHe0kM18oYcupDHBjLi0ujyP0KmQ+x0Aw==","shasum":"d998cb49f8a8857e1795dd81fb82ef0f8982e552","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.11.2-alpha.0.tgz","fileCount":103,"unpackedSize":538458,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDZrNww8+CN5MEX8c6kuNps6uKbotuJqucFdegmX1WyTwIhAM9m/YHRA8eDTf2d0HeWXnQXjO+LqC1K+hBSxxfXqpiu"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.11.2-alpha.0_1687295961881_0.6823818305032914"},"_hasShrinkwrap":false},"2.12.0-canary-616f8a33.0":{"name":"graphql-language-service-server","version":"2.12.0-canary-616f8a33.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.2.0-canary-616f8a33.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"616f8a33d278f54aa09994821eb17be8a323d7cc","_id":"graphql-language-service-server@2.12.0-canary-616f8a33.0","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-fg2H81FG/kWy7DImPGD+PjKFMuizOKMh4ZxcO74VPanHc8JWVFqJy2UcLDlIoGTOS6ri+jfXzi54dT3JfM+cIQ==","shasum":"db0c1f902574d86c88ead3627359bcf56c0f2644","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.0-canary-616f8a33.0.tgz","fileCount":103,"unpackedSize":558963,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEx11NUoDcPxxLryCAwlN9Q2THjf7H3JdJ+P+eB6aoPbAiB2L66XlO1GK4aPtS+kDZryHG1Cy0Cwgvj3XGXSP66krg=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.0-canary-616f8a33.0_1687386640037_0.4351980053391107"},"_hasShrinkwrap":false},"2.12.0-canary-2f7f1266.0":{"name":"graphql-language-service-server","version":"2.12.0-canary-2f7f1266.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.2.0-canary-2f7f1266.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"2f7f1266d5e7c6cb1163629231d1db391f62954a","_id":"graphql-language-service-server@2.12.0-canary-2f7f1266.0","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-Rg69hvjHErwpowy+CkuLZZW5qGXc7bsty2wjBLZj3mYUs16oGy3QpcRN44WAjERdMt2VdlP2nmp8FsfSyHvqXA==","shasum":"ec6aa5561b5a7b748525fe7d9b3cc1c1ca33974b","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.0-canary-2f7f1266.0.tgz","fileCount":103,"unpackedSize":559136,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDOPMplUDapulZWQatlmsjipQQvjXV917/jRcRKJ/cQ3wIgKp55okS8ZOssXujxkU+2/dN8JjybfqfJhpywdH7n9xs="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.0-canary-2f7f1266.0_1687386847779_0.24961629379160777"},"_hasShrinkwrap":false},"2.12.0-canary-6698dc22.0":{"name":"graphql-language-service-server","version":"2.12.0-canary-6698dc22.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.2.0-canary-6698dc22.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"6698dc229275741467fadcfc46a86e66a5d482aa","_id":"graphql-language-service-server@2.12.0-canary-6698dc22.0","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-/x3RFcjC8snMB76g2LWVR34xLiQhkMbhdNr6V165/xXNS0A9rGnEIxEQMgJiMKqtZOjuOZKfS5vwBfl30n7aig==","shasum":"f0dc281f1a0139e2be8e3ed75d4f3a7162550011","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.0-canary-6698dc22.0.tgz","fileCount":103,"unpackedSize":559136,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD8KntrOJklkeTxb1/PKt/JaruV2/qZ7k/7p9HsnR6HIAIgZnGIjGDhBFDBX4agAmviq47c14iVDtqQuDvPk5jNpZg="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.0-canary-6698dc22.0_1687387180495_0.2012965049938218"},"_hasShrinkwrap":false},"2.12.0-canary-0ef186a2.0":{"name":"graphql-language-service-server","version":"2.12.0-canary-0ef186a2.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.2.0-canary-0ef186a2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"0ef186a295b132eb80ba8f97f7f3de0079146278","_id":"graphql-language-service-server@2.12.0-canary-0ef186a2.0","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-IJGEHDHcmLsDn+ET7EQDpORF8eFi94RNpfX5jhCqspmMIBzbu2M0TWWGCg3AAaufBby1bkBkInvRXzHy+LLJjw==","shasum":"a8c0b9e6a84a1d9b5ecb5bbd09f02a7a61f28b3a","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.0-canary-0ef186a2.0.tgz","fileCount":103,"unpackedSize":561287,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFmYGQC1QLSuuCtbYaZ3YerSOkIsyVhNJpqWH6kBzbAXAiBGAq4hTWasFIxSJ+KyA/6vqxqlQUTF41hRfU+A+9YdoQ=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.0-canary-0ef186a2.0_1687393224416_0.0038261071003360403"},"_hasShrinkwrap":false},"2.12.0-canary-8cc6cc6c.0":{"name":"graphql-language-service-server","version":"2.12.0-canary-8cc6cc6c.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.2.0-canary-8cc6cc6c.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"8cc6cc6cb7dac28f7743fd7f507f854ab97b3042","_id":"graphql-language-service-server@2.12.0-canary-8cc6cc6c.0","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-L5GG26RCG0/9KDwckW+87oG/FEALtCF7kEOSdD3VRoohMUyC2+XkPalbW8gXf8wnPFBIXvW6jq7qr8F+aeK4MQ==","shasum":"0c03773c52b0ecb4916ca8a30443dd0c0fbc5da2","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.0-canary-8cc6cc6c.0.tgz","fileCount":103,"unpackedSize":558040,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD29pgT0bq9sNEQo3TqUa5zeOP4oad+5/cDYRp7X7OO1gIgHbElBFYmchisnXgMvGUs29KH1xfF2AX0p3aFdzuU4Jc="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.0-canary-8cc6cc6c.0_1687394077934_0.764102580772348"},"_hasShrinkwrap":false},"2.12.0-canary-df664982.0":{"name":"graphql-language-service-server","version":"2.12.0-canary-df664982.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.2.0-canary-df664982.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"df66498252accd13d16438630896e645f6973c34","_id":"graphql-language-service-server@2.12.0-canary-df664982.0","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-tkbWpBX0TMZrkTNMzTbPL/2KV79qkxcuvZvWQld0XqO5Tb47/8jE3QdjNsifV862SUaMnWsj2pVfmtxq0vkuBw==","shasum":"956d49b5e91d7441fb54c0f5282243b1154da2c3","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.0-canary-df664982.0.tgz","fileCount":103,"unpackedSize":558039,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCmFQxzhBIrztQjbIkFIKbDQPQJGlf+r+KNHtTe9CefxgIgFs+y6IhhgVjV3nOiR1kB32kj2mH7RfUVWUvwrA7CXxM="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.0-canary-df664982.0_1687420079622_0.9723994499763389"},"_hasShrinkwrap":false},"2.12.0-canary-8f7aa55c.0":{"name":"graphql-language-service-server","version":"2.12.0-canary-8f7aa55c.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.2.0-canary-8f7aa55c.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"8f7aa55c11b965e58ff22dcff103da40efbff729","_id":"graphql-language-service-server@2.12.0-canary-8f7aa55c.0","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-Qfa8Tti9XKb3L/Hr+NETe2s90prFxp8gfUpR835cDpmUdHA6VWTHuO3HyjcQKH6WZNTOlNTDBxPeIvrDc4sC2w==","shasum":"667ab46023822c6c4d202a41b0c02a4a1dffc0e3","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.0-canary-8f7aa55c.0.tgz","fileCount":103,"unpackedSize":558039,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDfQTcWE4xVdlF9LWTKYPFJRYRTP/F8kUa4L+JSu3fCCQIhAMjQ92XAzE8VPODbs/D6BYAmS2FOLGciFXdEwPZIaCiP"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.0-canary-8f7aa55c.0_1687420529947_0.7253840760957837"},"_hasShrinkwrap":false},"2.12.0-canary-a8496344.0":{"name":"graphql-language-service-server","version":"2.12.0-canary-a8496344.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/load":"^7.5.3","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"4.3.0","graphql-language-service":"^5.2.0-canary-a8496344.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"a849634429338384a55fb775671b65dab1ba54ef","_id":"graphql-language-service-server@2.12.0-canary-a8496344.0","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-gYM7whIFofrAZNt3yNRGXHJ+mKZphcBySdoH0STHMCjYdY68KO8R7CxqNLsRAYk1DoObboExMaA+WXN2Rx0SqQ==","shasum":"6bef627cbaf1e87ff1bcb1d8d32c2e4aaac60420","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.0-canary-a8496344.0.tgz","fileCount":103,"unpackedSize":557492,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCq29c5S0sKmO7Am+NG8u9KPPHNOtZNZ7PvXcIIHU6sZAIhAIg19NiLs9R0ikYRMiJUG8KUMX755bMinm54OO5lIQrM"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.0-canary-a8496344.0_1687421012184_0.6871291955930252"},"_hasShrinkwrap":false},"2.12.0-canary-b6d81c61.0":{"name":"graphql-language-service-server","version":"2.12.0-canary-b6d81c61.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^5.2.0-canary-b6d81c61.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"b6d81c61b370d3174004cc6fd4b0fefcabeee9a0","_id":"graphql-language-service-server@2.12.0-canary-b6d81c61.0","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-41OghWufQtMB8Gu1B699UujB112r3JoZYguKYeTC8o3YQsnpemuwXI38jpecAJDHZGH7ufjwdMTnJVeCa020UA==","shasum":"6e2991ab5934b9782e1c5a168be0769b81f2222e","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.0-canary-b6d81c61.0.tgz","fileCount":103,"unpackedSize":541165,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCFGxjd4XsVqZ3g3eYGLm4H3kEt1Ze53xamhrrBEguwIgIgAfXjEjlStvM+jLmmk4+ghmMXnvlwXTVZQ7uBiUgLAcI="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.0-canary-b6d81c61.0_1687555015910_0.08541816377146083"},"_hasShrinkwrap":false},"2.12.0-canary-5a3b95d3.0":{"name":"graphql-language-service-server","version":"2.12.0-canary-5a3b95d3.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^5.2.0-canary-5a3b95d3.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"5a3b95d333a048b72b91a2ff805deb4c794eef79","_id":"graphql-language-service-server@2.12.0-canary-5a3b95d3.0","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-qEs9n+UzfiESp8bD6ZzMJM2jpERbbw1PO094vPRUwWhOLo5rQjGmvjWz9oI5+5t4Ve2PqgHr0wsERea5f+TpfQ==","shasum":"eadf526f060c38680b0607d1584c92b8b45973e3","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.0-canary-5a3b95d3.0.tgz","fileCount":103,"unpackedSize":541165,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBpyvslIDKeAKDD4L0uAaAXpFMGH2JdtKrcKmPB/0ynfAiEAw+G4EMgnKke2KQz5HJCvA2k4o2/0eg/VK4McYAHkpP8="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.0-canary-5a3b95d3.0_1687555473438_0.9797589273842668"},"_hasShrinkwrap":false},"2.12.0-canary-0b758ed3.0":{"name":"graphql-language-service-server","version":"2.12.0-canary-0b758ed3.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^5.2.0-canary-0b758ed3.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"0b758ed344bab614dcdb52d1bf9abb8361e2c56a","_id":"graphql-language-service-server@2.12.0-canary-0b758ed3.0","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-MaGZwYVGAItCOyYeCL0J9G476qUGImm5N9VBsu6M/XEABi9hT8cLrwmbAaBO/Vtz39Hab4zENKWJElsoS9AioA==","shasum":"e2c5bf5b56c3a3eda1257efbc4e8d2bd72580dcf","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.0-canary-0b758ed3.0.tgz","fileCount":103,"unpackedSize":541165,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEPCMkGPES8/zcCg+aW92goAU8EKsG+SsCCElb//lWCQAiEAz4AsaNICL5hsxk71Z41ZHyUlgbJa4ggncZUnkuZuC74="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.0-canary-0b758ed3.0_1687557719156_0.009114909382230252"},"_hasShrinkwrap":false},"2.12.0-canary-8d17bd3c.0":{"name":"graphql-language-service-server","version":"2.12.0-canary-8d17bd3c.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^5.2.0-canary-8d17bd3c.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"8d17bd3cb453a5cb652b394eda6f06d66500fe7d","_id":"graphql-language-service-server@2.12.0-canary-8d17bd3c.0","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-RDGs51cpdlzv/61mnp4yvs7rOUVoyZTiTWqXjLagzJUWHVEyr6Id6pVumav6Tv3Xq45Lt1PoBIMdap3J7Mz6hg==","shasum":"9f6c8268dd1545f13499ea0a8e28d20f0bd0d573","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.0-canary-8d17bd3c.0.tgz","fileCount":103,"unpackedSize":541165,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDVxkNUUcZgi6Hbx0/TDyhHzvwSYIUIIyl4HaqfttoWbAiEAr9wte5jIy8mxM0VIiLoVlnKFJAjcbrEO3FXQcd/ywg0="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.0-canary-8d17bd3c.0_1687558541700_0.7244007712447444"},"_hasShrinkwrap":false},"2.12.0-canary-f5992ff0.0":{"name":"graphql-language-service-server","version":"2.12.0-canary-f5992ff0.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^5.2.0-canary-f5992ff0.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"f5992ff0e88b5f163b44cf688c94be55561f55a0","_id":"graphql-language-service-server@2.12.0-canary-f5992ff0.0","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-ZG/LMf4BfehuHnYT5/xK8Gp7ni/lD7rlEJl/tCs+1PdSZieC69pqNpMOWczR6eaJiT3NCrPfmjYzRw3d352RUA==","shasum":"f97c0b8b00221b35903c9e75d8d486a8a8ee2388","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.0-canary-f5992ff0.0.tgz","fileCount":103,"unpackedSize":541165,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBqG4vEMgcSGUMfUkL3Lm1uF5cl2+iLYt6sz65LggEe4AiAJLnKiYUKtJl1kJ9UTjxsxCF+TA0MV8WK38uIpdJg9bg=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.0-canary-f5992ff0.0_1687559377471_0.8226350932155462"},"_hasShrinkwrap":false},"2.12.0-canary-70c9456e.0":{"name":"graphql-language-service-server","version":"2.12.0-canary-70c9456e.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^5.2.0-canary-70c9456e.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"70c9456e1dcafeb05668d29c5349c35f2d0d34c6","_id":"graphql-language-service-server@2.12.0-canary-70c9456e.0","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-A0OaNz4aRLwl8CR5JSGxpgJDu8ld2wVBVW0y/dv/fI85n4S0dl5QF3zIVgmxFQbGT48CWmTk0f/13NjTFLon3g==","shasum":"0c7aacf541d07ff65c9adb2ba3fd5d4de67cfb93","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.0-canary-70c9456e.0.tgz","fileCount":103,"unpackedSize":541350,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBdfAv1sDaSRBiO72HJREroATfh8CjcIg5CLSBoLFQeEAiBj8uX6U6NXJeTHxGFVDXtWgT6jQ/q6SHMb4YI2xO9DCA=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.0-canary-70c9456e.0_1687562994350_0.8974488281004582"},"_hasShrinkwrap":false},"2.12.0-canary-73a4ac55.0":{"name":"graphql-language-service-server","version":"2.12.0-canary-73a4ac55.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^5.2.0-canary-73a4ac55.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"73a4ac55bf454db1f3b837dbd123aab67bb3f6d2","_id":"graphql-language-service-server@2.12.0-canary-73a4ac55.0","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-qwnKEg1Gw42XMHx+9JVpbHWczwEkhTlgfPY1tctB9Z5lrL89xEq1D8P15M0M2W7EJsIuKV8u2/j9Yim/mPHGeQ==","shasum":"102ed25eee5ebfc58813ae62971c6f177403fa4f","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.0-canary-73a4ac55.0.tgz","fileCount":103,"unpackedSize":541350,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICV7upQvcxQYU2bR/H8PKM49DoE89srycG/yu9acEnKdAiEAoTlAwE3Dr/q1SqzGWz3tmnX2/+c+a6n5zBCP/xQaKg0="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.0-canary-73a4ac55.0_1687563004688_0.5577568200562364"},"_hasShrinkwrap":false},"2.12.0-canary-943fcbde.0":{"name":"graphql-language-service-server","version":"2.12.0-canary-943fcbde.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^5.2.0-canary-943fcbde.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"943fcbdec174747ebf39ddaeb6bad1fabca9b95a","_id":"graphql-language-service-server@2.12.0-canary-943fcbde.0","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-NW7h5kjzoayi2ObwdWH5z6LnoLGddH9hFd4SCNls0+8DlL7Htwbgv8+0tXQDNJjnbzuwVUu5u6sZO0h1SaQCNg==","shasum":"9bce6dc3e447ce677dc9aab8d9612ccbdb96d0c7","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.0-canary-943fcbde.0.tgz","fileCount":103,"unpackedSize":541350,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHxl1oU4jY3FVp9zkus05fTv1jaPpMcJf9CMPQr7iL3UAiEAtjzOMwpq+q8sAmsR1btDocFTZymG8KtWKN/phLRHLAM="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.0-canary-943fcbde.0_1687589848419_0.8894936273026732"},"_hasShrinkwrap":false},"2.12.0-canary-a97151b3.0":{"name":"graphql-language-service-server","version":"2.12.0-canary-a97151b3.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^5.2.0-canary-a97151b3.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"a97151b3492e17a9a87407d03559927bd7b2081d","_id":"graphql-language-service-server@2.12.0-canary-a97151b3.0","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-7v63V/SjOhKOH0xhKUyMspU4CAOYzTsxE6bPVAzeT/GLFUh2iiKN+QK1ChKNL5N00fIyF4JBobyYOju40obtkA==","shasum":"52997f5108f195333745338d96101e4c1fdf016e","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.0-canary-a97151b3.0.tgz","fileCount":103,"unpackedSize":541350,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCvdhQ7PFpf4JKTowU8/P6vVPAg0ejD4Wf7rnKTjSXpaAIhALx0dfOwhGVajDzUUzOmYMO9LQz9UXgIsiU5sEoD93g/"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.0-canary-a97151b3.0_1687590143624_0.34207389103206665"},"_hasShrinkwrap":false},"2.12.0-canary-88c53ea4.0":{"name":"graphql-language-service-server","version":"2.12.0-canary-88c53ea4.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^5.2.0-canary-88c53ea4.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"88c53ea426d860502de72d07216c1fda11caa385","_id":"graphql-language-service-server@2.12.0-canary-88c53ea4.0","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-DU4vt78EZjP8elDkkJQZTe7cI8klW3JRPH5dDAxfFIvjV2mY7wWz8slXBp2LFDDXVPr+KpK2shqLBGGNWLLPIQ==","shasum":"233adda8ae32bbd4f2173476e976f8964a51c146","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.0-canary-88c53ea4.0.tgz","fileCount":103,"unpackedSize":541350,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDD4ZLa+BTlLIqr0eb3pbeR8yNH2nlP96JF4BXQoY6DJwIhAIz0D1H0PEXGLkzPJpFFv9tTqE5xCRrH/1lBbfdRTbVI"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.0-canary-88c53ea4.0_1687591515106_0.3632492488616341"},"_hasShrinkwrap":false},"2.11.2":{"name":"graphql-language-service-server","version":"2.11.2","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^5.1.7","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0","cross-fetch":"^3.1.5"},"gitHead":"a3cb7209f992a48b904591dcf076aa3bfbfa1a2c","_id":"graphql-language-service-server@2.11.2","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-oq++JbYDXml2gJkXNXnuNzH+KZeDPKBbrIleEKzqQkWjMTBLAYWpB24tAtAXqkJFB9p0t56SpVsojgGIf7XbRA==","shasum":"7b4c5d2b302ceb2f5ab78d59ef87efb07769ec6f","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.11.2.tgz","fileCount":103,"unpackedSize":541314,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDNeS4pvIZwLQaS5V5iJmydSRDAns/3HOFXAGifUGL92QIgMatQ8r36abVIuka5YajP2RomEWJvER/anToKLgRKEpg="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.11.2_1687592919403_0.5603296407622775"},"_hasShrinkwrap":false},"2.11.3-canary-b538d656.0":{"name":"graphql-language-service-server","version":"2.11.3-canary-b538d656.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^5.1.7","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"b538d6561c9b5e9de3318b94617639bf45fb2ea7","_id":"graphql-language-service-server@2.11.3-canary-b538d656.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-zBknTuAwOeGxhZ48Y5gYPB6xS6IAdB/gLTQCIFtf5mU7A2Ih8RP3bq6YfQfAHlBvw2PStISLeMpBC0Q20oDNsw==","shasum":"79cbd19b125c9593b67a71ff0ff19d7e20fa598f","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.11.3-canary-b538d656.0.tgz","fileCount":103,"unpackedSize":540351,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIF0nSvovbUemt+7b/Ipf9yWKqqbjp8PgfxR+Rd4yak2gAiARR/OAjVIapvJh7u88m0q25iliAhXmcue6FPEr2uKQ2Q=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.11.3-canary-b538d656.0_1688556578514_0.5279610389179406"},"_hasShrinkwrap":false},"3.0.0-canary-5d4865df.0":{"name":"graphql-language-service-server","version":"3.0.0-canary-5d4865df.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^6.0.0-canary-5d4865df.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"5d4865df3c5ddaf2ca3cf9ca3e1b5a5e2aba5e0f","_id":"graphql-language-service-server@3.0.0-canary-5d4865df.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-Mo/Tl+j8Cax8ubOyCff2DC5FxT57tOBEo5soPfqsKbGvmLAW+BG3Y2vBIhQhV1dFjWtGxP9EBDJg6teITdWT0Q==","shasum":"f504791ac5f97f4debd40ef2ddddd1cb6cd5af85","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-3.0.0-canary-5d4865df.0.tgz","fileCount":63,"unpackedSize":347531,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCCieTpxxS/+23Bo4+fGAyOal8S2uqy5nz+yuR39dgTogIgNsHxbUQPdAIaqH1QaW/5ccsrBuTV+N/HRAQPPq4zpuE="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_3.0.0-canary-5d4865df.0_1688573722737_0.6989334340170705"},"_hasShrinkwrap":false},"3.0.0-canary-38c2c299.0":{"name":"graphql-language-service-server","version":"3.0.0-canary-38c2c299.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^6.0.0-canary-38c2c299.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"38c2c299da35dc30b39f90f5d4e40ceb4be9a5d1","_id":"graphql-language-service-server@3.0.0-canary-38c2c299.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-ak7YoAC5JHLDRcnYLNLRp6L1udspnLkEHWJbwKmU9yEFOji1eRATQu2E2p4ij5KgksiT/9XL1Eq+q79KlKb7bQ==","shasum":"03cf9f1673a3f6a28f366a5822911112dfc19799","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-3.0.0-canary-38c2c299.0.tgz","fileCount":63,"unpackedSize":347531,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDHXXqgtCRFoZ275gIdym4hKjI9RRTTDWBZrhWH6wTw5QIgPV9LRhrVIskTHc+FAXL9q501fIwKC+AgYKisMdb8fK8="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_3.0.0-canary-38c2c299.0_1688574393195_0.9322630025082641"},"_hasShrinkwrap":false},"3.0.0-canary-d52fbc57.0":{"name":"graphql-language-service-server","version":"3.0.0-canary-d52fbc57.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^6.0.0-canary-d52fbc57.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"d52fbc579a6172331947f182004a1d7f61a3caf0","_id":"graphql-language-service-server@3.0.0-canary-d52fbc57.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-s/oK/9JoUuFO+id00b9qzl2tFReMmRThM19nSxGJ+BBSeIQXXz5JTzRSj9qi7JV4Ujr84La8d1sHAzcpd/f/JQ==","shasum":"1bef5f0ee9d5e8b81a5390a2126f1f24a5f916b5","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-3.0.0-canary-d52fbc57.0.tgz","fileCount":63,"unpackedSize":347531,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC6fpFxV7vDlRL1UV+SP+JTXUY/XEOt+8XICtF8FSRjPgIhAPBgJYE6hLEpibu2f9BcFJziw1hc9lNsNa56c3oXcKIE"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_3.0.0-canary-d52fbc57.0_1688574494242_0.003418191150514671"},"_hasShrinkwrap":false},"2.11.3-canary-5ea73def.0":{"name":"graphql-language-service-server","version":"2.11.3-canary-5ea73def.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^5.1.7","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"5ea73def60523267df2b2a0b5c72c6263491bcea","_id":"graphql-language-service-server@2.11.3-canary-5ea73def.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-ljNNniVE4WssWypBq3KUcixYCYEoHmELOnsvcRq6R4dHPWkzkZKU/XmifC1Jl6Q0V/XZoxcNlSHGbrdsZpXFpA==","shasum":"8a1ffeb2eda6c9a131c4a7ab05655af2949e0284","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.11.3-canary-5ea73def.0.tgz","fileCount":103,"unpackedSize":540351,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICUb36BTRC6OA5JwLwaJpHK0TW27WIt2fI75OPR3L+aXAiEA+BmABLZkQiUGreMEhiC6NbCdf8l4a8KX8IBzalTU9Tc="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.11.3-canary-5ea73def.0_1688574517864_0.18431597752756224"},"_hasShrinkwrap":false},"2.11.3-canary-8b7c69cb.0":{"name":"graphql-language-service-server","version":"2.11.3-canary-8b7c69cb.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^5.1.7","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"8b7c69cb11dc51bf47a25c56c852a1e4804f40f9","_id":"graphql-language-service-server@2.11.3-canary-8b7c69cb.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-cZMX56D+SLVmfAcHwGNO8T+UfcHPp5PJBGWU4P2ERxjYrTYFNt1j9iivDF95nDmy0rXZmJZ6QFO22wB/jVh7Hg==","shasum":"564b805663c0c315260e87ec913142696aed492c","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.11.3-canary-8b7c69cb.0.tgz","fileCount":103,"unpackedSize":540351,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDvY87SpiU71uds4VU1/zt/WzZ8M7TlJpwN5638xXdQ6gIgWXWcoWywvcPP+FujvOav7uqsAIgcXnUbKLipKYwO7W0="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.11.3-canary-8b7c69cb.0_1688576878043_0.7900765341310645"},"_hasShrinkwrap":false},"3.0.0-canary-6de7e53f.0":{"name":"graphql-language-service-server","version":"3.0.0-canary-6de7e53f.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.21.2","@babel/types":"^7.21.2","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^6.0.0-canary-6de7e53f.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"6de7e53f06aa90c50eafb9e8ff225ff0e2c1e2e7","_id":"graphql-language-service-server@3.0.0-canary-6de7e53f.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-SYHoOxBiY94XbHXxVNjDtG8sg+jfh/d0WTxLwI2FAoxntNRKggeMubGjzFF1hG7u8yJCEei67La1uswPcz3r3Q==","shasum":"97ae7e0dfb2480747e53ed4f0bed5307981546b5","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-3.0.0-canary-6de7e53f.0.tgz","fileCount":63,"unpackedSize":347531,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDUHMdLJNrdG/B61qJ6MpgohWk6AfOGGlhRj75VMdCXXQIhAOSF/OZMVXHN7HocBE7LtmduKIvjxosMsrLXfRg4t0Y+"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_3.0.0-canary-6de7e53f.0_1688578361689_0.23451095976562075"},"_hasShrinkwrap":false},"3.0.0-canary-d4eae891.0":{"name":"graphql-language-service-server","version":"3.0.0-canary-d4eae891.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^6.0.0-canary-d4eae891.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"d4eae8917d951ee885749ee1cc8c2c73324ddb43","_id":"graphql-language-service-server@3.0.0-canary-d4eae891.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-doZQcVs+LsCeEsX+lrihreINx9Kf4IjkKWHDXvrbAdQUv8lY4xjmgKUFBolOqVl2sSSamQjtNmC8dcgPuU2xYg==","shasum":"8efd4895fdcc8ac51c9b71e887b0f7990f2d8dbe","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-3.0.0-canary-d4eae891.0.tgz","fileCount":63,"unpackedSize":347663,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHr+X7WSymIYaiQuI+En7xlRkuLEf+p8+3FCWIaWK0vtAiEAqfo36EqIEyO34Lz8DKFWkqHooZsTpSF/t3NCH3sOa60="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_3.0.0-canary-d4eae891.0_1688586447396_0.012505204685827165"},"_hasShrinkwrap":false},"3.0.0-canary-a6d20235.0":{"name":"graphql-language-service-server","version":"3.0.0-canary-a6d20235.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^6.0.0-canary-a6d20235.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"a6d2023568a06ead22a8d277f2b1c4f35032f236","_id":"graphql-language-service-server@3.0.0-canary-a6d20235.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-OjMOUTYUMCAS6wRvJ5HFXPhxvDC6CcAg8JIr7oQErh9hLt9LOkmq7G5FzZmAVd5S8HeQRcQVkmbryVgpZpgjgQ==","shasum":"77fcf4134d28ea5979645a83707a2e0f216b9501","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-3.0.0-canary-a6d20235.0.tgz","fileCount":63,"unpackedSize":347663,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIH5e2+92xSYq0hFfRW5KCkcSmFDBJvhNRvDN7AvVjfPoAiAOhmfUUjklgL0NFM0rcU9nBjb74FqWguo7RdMcdqgu0g=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_3.0.0-canary-a6d20235.0_1688631714218_0.12371629574299714"},"_hasShrinkwrap":false},"3.0.0-canary-6bb88229.0":{"name":"graphql-language-service-server","version":"3.0.0-canary-6bb88229.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^6.0.0-canary-6bb88229.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"6bb88229a481a970376d0096c5b866539aacee40","_id":"graphql-language-service-server@3.0.0-canary-6bb88229.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-sRHqmdiYrM3yfoWtJkU7rdlooL/eqbSFM1MnEXJoI90UDn57t5bQNGT9h3C1qyMvuW2B467XAjj/uatMrjXsdg==","shasum":"1be5cee392bdbf54000c96010476afef1189d108","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-3.0.0-canary-6bb88229.0.tgz","fileCount":63,"unpackedSize":347663,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIG+Pf4xYnyHlPkRasKc2S0JeRuvrSaxE2UXYEY9iU+RfAiBXVjdMKiLTW71mc/hteCgjsQQp3gRYCjnQK1yge9wMtg=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_3.0.0-canary-6bb88229.0_1688633624925_0.35559065737388895"},"_hasShrinkwrap":false},"3.0.0-canary-351ba549.0":{"name":"graphql-language-service-server","version":"3.0.0-canary-351ba549.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^6.0.0-canary-351ba549.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"351ba549284da5f1e67672c1411c4de3e4dcdbe5","_id":"graphql-language-service-server@3.0.0-canary-351ba549.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-La0tSnq7gtuwM6EV8gmU95FkH/63/0MnjNpCePhwJhveASLankntC8lfB0PAMFJLpM2Ydrm91fEPd8sKaYE1vg==","shasum":"221066ea5541e36f6441950732387e114e31a7c6","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-3.0.0-canary-351ba549.0.tgz","fileCount":63,"unpackedSize":347663,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDkci4PuZaAbcSDlMqNK3d3Uham08fofsExeM7BjaEvwQIhAOmN5sB9sxJDeYF0S4oALhpDijwz242X12nc0wejMOD8"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_3.0.0-canary-351ba549.0_1688634015732_0.8230506653432801"},"_hasShrinkwrap":false},"3.0.0-canary-a08e9aea.0":{"name":"graphql-language-service-server","version":"3.0.0-canary-a08e9aea.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"type":"module","module":"dist/index.js","types":"dist/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^6.0.0-canary-a08e9aea.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"a08e9aea25833dfa3d1631ed8335006b7bfc8bd3","_id":"graphql-language-service-server@3.0.0-canary-a08e9aea.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-4iQ4Tm4DUE4uvKgw4ZJ1GvUrTpZbuRFmx5qshZ4myFFwNBLGEBRkZEU3skkzCjRlRsH1XSxwWKCVU1ZQ/vM4eA==","shasum":"8aefee79319286e3e50c92bfb815e60b8b1afdb6","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-3.0.0-canary-a08e9aea.0.tgz","fileCount":63,"unpackedSize":347672,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIAdZ00z3lqVgXQ2CXAEUGdCbzT18BKOr3k14vfTntzXlAiBtdFuxMGG7stTVf9KbMqt+oO/vLyq1o/C4lso3fE/U9Q=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_3.0.0-canary-a08e9aea.0_1688636120576_0.5728333326137227"},"_hasShrinkwrap":false},"3.0.0-canary-f0f5afb3.0":{"name":"graphql-language-service-server","version":"3.0.0-canary-f0f5afb3.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"module":"dist/index.js","types":"dist/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^6.0.0-canary-f0f5afb3.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"f0f5afb31deadf5f0e34b2c99ffa62bee5629bc8","_id":"graphql-language-service-server@3.0.0-canary-f0f5afb3.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-KYQ2KJtWTQAcmBrn3qmo4Q7vpzlCVLxAFjdWSh9UW7bAiB0c3y0MBYbrQKlCiKCVWgw5o7dXHL/O53EmactkGQ==","shasum":"243c1b57aaeae61cce0f8f683bc67ca1672e6142","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-3.0.0-canary-f0f5afb3.0.tgz","fileCount":63,"unpackedSize":347652,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDybC1RGXUgSfUJvzUQrFWBmeIn9fJGdg/VoHJ3QQ2cZwIgfmM6SgQ5M6xK1U6r5f8AfI+qVZiVIdX1ZtcRRyD1K6I="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_3.0.0-canary-f0f5afb3.0_1688636518252_0.7278379807637851"},"_hasShrinkwrap":false},"3.0.0-canary-b5674a4f.0":{"name":"graphql-language-service-server","version":"3.0.0-canary-b5674a4f.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"module":"dist/index.js","types":"dist/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^6.0.0-canary-b5674a4f.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"b5674a4f1c86fbbe5924441505e51a9e7268e4cb","_id":"graphql-language-service-server@3.0.0-canary-b5674a4f.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-wG3OPbu1xCNy189TIdzKFZUjWEJMrpL0wtIBgHGDnbmvRIPjS4S73gUi7KktScsDLGLHdWKxOFxAsrJ/JdYhzQ==","shasum":"db41a345039f70de898896705fc0f9cf69626c40","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-3.0.0-canary-b5674a4f.0.tgz","fileCount":63,"unpackedSize":347652,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDGIRTEvfY+kFtVFJr8sKNzE0wu+qf8orVq+4PtZ3UZjQIhAPY/eUc4jj5e5I8eE7zpm2iIdU9XZ/83wD1axVxZklrP"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_3.0.0-canary-b5674a4f.0_1688647256214_0.8675409358881934"},"_hasShrinkwrap":false},"3.0.0-canary-344df134.0":{"name":"graphql-language-service-server","version":"3.0.0-canary-344df134.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"engines":{"node":">=16"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"module":"dist/index.js","types":"dist/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^6.0.0-canary-344df134.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"344df134cfa4d920adc85a616290aab9206385f8","_id":"graphql-language-service-server@3.0.0-canary-344df134.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-4ZYqfUiFoCJix8572hykLCALkQfVGxaSOxYkJZLww0UWirTeGzWxnCLNxdQVdn7iZcUXRJo5ddNEUEzgbNc8+g==","shasum":"6aa432b8311dbd28a8ff2ddfbe0b0a8f72eb322a","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-3.0.0-canary-344df134.0.tgz","fileCount":63,"unpackedSize":347691,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICALzEhpQX5aR9axACrfgauK8gBoz5xdfP3D4csWhWneAiEA784Ic6nWSf6pw4o+aAkSDOP0t+QRCJg0/ihreAN3oV0="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_3.0.0-canary-344df134.0_1688729118476_0.7752742017683572"},"_hasShrinkwrap":false},"3.0.0-canary-f648417e.0":{"name":"graphql-language-service-server","version":"3.0.0-canary-f648417e.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"engines":{"node":">=16"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"module":"dist/index.js","types":"dist/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^6.0.0-canary-f648417e.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"f648417e7d2a46b0134278b27c413b97289de996","_id":"graphql-language-service-server@3.0.0-canary-f648417e.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-hbn4EtDH0HWfHFpH/yI8ZlWv3JF+1GRgYH+3DEVqIw+YVOIcA0z07ktByleHqiKzGdFMWRDbEcXp8aM3qMOngg==","shasum":"93d9fc584aed5eae51ee8542d4c2952d114fa246","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-3.0.0-canary-f648417e.0.tgz","fileCount":43,"unpackedSize":202959,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCtdL71sFjW/RzXRDq5Jg+kHpTBfv7uzIoMMKbwe17BwAIgLF9nvxdp13fzJGBdU+CGmaTQYj3uHKBmG2lJ4MFTFs4="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_3.0.0-canary-f648417e.0_1688736841175_0.18976156289091883"},"_hasShrinkwrap":false},"3.0.0-canary-30653157.0":{"name":"graphql-language-service-server","version":"3.0.0-canary-30653157.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"engines":{"node":">=16"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"module":"dist/index.js","types":"dist/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^6.0.0-canary-30653157.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"30653157556e15982b263a9c5aa929d5a5c83c56","_id":"graphql-language-service-server@3.0.0-canary-30653157.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-iQZ2MzqmTSjaWD6H/Jw5fNwL9iaaiFunl24E+EoGEyX58LALADSf5SMQlP7MDmKpanynd1CqttiULy07zoqdFw==","shasum":"6fd8ba729c21b7032d1309b993dd1f5d0e371ba5","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-3.0.0-canary-30653157.0.tgz","fileCount":43,"unpackedSize":202959,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD36MgBO3NISOVRRVlcZB3D4qhJm5vY3UnNw4F85c73AwIgXRvzb8LaUXF3WBhTvELKsoklpNOMIROXYd1FnUDgJ+0="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_3.0.0-canary-30653157.0_1688799186410_0.8059053386662507"},"_hasShrinkwrap":false},"3.0.0-canary-3e72a1f9.0":{"name":"graphql-language-service-server","version":"3.0.0-canary-3e72a1f9.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"engines":{"node":">=16"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"module":"dist/index.js","types":"dist/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^6.0.0-canary-3e72a1f9.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"3e72a1f96a33e7f78de033f758642baae3d962b2","_id":"graphql-language-service-server@3.0.0-canary-3e72a1f9.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-1dokUDX63u/7/qv+x/3C9nH9+HJfjHKu+s+PnV0Sf0Whr39OMAXYfZyTFodz4TXwv58hGMU2FUgEhDvjY9q1ig==","shasum":"34789e611b0da1e344a0c1b47d40279f6aa4a670","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-3.0.0-canary-3e72a1f9.0.tgz","fileCount":43,"unpackedSize":202959,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAkPPFBVbbkZovU1WwbGZCIjDidgSS8Hz4Ie+LMcsLFBAiEA7mqxdFU3jeaeVwViBGXM2mXOHyyBqWA1/nqHL53aaXk="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_3.0.0-canary-3e72a1f9.0_1688799833391_0.6892933796495013"},"_hasShrinkwrap":false},"3.0.0-canary-d86e51b8.0":{"name":"graphql-language-service-server","version":"3.0.0-canary-d86e51b8.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"engines":{"node":">=16"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"module":"dist/index.js","types":"dist/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^6.0.0-canary-d86e51b8.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"d86e51b89a89ee7b80d3d47446c0dc4277783f5a","_id":"graphql-language-service-server@3.0.0-canary-d86e51b8.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-7yRb7cPx417zTjlZsuV7Oo0LJPSjD1Hm411bMvgelGNGrMc6VtCsvKQxKqCZkvahQlYDBEJf8Vy7m3KLvUavbQ==","shasum":"4cfc3e89c8b3d3559cabad6f5f295e8677bb9c73","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-3.0.0-canary-d86e51b8.0.tgz","fileCount":43,"unpackedSize":202959,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIELiTBX84pPS75Eym44RPD33WrPaxlLsiHu0vwrGvl1/AiEA6Ebhd1tBYD6jkbAaWymj+/vTGesP211n5JCxOOAdXtY="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_3.0.0-canary-d86e51b8.0_1688800286577_0.0017835495762223985"},"_hasShrinkwrap":false},"3.0.0-canary-d38d8126.0":{"name":"graphql-language-service-server","version":"3.0.0-canary-d38d8126.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"engines":{"node":">=16"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"module":"dist/index.js","types":"dist/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^6.0.0-canary-d38d8126.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"d38d81267289ca6da3c97ced3390231d67928db1","_id":"graphql-language-service-server@3.0.0-canary-d38d8126.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-qDHreuw0KmP6OTRarlSbBs+Qq/D644wwxzUHilhRtjXs5mNYtDSyxbp0vMRN5qd9aBbgQqX9qfPTuzQwGsGZgQ==","shasum":"e8fb2ec8a22f9ff5e4179bd7cec9e1e24a725d0e","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-3.0.0-canary-d38d8126.0.tgz","fileCount":43,"unpackedSize":202959,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDBBhaO4FJzeM8MKHQTJrnLGGfCuvxeQwttP4V7rdNPhAiEAvpayhc45LLTY/35cFa7I6tueL0sqZiOuxILk7vUty6E="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_3.0.0-canary-d38d8126.0_1688806769185_0.3628027246688741"},"_hasShrinkwrap":false},"3.0.0-canary-6610f112.0":{"name":"graphql-language-service-server","version":"3.0.0-canary-6610f112.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"engines":{"node":">=16"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"module":"dist/index.js","types":"dist/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^6.0.0-canary-6610f112.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"6610f112b656d44b4356c98934dbfcbce749ef65","_id":"graphql-language-service-server@3.0.0-canary-6610f112.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-4yTSpmAU577F3iw7Ch5Z3UahwyWhhtzk8WFbIxcAt7VTVkhKDEZkPoArVI41aeaca6aNVrjdgwE+K25l04QfFw==","shasum":"b46458752a54bb3e961302862f0d1c41baa8d0ed","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-3.0.0-canary-6610f112.0.tgz","fileCount":43,"unpackedSize":202959,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDrRN/ejSUdcgjKdqilSOePeaVllbWNHemKats+OR/SXQIgaXpqg7wAiA/cKBqIg3RRJlZM7edJmNuNDsMOMkFu4SM="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_3.0.0-canary-6610f112.0_1688806903256_0.35689030179456904"},"_hasShrinkwrap":false},"3.0.0-canary-dfb20ee6.0":{"name":"graphql-language-service-server","version":"3.0.0-canary-dfb20ee6.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"engines":{"node":">=16"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"module":"dist/index.js","types":"dist/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^6.0.0-canary-dfb20ee6.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"dfb20ee65259a4f4140ea90403487503cbadbdda","_id":"graphql-language-service-server@3.0.0-canary-dfb20ee6.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-rmjBj/tsdko+kVRT0h0VaWNddZQw6wA4aoWh0UC/MJ508VTeBxvcv7u8rN8m9Su3yQU5A/gBTeOPUifbv+YA2g==","shasum":"d8ad911f4ab3ace0fc3fb4fbc76922f0005e71db","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-3.0.0-canary-dfb20ee6.0.tgz","fileCount":43,"unpackedSize":202959,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD3W7keI5y3ErveDQKAj+pFti89eqvb6kFbTctV7uDgGwIhAKGDBfcXTjvJC0psxSY7CfwX4qMDM/TdqmoI9aq7VIHp"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_3.0.0-canary-dfb20ee6.0_1688807325908_0.9412644646520381"},"_hasShrinkwrap":false},"3.0.0-canary-a9e38be1.0":{"name":"graphql-language-service-server","version":"3.0.0-canary-a9e38be1.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"engines":{"node":">=16"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"module":"dist/index.js","types":"dist/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^6.0.0-canary-a9e38be1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"a9e38be1efd330cd902f75232352644a68bc1fa7","_id":"graphql-language-service-server@3.0.0-canary-a9e38be1.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-5WQQ4GyS8gWtbPbd3ZBdyCWPpGrWa7Z03j6yRd+xTr5T39hMWc3TRAhE4P36kAq/qFe1zNvsW6xnqKJVR11hrA==","shasum":"70fe5d28b9f918e51085203f9d34072044c27b75","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-3.0.0-canary-a9e38be1.0.tgz","fileCount":43,"unpackedSize":202959,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHDYlhBXxoCLaI8uLFIjtc/Qgy6aHe8tbKGiAiL82MnMAiAgK+b1VqUGOjB2Tu4lE83QSIDQnddYFtNn0CjdST0O6w=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_3.0.0-canary-a9e38be1.0_1688808599952_0.21811945893299955"},"_hasShrinkwrap":false},"3.0.0-canary-f5830f58.0":{"name":"graphql-language-service-server","version":"3.0.0-canary-f5830f58.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"engines":{"node":">=16"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"module":"dist/index.js","types":"dist/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^6.0.0-canary-f5830f58.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"f5830f58539a701d0565d92c31ad719218fc61bd","_id":"graphql-language-service-server@3.0.0-canary-f5830f58.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-u5AGRtQi10+q8b+8wOsdyvocBExdqEDR9zWG8C/EDaMVUqQU6vefJU5P+TeH0AlB9mULU35K2qizAK2tz7s30w==","shasum":"32bd39e0c3a2b5aea0f22525ebe8f1986af41ceb","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-3.0.0-canary-f5830f58.0.tgz","fileCount":43,"unpackedSize":202959,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDF+mIc2SR5AHryG6TqJk5/ms2ipehqy61WMoG2zJY1YAIgcX+BIkK17Kyh/LDoFfTVKnoZjTcdFnucZ2xqX7lxsWc="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_3.0.0-canary-f5830f58.0_1688808939471_0.5646028011816082"},"_hasShrinkwrap":false},"3.0.0-canary-cd4cdaba.0":{"name":"graphql-language-service-server","version":"3.0.0-canary-cd4cdaba.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"engines":{"node":">=16"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"module":"dist/index.js","types":"dist/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^6.0.0-canary-cd4cdaba.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"cd4cdaba812d479e746f8f0e9aad8337938b3e36","_id":"graphql-language-service-server@3.0.0-canary-cd4cdaba.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-HNAs/wcwdxeVn/R1vGduYjM9rcToFNhRFh1w+sXOvh9zHSC968bHcC/fklrATpUrgCKLpvbAfGOfpTgVmrSIjg==","shasum":"08ef10e65f95d7c58bad72c6f23858130d947be9","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-3.0.0-canary-cd4cdaba.0.tgz","fileCount":43,"unpackedSize":202959,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDDRNzmr4ggK4oI5PoDxPy4UXFBCX0XIwLNq3XwjIYQjwIgJs1dBNZ/7meBwaXWrUIERCCviJ/2NmrtXqVHoAAUWn4="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_3.0.0-canary-cd4cdaba.0_1688809906838_0.49154075361664473"},"_hasShrinkwrap":false},"3.0.0-canary-298f53ab.0":{"name":"graphql-language-service-server","version":"3.0.0-canary-298f53ab.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"engines":{"node":">=16"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"module":"dist/index.js","types":"dist/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^6.0.0-canary-298f53ab.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"298f53ab733996737664006796c23de64584efc0","_id":"graphql-language-service-server@3.0.0-canary-298f53ab.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-fFA112LwgZp1yzQPGniXqSTgdP2l8E9K28Xgrgtvk1IuYAL5+OEhdkyLxu79Xuiiyy2AQ/BTj/vXb/bL++uMlQ==","shasum":"0649dd568b0681c51f3bc1cb1c4b0e97c67c00af","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-3.0.0-canary-298f53ab.0.tgz","fileCount":43,"unpackedSize":202959,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDT01CuBUHv4jC8CL6rILeRtsgXoOnNVuBR+lE9H3jZwQIgFlAL2vo73fkGLMShbPfk0BHHgcco8H/Q3IdvC+UZElM="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_3.0.0-canary-298f53ab.0_1688813654328_0.2846344901966815"},"_hasShrinkwrap":false},"3.0.0-canary-2b03fdd0.0":{"name":"graphql-language-service-server","version":"3.0.0-canary-2b03fdd0.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"engines":{"node":">=16"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"module":"dist/index.js","types":"dist/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^6.0.0-canary-2b03fdd0.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"2b03fdd0594ed1df3e2d168f0ac9167959a69ba2","_id":"graphql-language-service-server@3.0.0-canary-2b03fdd0.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-EhXF4q2iMue18mbUhMzqb4pVXBgqU5INbZMRySvEoKLYcmkv1aME0GyJBmWVgfSTblhCd0UexAIjy+JrtXULuA==","shasum":"e306f1b9e8327e01b4bbfc40b7c31a403b83c9bf","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-3.0.0-canary-2b03fdd0.0.tgz","fileCount":43,"unpackedSize":202959,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBB2fvp144SXEv0VFWu1KBGZeomw3M39ufhKfl/9AsTeAiBgDcyl1luJQ01sBbyGV2bSI8ahEqCKjME7RICwGUc+eA=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_3.0.0-canary-2b03fdd0.0_1688911065591_0.7522240033218555"},"_hasShrinkwrap":false},"3.0.0-canary-de420cd7.0":{"name":"graphql-language-service-server","version":"3.0.0-canary-de420cd7.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"engines":{"node":">=16"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"module":"dist/index.js","types":"dist/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^6.0.0-canary-de420cd7.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"de420cd7cae797a32418a4a5410fcb6d2d39cf24","_id":"graphql-language-service-server@3.0.0-canary-de420cd7.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-EAFOH0hMQZmgsmmBGACSRtO6UQ8fnAILRkSpbNpEBdZFUd+cGuKKYs6P11MMVFjZMkenIeux4klzLoU5XXBHew==","shasum":"09b223a75d30f71a4890fa753d47817ca9f42e94","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-3.0.0-canary-de420cd7.0.tgz","fileCount":43,"unpackedSize":202959,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD5ShJtWoj5BKLBlhVFRlwAejwaUTM7pkhiyb5Wwp5Q2wIgGJSHZy/DUy4n2jFTNPCKAEF217hk3Mo0lJypW7Wt6vI="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_3.0.0-canary-de420cd7.0_1688912912037_0.22028940787496865"},"_hasShrinkwrap":false},"3.0.0-canary-9eb9e2fb.0":{"name":"graphql-language-service-server","version":"3.0.0-canary-9eb9e2fb.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"engines":{"node":">=16"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"module":"dist/index.js","types":"dist/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^6.0.0-canary-9eb9e2fb.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"9eb9e2fbe2a7310e6313843f4d6586a4ee16a5b4","_id":"graphql-language-service-server@3.0.0-canary-9eb9e2fb.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-Vw5uLBA9Cqf4n/n9dS7RL1opcgouT0tQ9N7Jw9OA5FS5nO/aqUSML28iTtTAoIDmC4fBM+ru8OP0oDbjlJh9fw==","shasum":"76dc26024de382572ca3845864f2077dc878e3e7","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-3.0.0-canary-9eb9e2fb.0.tgz","fileCount":43,"unpackedSize":202959,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFW0vd6tuUUYBuxMAuwn8an5V6WBGC8cT18qg8gs7cNDAiAM4SzWNccOVOXLraeF/RJSDkALKGfQr9pQrc0q0OpZ4A=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_3.0.0-canary-9eb9e2fb.0_1688913242836_0.7581494004855929"},"_hasShrinkwrap":false},"3.0.0-canary-e0e2c15a.0":{"name":"graphql-language-service-server","version":"3.0.0-canary-e0e2c15a.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"engines":{"node":">=16"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"module":"dist/index.js","types":"dist/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^6.0.0-canary-e0e2c15a.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"e0e2c15af29ed9666b38049c20e792341506d89e","_id":"graphql-language-service-server@3.0.0-canary-e0e2c15a.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-CzhCtdHa6I9npGdDXsTU2THaKKlOd5bjR4+GShqAZPOzhPAltDDod6k6aKDrbU4P2X1G6fYiMyzZZlffP+J/xQ==","shasum":"bad0c8d98f25b6db7971800d9ca11321f8194298","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-3.0.0-canary-e0e2c15a.0.tgz","fileCount":43,"unpackedSize":202959,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFfiXWoTIAjhjojCNCh34wCAbWBkWFivucf2WT1NuFLVAiEA3G1U8pWpb/qWvPrP379Cb6Yip7690wNskQ9HUbYJ0Dg="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_3.0.0-canary-e0e2c15a.0_1688913292058_0.07903816133881114"},"_hasShrinkwrap":false},"3.0.0-canary-6ba9ba38.0":{"name":"graphql-language-service-server","version":"3.0.0-canary-6ba9ba38.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"engines":{"node":">=16"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"module":"dist/index.js","types":"dist/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^6.0.0-canary-6ba9ba38.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"6ba9ba38bd2b4f5fab452532e01f2c47b388a040","_id":"graphql-language-service-server@3.0.0-canary-6ba9ba38.0","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-rzlugU9gbaTO76BFNOcnnno1c5J3qFvyBKfkp5M5lXRZ5aNo+OlY4gmkiSr4OzkqaggJQqPJmMkNsZnngtdvvA==","shasum":"b358c4a1027b58296562b90a89e6360af788a72a","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-3.0.0-canary-6ba9ba38.0.tgz","fileCount":43,"unpackedSize":202959,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD4r6q5/g2ZAXVQ+4PRv7ArzEoHcg+zHksFx1Bbf/BaqgIgfspg5UiwhMpbM6gwu2Fmcc7uCGorZA5EiF+Yr/On/cs="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_3.0.0-canary-6ba9ba38.0_1689002101388_0.9876075847695829"},"_hasShrinkwrap":false},"2.11.3":{"name":"graphql-language-service-server","version":"2.11.3","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","dotenv":"8.2.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^5.1.7","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.16","svelte":"^4.0.0","cosmiconfig-toml-loader":"^1.0.0"},"devDependencies":{"@types/mkdirp":"^1.0.1","@types/glob":"^8.1.0","cross-env":"^7.0.2","graphql":"^16.4.0"},"gitHead":"b31bf660252ad61106243872081dea65b8c1ab82","_id":"graphql-language-service-server@2.11.3","_nodeVersion":"16.20.1","_npmVersion":"8.19.4","dist":{"integrity":"sha512-pkH29NNjbus/lmlzGW5SOlL6iVvtj46ImG+UgXdv8uOLfv6wQHOX6aOFeCx7NpGVlCZYDxyPp220NQIyO5RucA==","shasum":"c2ab70a7da4e0b1f3dd346ac8b0f97c3a5913655","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.11.3.tgz","fileCount":103,"unpackedSize":540333,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIH9ZqxKh+4lRdH/w4bxpHVB/P6lVkGqnsTjE3+yNRWAaAiAiDVt2rFPBnh7LwMx6M40ABzimT+K+o0bvuu+3CLDQTg=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.11.3_1689081265395_0.7368897446291374"},"_hasShrinkwrap":false},"2.11.4":{"name":"graphql-language-service-server","version":"2.11.4","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","svelte":"^4.0.0","svelte2tsx":"^0.6.16","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0"},"gitHead":"9e421ad3e0015e0cdc5225e96158c52901629da0","_id":"graphql-language-service-server@2.11.4","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-6MeMjIUPc7196jNKDeyczjW5ZSTdT4JoXDm+oImmG7FJl15HuiveXMVmfmwZ+FOu1OtZX2NFDwLFui5Ft+dTag==","shasum":"7e9fa056fde16312c5998b9c07ab092f6a5033d6","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.11.4.tgz","fileCount":103,"unpackedSize":540334,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCMBvp8UPxJbnt6mbTIkWvdyMGvTARJ2ImU8LCO0dXeXAIhAKAwWKQQD/vrut/CqaP6nX38efb+UKiYzmVcEStYUmuR"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.11.4_1694983347695_0.8820928355931748"},"_hasShrinkwrap":false},"2.11.5":{"name":"graphql-language-service-server","version":"2.11.5","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","svelte":"^4.0.0","svelte2tsx":"^0.6.16","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0"},"gitHead":"6d364126aeff761d2bff6db53b6431a181269029","_id":"graphql-language-service-server@2.11.5","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-qDGS0h6t0RyTdpV0lqSrMcB1IXeQK4NhkrjYeltTJhRCnqmXXYeF0QzOGx//EizQaXphbha9+vO2xviYhOTamA==","shasum":"50cc1a6b4da1f861da38e493873b676103669dc5","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.11.5.tgz","fileCount":103,"unpackedSize":540513,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFIPlNesSOK/aWGqq4uUJQM0YD65m6tlCxgPytDFamp2AiACP7+X85gAF6ne21wyHtMJNTytYWcwGw21IMGvMfedRg=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.11.5_1695762989420_0.5986010175832652"},"_hasShrinkwrap":false},"2.11.6":{"name":"graphql-language-service-server","version":"2.11.6","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","svelte":"^4.0.0","svelte2tsx":"^0.6.16","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.1","vscode-uri":"^3.0.2"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0"},"gitHead":"7daa163978afbb3c8d110123552e029bd682ec24","_id":"graphql-language-service-server@2.11.6","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-9r3N8ulZJex+Rm55SvfJxHxCoPOZlvaKUr7Tn8BDS+RxgyaerVJ67+nT/fl90oKb7k+4uEb205AUax/JWC+NWQ==","shasum":"67360c37162235e2251c2bcecb85c1678871a136","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.11.6.tgz","fileCount":103,"unpackedSize":541617,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD8Er9ag52JIuJDBE+VRfXvni2xGiujZK0Zv/6/hvpeEQIgFLcO9irPfrY5dnc6S1h49WDGnYhaKqGqIojFiTSHu5U="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.11.6_1700487215692_0.2739848946359793"},"_hasShrinkwrap":false},"2.11.7-canary-36f0bac1.0":{"name":"graphql-language-service-server","version":"2.11.7-canary-36f0bac1.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.22.6","@babel/types":"^7.22.5","@graphql-tools/code-file-loader":"8.0.1","@vue/compiler-sfc":"^3.2.41","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.2","graphql-language-service":"^5.2.1-canary-36f0bac1.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.19","svelte":"^4.1.1","source-map-js":"1.0.2"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.4.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"36f0bac135e3dc5d43a9c7df141319b343f894cc","_id":"graphql-language-service-server@2.11.7-canary-36f0bac1.0","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-r3Q8b6GDyroPNeuECHxa5Mnrz27uV86BtinBynSeYbPgDrRnRbY/Wg5qmyGBZXj6MEb89tyMGlKD9wzJVu2oCw==","shasum":"3bfaca66719fbc87edd5686733ba1519f0b3f1d0","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.11.7-canary-36f0bac1.0.tgz","fileCount":103,"unpackedSize":551177,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFWO+XYLeyffjh7CvIrc7U+4465DkQxLPJzEtpF8vWGXAiBZprzTEUMWSNnqRNXg56VCGLTmqiAmnYu5SiMXTj875Q=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.11.7-canary-36f0bac1.0_1704583087884_0.8917835595551145"},"_hasShrinkwrap":false},"2.11.7-canary-be0f874f.0":{"name":"graphql-language-service-server","version":"2.11.7-canary-be0f874f.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.27","svelte":"^4.1.1","source-map-js":"1.0.2"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.8.1"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"be0f874f74de97b305bfae1324669e70dbae78f6","_id":"graphql-language-service-server@2.11.7-canary-be0f874f.0","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-LD14BEMCMJVwiLxY11X0WCftRrtS7guxmbwBYC4dXSooUQYmZt/2iQcdnqAcoU5wZiZ6w9oJU3yUeqs4Ig8dHQ==","shasum":"e62bd76e5629902a6d273078b0b6c10a4831ceea","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.11.7-canary-be0f874f.0.tgz","fileCount":148,"unpackedSize":574023,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDmauVyFcPtHNQJHXEpfzpYOlZUq+NOrO+jzdMuHWOSEwIgJYpzIRtB/kMOOiPYyUI3Ew8D85uGOgCtZLfytbPN2iw="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.11.7-canary-be0f874f.0_1704674110666_0.6373438631602668"},"_hasShrinkwrap":false},"2.11.7":{"name":"graphql-language-service-server","version":"2.11.7","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"dependencies":{"@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.27","svelte":"^4.1.1","source-map-js":"1.0.2"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.8.1"},"gitHead":"b8268e46ac9a0bcd3a9d6030be2b4649d7d35d7c","_id":"graphql-language-service-server@2.11.7","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-UICeNICFqGzuF/Y11IrcqvyeB3HzyY+kh7t5M8CqDdnq6kzPm5XXCKV4H7YzL78CsL/X0Im1+sXFBFffGHgN5Q==","shasum":"338dc2284e7ff8d27834db8ab46b417b05850895","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.11.7.tgz","fileCount":148,"unpackedSize":574005,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBn7VqivsYyQqLUFv9SUZpz7y9M1unSD1yJKeTIeM6iQAiEAnkGO1ZSFvhWWehThzqNlWGubJudploCFfoE/ayyRVKM="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.11.7_1704911788242_0.24422192531900877"},"_hasShrinkwrap":false},"2.11.8-canary-43444e74.0":{"name":"graphql-language-service-server","version":"2.11.8-canary-43444e74.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"COMMENT":"please do not remove depenencies without thorough testing. many dependencies are not imported directly, as they are peer dependencies","dependencies":{"@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.27","svelte":"^4.1.1","source-map-js":"1.0.2","typescript":"4.3.5"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.8.1"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"43444e74991ba736019c514597ad34ed44c7c1f3","_id":"graphql-language-service-server@2.11.8-canary-43444e74.0","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-2SY3JQQuM2NdSr51Qs9UDWqnvuG2dI6CfSvM3V+7l6h7tOxugvuzNUtrT+q2wk9xwjxZ5kPnPYR9Cd/nxV3UzA==","shasum":"06947537c8560f0118818adb496981c91687513d","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.11.8-canary-43444e74.0.tgz","fileCount":148,"unpackedSize":574200,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFTdeW2ehUhsXWFSeJEm8AQr3xwIimgUdyw+UPZnZrncAiAUeWbb/ChwQlbTvMT/mhLa4F7A2gHYfiog70my0RFqsg=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.11.8-canary-43444e74.0_1705124705782_0.8049616302529461"},"_hasShrinkwrap":false},"2.11.8-canary-d47bc2eb.0":{"name":"graphql-language-service-server","version":"2.11.8-canary-d47bc2eb.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"COMMENT":"please do not remove depenencies without thorough testing. many dependencies are not imported directly, as they are peer dependencies","dependencies":{"@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.27","svelte":"^4.1.1","source-map-js":"1.0.2","typescript":"4.3.5"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.8.1"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"d47bc2eb091a4ac4200d5210db021518ba230245","_id":"graphql-language-service-server@2.11.8-canary-d47bc2eb.0","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-2V1SWEPOnrX0cNC2rf1IkIaWLwDtDBItvAfK7elvigRMmFxrX/IAToGSpAXjyJnS6niJU7rHYFtA7cmX/YFqbw==","shasum":"7424fa82047f4d427321406a631a8618b94ab6bc","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.11.8-canary-d47bc2eb.0.tgz","fileCount":148,"unpackedSize":574200,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDykxU3247OfLRS3IoxxuHA0t5ytSN8UhdXCx1q9OfenAiAddYOu0Y/8GbBHsWJaIKvOyL6biaf5oT70Fq+eLDYTgg=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.11.8-canary-d47bc2eb.0_1705124790205_0.13136529602390135"},"_hasShrinkwrap":false},"2.11.8":{"name":"graphql-language-service-server","version":"2.11.8","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"COMMENT":"please do not remove depenencies without thorough testing. many dependencies are not imported directly, as they are peer dependencies","dependencies":{"@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.27","svelte":"^4.1.1","source-map-js":"1.0.2","typescript":"4.3.5"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.8.1"},"gitHead":"05007e9088b59dec22f9574ea872d9718d799a42","_id":"graphql-language-service-server@2.11.8","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-EkOUJfdH2gQKlcjnPzWhg3ycs3RvG9uIgkx1uPlRu1laMOpk41Vl9t9+2Lv101Mn5vPF/UiUgDp5z5+7AfVx9Q==","shasum":"1fc145cba778fc77d3072a840a3ec386bba3c931","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.11.8.tgz","fileCount":148,"unpackedSize":574182,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDPe0SY2uIV9Y8XexKja/QKACJ+eE5SA5yWYGPE/YU8GAIgRgm8vGnVE80pxNJAFi2fZLY7nyTYQZhfm+TtUlkbAwY="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.11.8_1705125278453_0.45730496350540517"},"_hasShrinkwrap":false},"2.11.9-canary-d1f52525.0":{"name":"graphql-language-service-server","version":"2.11.9-canary-d1f52525.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"COMMENT":"please do not remove depenencies without thorough testing. many dependencies are not imported directly, as they are peer dependencies","dependencies":{"@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.27","svelte":"^4.1.1","source-map-js":"1.0.2","typescript":"5.3.3"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.8.1"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"d1f525250a52761b44871ce3e992d0679eb49256","_id":"graphql-language-service-server@2.11.9-canary-d1f52525.0","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-q7I+VBAO5qD1FcsEI4qd8LOkP3V7kVa6w499J0CxHUssbd9a+Mhkpxf11Ebw8pJsNWttZWxEi0eXTex18HrdpQ==","shasum":"aff68a34ca205a7e1fe540dff1ea5d017d05fa4a","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.11.9-canary-d1f52525.0.tgz","fileCount":148,"unpackedSize":574200,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQChRmDyGMHyUeKh38rz7PvC6CeIgnsqF0JptuPhPIpzOQIgRTS19/OYUp2naNJIGKNPzoWMPw39JcN7HGKfPzqyAFU="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.11.9-canary-d1f52525.0_1705131770941_0.02978787372132996"},"_hasShrinkwrap":false},"2.11.9":{"name":"graphql-language-service-server","version":"2.11.9","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"COMMENT":"please do not remove depenencies without thorough testing. many dependencies are not imported directly, as they are peer dependencies","dependencies":{"@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte2tsx":"^0.6.27","svelte":"^4.1.1","source-map-js":"1.0.2","typescript":"5.3.3"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.8.1"},"gitHead":"f5ade688043409bd9ad80f07737ce43442d56ee6","_id":"graphql-language-service-server@2.11.9","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-cYvgKc5sxLwLPmpOWf9IVt/Gma7VzCWWRCVb9+1Pk6H282J5x7VdqAHzjacu4rQms9MWTjDxsxpghz36r5mytA==","shasum":"31363f8a64f4bfd6b2fcc57e88800977fc53ccb4","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.11.9.tgz","fileCount":148,"unpackedSize":574182,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAGDtlFzUAO/5431f35akr5ikRHPlMTerrkOUopRWvHmAiEApjTEsol1k331qq2m7db9cK6jSeS2MbYYHCqUp1k6CZE="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.11.9_1705134622421_0.09541586085496379"},"_hasShrinkwrap":false},"2.11.10-canary-8ff51d17.0":{"name":"graphql-language-service-server","version":"2.11.10-canary-8ff51d17.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"COMMENT":"please do not remove depenencies without thorough testing. many dependencies are not imported directly, as they are peer dependencies","dependencies":{"@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte":"^4.1.1","source-map-js":"1.0.2"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.8.1"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"8ff51d175bd98a80b24a4769557b0bdeae29ca4d","_id":"graphql-language-service-server@2.11.10-canary-8ff51d17.0","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-aqwnXeEcb+NJSHMJKLI+Dff49TuyFQbRJ/frioUog98odj/aAvPNXJOv90Tg4vaJ/bxYzXkOYiGnp8efcZhR+Q==","shasum":"9aa693d21d394c7d77a042f9c80f25a461c82e0e","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.11.10-canary-8ff51d17.0.tgz","fileCount":148,"unpackedSize":574320,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGDX/MN+4Gw/RQuOp4ZEvaJdBw6glpQEIGGnjpP8gnpSAiEAllO8DHAPvnUJFhcyymPJs9Hc1Hytbzu3s3BA8h79wSo="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.11.10-canary-8ff51d17.0_1705144218441_0.9965844806054993"},"_hasShrinkwrap":false},"2.11.10":{"name":"graphql-language-service-server","version":"2.11.10","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"COMMENT":"please do not remove depenencies without thorough testing. many dependencies are not imported directly, as they are peer dependencies","dependencies":{"@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","svelte":"^4.1.1","source-map-js":"1.0.2"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.8.1"},"gitHead":"88ae24321dbf7b5810ffdb1943efde44f6b114be","_id":"graphql-language-service-server@2.11.10","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-vwcIih3Z0BEdsNgkU2BTe6jdsnG5LLRYQ3RZ9IiEgixpN4XlJ584KNzRUQY8kqAdvwavM/bpXzfdCm6gybAMkQ==","shasum":"94446f52d2072422532c01615a93afd94c245b17","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.11.10.tgz","fileCount":148,"unpackedSize":574302,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDH3S8otwPubN5DYUzd/azbb1KjPXl3QWb9xTx98eRIhAIhAJe6rs4D26/qrjbYILNdFjIL9EQ8ib5UkG9h+Y2X+xMv"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.11.10_1705144951362_0.35353228893774724"},"_hasShrinkwrap":false},"2.11.11-canary-1b8df5e7.0":{"name":"graphql-language-service-server","version":"2.11.11-canary-1b8df5e7.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"COMMENT":"please do not remove depenencies without thorough testing. many dependencies are not imported directly, as they are peer dependencies","dependencies":{"@astrojs/compiler":"^2.5.0","@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","astrojs-compiler-sync":"^0.3.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","source-map-js":"1.0.2","svelte":"^4.1.1","svelte2tsx":"^0.7.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","typescript":"^5.3.3"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.8.1","mock-fs":"^5.2.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"1b8df5e7f35a453183b3b8aa74c3a5a1ce49f84f","_id":"graphql-language-service-server@2.11.11-canary-1b8df5e7.0","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-wCHmUV19rgJASKt48TvC4ERMFxVqQoPT47/tGT4fEjU305lpaXxY5V7W8MwiuG4t9WwVEJ8cyLBeQdmUa9a0Aw==","shasum":"cbf2e01af3d6f521316401e33096e4207e9c5119","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.11.11-canary-1b8df5e7.0.tgz","fileCount":158,"unpackedSize":595056,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEf4XmQrtLreEzuZlRio+tpVd6s+uOstQTf+spwegS1LAiEA4LqfudRYnCtx2hLqnuKMI01SrlLK0jc2MOQkffCP5jI="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.11.11-canary-1b8df5e7.0_1706134830837_0.9513672618429629"},"_hasShrinkwrap":false},"2.12.0":{"name":"graphql-language-service-server","version":"2.12.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"COMMENT":"please do not remove depenencies without thorough testing. many dependencies are not imported directly, as they are peer dependencies","dependencies":{"@astrojs/compiler":"^2.5.0","@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","astrojs-compiler-sync":"^0.3.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","source-map-js":"1.0.2","svelte":"^4.1.1","svelte2tsx":"^0.7.0","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2","typescript":"^5.3.3"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","cross-env":"^7.0.2","graphql":"^16.8.1","mock-fs":"^5.2.0"},"gitHead":"70d25ab22a3619a14b60de05ed9ce4bea524e8b4","_id":"graphql-language-service-server@2.12.0","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-AIxoKC808n3I3LeYPgrDoykIr2lc8cf94kX8hvR+OrF9SRgFr/s69MoMqbzoB1M5nf0eJWNC/NssuS+6Ujo1uw==","shasum":"8c9193d907e6944a35c222a4a3372d47983e8672","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.0.tgz","fileCount":158,"unpackedSize":595037,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDryNzC3p68cHp7L94YgTULi5q4/GMGLaQ4zgsPe7O7yAiEAhJzfytXR/GLXHBuh7n3u88xps/opgmv+NFHyDfk/hLo="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.0_1706163791095_0.9808470188887266"},"_hasShrinkwrap":false},"2.12.1-canary-71275a35.0":{"name":"graphql-language-service-server","version":"2.12.1-canary-71275a35.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"COMMENT":"please do not remove depenencies without thorough testing. many dependencies are not imported directly, as they are peer dependencies","dependencies":{"@astrojs/compiler":"^2.5.0","@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","astrojs-compiler-sync":"^0.3.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","source-map-js":"1.0.2","svelte":"^4.1.1","svelte2tsx":"^0.7.0","typescript":"^5.3.3","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","@types/mock-fs":"^4.13.4","cross-env":"^7.0.2","graphql":"^16.8.1","mock-fs":"^5.2.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"71275a3566b44344d2ce2990158f9b6874e66049","_id":"graphql-language-service-server@2.12.1-canary-71275a35.0","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-gTk4d7p5YFUKPcin3fBp390gVqExT26nl2A7bro2HJ3rIR5wZ7o1r+LoD23Jm1Yly3jkuy+Sfjp2KZZy609zxg==","shasum":"38258c14c2b952acabe66d47799ba92851b15b26","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.1-canary-71275a35.0.tgz","fileCount":158,"unpackedSize":596856,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDl0WEHyvNFZCpJBN2hFJptWMi2vYIqzFcpzcjCVRb0TAIhANHJ5DyjSSI3gk9SK6IsIw31P4nep86Yip8T6Iy1hkbE"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.1-canary-71275a35.0_1706368889201_0.390836432923896"},"_hasShrinkwrap":false},"2.12.1-canary-c159d531.0":{"name":"graphql-language-service-server","version":"2.12.1-canary-c159d531.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"COMMENT":"please do not remove depenencies without thorough testing. many dependencies are not imported directly, as they are peer dependencies","dependencies":{"@astrojs/compiler":"^2.5.0","@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","astrojs-compiler-sync":"^0.3.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","source-map-js":"1.0.2","svelte":"^4.1.1","svelte2tsx":"^0.7.0","typescript":"^5.3.3","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","@types/mock-fs":"^4.13.4","cross-env":"^7.0.2","graphql":"^16.8.1","mock-fs":"^5.2.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"c159d5312c528ac0fb4a2d88d94f2c68fefd597e","_id":"graphql-language-service-server@2.12.1-canary-c159d531.0","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-LKFPAOOHORPMl5ubfkTNGjh4/UY8Pq1Xr5A/cglthr3kmuyUllewWnRK0nP0h1HU5u8AHNGyrbBRIE3AsR3qCw==","shasum":"eb00ae3da0d4a599bb135d6351c92791cd94f410","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.1-canary-c159d531.0.tgz","fileCount":158,"unpackedSize":596851,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHzFIvSxNlusyMSbcbvsRAg3zH8byP/0dZOKYMS0t5h3AiEA87YvWL9tBbUXQSwWgA6Y/ZwCE/XUQJnWU4fSRsY8lp0="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.1-canary-c159d531.0_1706369318220_0.5576709180320774"},"_hasShrinkwrap":false},"2.12.1-canary-031fe458.0":{"name":"graphql-language-service-server","version":"2.12.1-canary-031fe458.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"COMMENT":"please do not remove depenencies without thorough testing. many dependencies are not imported directly, as they are peer dependencies","dependencies":{"@astrojs/compiler":"^2.5.0","@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","astrojs-compiler-sync":"^0.3.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","source-map-js":"1.0.2","svelte":"^4.1.1","svelte2tsx":"^0.7.0","typescript":"^5.3.3","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","@types/mock-fs":"^4.13.4","cross-env":"^7.0.2","graphql":"^16.8.1","mock-fs":"^5.2.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"031fe4586fe5fcd5b19989e7665a83cfa1291eca","_id":"graphql-language-service-server@2.12.1-canary-031fe458.0","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-yAiqWZaTmjnpP/7KHYYeejR5R2so+VXvY/NYyGfqDkxl5zLVd2oz8v0Ay17uJMBn8wNBbKhN3FbuKiS3BZ7deQ==","shasum":"a2b9ffc18d0e8286aa237dedb384635ab24e8fa3","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.1-canary-031fe458.0.tgz","fileCount":158,"unpackedSize":589146,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCXsh+7ENpD5C74aJOCqIViScXlsmEPJMVbbptxHulr3wIhAI0Zls/6jt6f+vB41KDLqjcgyqTPti+xVHB1YWPXlAs+"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.1-canary-031fe458.0_1706380755857_0.393746119635372"},"_hasShrinkwrap":false},"2.12.1-canary-cac64260.0":{"name":"graphql-language-service-server","version":"2.12.1-canary-cac64260.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"COMMENT":"please do not remove depenencies without thorough testing. many dependencies are not imported directly, as they are peer dependencies","dependencies":{"@astrojs/compiler":"^2.5.0","@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","astrojs-compiler-sync":"^0.3.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","source-map-js":"1.0.2","svelte":"^4.1.1","svelte2tsx":"^0.7.0","typescript":"^5.3.3","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","@types/mock-fs":"^4.13.4","cross-env":"^7.0.2","graphql":"^16.8.1","mock-fs":"^5.2.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"cac6426081a8675f3def98fc2363a746e04f504a","_id":"graphql-language-service-server@2.12.1-canary-cac64260.0","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-MxWHl05G7reUV+PihwtkR3BJ7TIE5WWRKqgRTBEDOXr5QaOYUxTNFKZ6Tzl4rqLlQaD1GndJeIrD+aattpsiig==","shasum":"f6e97c494bf8afdbd2fa6317d7c93a1ee7b9d630","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.1-canary-cac64260.0.tgz","fileCount":157,"unpackedSize":571440,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDjaYjdttUcY0kN9GC5D2c+HUk0f+fIKJhfZ6XItj+HWAIhANOPVsOyVgLe2IqrxogjhQpIkeML/FPecVPC0NVBKcnV"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.1-canary-cac64260.0_1706385986442_0.1523845893108977"},"_hasShrinkwrap":false},"2.12.1-canary-c600d82b.0":{"name":"graphql-language-service-server","version":"2.12.1-canary-c600d82b.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"COMMENT":"please do not remove depenencies without thorough testing. many dependencies are not imported directly, as they are peer dependencies","dependencies":{"@astrojs/compiler":"^2.5.0","@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","astrojs-compiler-sync":"^0.3.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","source-map-js":"1.0.2","svelte":"^4.1.1","svelte2tsx":"^0.7.0","typescript":"^5.3.3","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","@types/mock-fs":"^4.13.4","cross-env":"^7.0.2","graphql":"^16.8.1","mock-fs":"^5.2.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"c600d82b5901bf3f30aa4e0509c3cbf7c8774fd7","_id":"graphql-language-service-server@2.12.1-canary-c600d82b.0","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-9XSkPPazJCTUmkrm7zNNfuHb8fvdbqNh3Jk2GW7jL0f9taRWBQJuYKTj2gf6DH+nPH2b1bI+K+cn9KSF5z5Ufw==","shasum":"7e7a35a7a4ef026a15613dd120524bc8c2492b78","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.1-canary-c600d82b.0.tgz","fileCount":159,"unpackedSize":595683,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDuysyftXM2DnxCB8q3wv2ILKgwtI1jjsBM96OozNj4XwIgb8001uEtMXHak4cHWPuAzFEqgW179erUSmdA9pKBobs="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.1-canary-c600d82b.0_1706390687514_0.6126692195486549"},"_hasShrinkwrap":false},"2.12.1-canary-0e2cd118.0":{"name":"graphql-language-service-server","version":"2.12.1-canary-0e2cd118.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"COMMENT":"please do not remove depenencies without thorough testing. many dependencies are not imported directly, as they are peer dependencies","dependencies":{"@astrojs/compiler":"^2.5.0","@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","astrojs-compiler-sync":"^0.3.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","source-map-js":"1.0.2","svelte":"^4.1.1","svelte2tsx":"^0.7.0","typescript":"^5.3.3","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","@types/mock-fs":"^4.13.4","cross-env":"^7.0.2","graphql":"^16.8.1","mock-fs":"^5.2.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"0e2cd118ca27f7c75870f2ba8728e6c1b6e2c494","_id":"graphql-language-service-server@2.12.1-canary-0e2cd118.0","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-WAl1GuQW279tGpU72wL0V1PnLGbgPHCDOyP/HIeH0AHvJHSYymaii6GNYet7H7+QgyxSTZNFn69jQBK262bWsw==","shasum":"a402389e26793abbaba9e11a5573a80cbd343e67","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.1-canary-0e2cd118.0.tgz","fileCount":159,"unpackedSize":595775,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDYzuAsqB7RWlYMB+SnyA3J0nw9/UR7/V3ZtFVfMKgXzAiEA4IhnNlZhEl/m340+oKCfjXKqXrP3TjLpfRR2Nha5vJw="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.1-canary-0e2cd118.0_1706439594883_0.32863046332421497"},"_hasShrinkwrap":false},"2.12.1-canary-eb558a23.0":{"name":"graphql-language-service-server","version":"2.12.1-canary-eb558a23.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"COMMENT":"please do not remove depenencies without thorough testing. many dependencies are not imported directly, as they are peer dependencies","dependencies":{"@astrojs/compiler":"^2.5.0","@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","astrojs-compiler-sync":"^0.3.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","source-map-js":"1.0.2","svelte":"^4.1.1","svelte2tsx":"^0.7.0","typescript":"^5.3.3","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","@types/mock-fs":"^4.13.4","cross-env":"^7.0.2","graphql":"^16.8.1","mock-fs":"^5.2.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"eb558a235381b720a4da0a663a41002ef3272e10","_id":"graphql-language-service-server@2.12.1-canary-eb558a23.0","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-s0+uMA+CrWHGNceyFUDH6x/00GBDHA+iASZ9Vr71HbvfTiydrtvLoRMW12XzO1BlxLwMAtj4VVs54/3iqVIXvg==","shasum":"6bba70db4edad1d47233306f7aac143625a0f837","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.1-canary-eb558a23.0.tgz","fileCount":159,"unpackedSize":598199,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDNtMltZbVLECDcCCA4xJ0i68rf3t05+ZruizouX8x9FwIgHSwFJfoP698xtKRo3mWB2Cc+uSxjuWbXGdiFofLkRtY="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.1-canary-eb558a23.0_1706826040566_0.7383717048278173"},"_hasShrinkwrap":false},"2.12.1-canary-5815ea6e.0":{"name":"graphql-language-service-server","version":"2.12.1-canary-5815ea6e.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"COMMENT":"please do not remove depenencies without thorough testing. many dependencies are not imported directly, as they are peer dependencies","dependencies":{"@astrojs/compiler":"^2.5.0","@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","astrojs-compiler-sync":"^0.3.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","source-map-js":"1.0.2","svelte":"^4.1.1","svelte2tsx":"^0.7.0","typescript":"^5.3.3","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","@types/mock-fs":"^4.13.4","cross-env":"^7.0.2","graphql":"^16.8.1","mock-fs":"^5.2.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"5815ea6e9b670c7a1e6fcc17491f5751c3a973b4","_id":"graphql-language-service-server@2.12.1-canary-5815ea6e.0","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-qyAn3MihhE5k0f+BfpS1gktlba5zvGEZGXjZCb6V0Nt0ydCfaIz5LgF4xktbVCOitW4YIFomCUqGTbgX0kuD+Q==","shasum":"de10cde4bdd323ab9cd7332b8d00a19a4d0d59ee","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.1-canary-5815ea6e.0.tgz","fileCount":160,"unpackedSize":603904,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC5+tEofg5kXLFsSOUYp1jE3bHOo8HBQLWT5agOFelBzQIhAJKK0KD88hkeagNk1pEI9DVXGKBV8Vdu2TX+wpFG8vwy"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.1-canary-5815ea6e.0_1707056131929_0.7569134046659418"},"_hasShrinkwrap":false},"2.12.1-canary-1569230c.0":{"name":"graphql-language-service-server","version":"2.12.1-canary-1569230c.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"COMMENT":"please do not remove depenencies without thorough testing. many dependencies are not imported directly, as they are peer dependencies","dependencies":{"@astrojs/compiler":"^2.5.0","@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","astrojs-compiler-sync":"^0.3.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","source-map-js":"1.0.2","svelte":"^4.1.1","svelte2tsx":"^0.7.0","typescript":"^5.3.3","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","@types/mock-fs":"^4.13.4","cross-env":"^7.0.2","graphql":"^16.8.1","mock-fs":"^5.2.0"},"gitHead":"1569230cc974090f3757de2bb7a255754c1fcb07","readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.12.1-canary-1569230c.0","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-KsuxYUtA8lv+JgHplDR3OCtSKQUPSNhyHe0Pg+I3EKKvElijmBk21twh8r1UHJ9SCQaTVG6ba/eQBQfVkzuEzA==","shasum":"2d6ca27f1a653bed76ba09b9669862017d6264d0","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.1-canary-1569230c.0.tgz","fileCount":161,"unpackedSize":598526,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBhVuHQeXhS9rjrKkQAetypzyOKGm9iVj1kctluDzdXHAiAKyav5oqFshr6++oHjx0ugWau67tj3QE+y87qUPZjfYg=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.1-canary-1569230c.0_1708123149940_0.7912964707418577"},"_hasShrinkwrap":false},"2.12.1-canary-bf7a0f53.0":{"name":"graphql-language-service-server","version":"2.12.1-canary-bf7a0f53.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"COMMENT":"please do not remove depenencies without thorough testing. many dependencies are not imported directly, as they are peer dependencies","dependencies":{"@astrojs/compiler":"^2.5.0","@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","astrojs-compiler-sync":"^0.3.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","source-map-js":"1.0.2","svelte":"^4.1.1","svelte2tsx":"^0.7.0","typescript":"^5.3.3","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","@types/mock-fs":"^4.13.4","cross-env":"^7.0.2","graphql":"^16.8.1","mock-fs":"^5.2.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"bf7a0f53e4215583dc28d5f499f28611e48f0921","_id":"graphql-language-service-server@2.12.1-canary-bf7a0f53.0","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-Wk1VIEe52p0WL7GXXxQuBn7HPv0pJfxFQO1N0v89Kdm6LWjijJeMucCBSqKU+ZdMD27ZqCHRenTuutZKGzVaqA==","shasum":"775876dba27ff42a70434edadee52b80b153836c","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.1-canary-bf7a0f53.0.tgz","fileCount":161,"unpackedSize":598526,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCpYPtkKFefdyKJdl05wZE0767rFWQ9x9C/0VJ3+jUMcAIgFk7CUQqTl6tIqgp20NJ8E+MchvFd04qrltu3jxV9QU8="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.1-canary-bf7a0f53.0_1708257929500_0.40373839555491586"},"_hasShrinkwrap":false},"2.12.1-canary-c21932cc.0":{"name":"graphql-language-service-server","version":"2.12.1-canary-c21932cc.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"COMMENT":"please do not remove depenencies without thorough testing. many dependencies are not imported directly, as they are peer dependencies","dependencies":{"@astrojs/compiler":"^2.5.0","@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","astrojs-compiler-sync":"^0.3.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","source-map-js":"1.0.2","svelte":"^4.1.1","svelte2tsx":"^0.7.0","typescript":"^5.3.3","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","@types/mock-fs":"^4.13.4","cross-env":"^7.0.2","graphql":"^16.8.1","mock-fs":"^5.2.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"c21932ccd3e6354a8da60369c4046f3cf9e43d64","_id":"graphql-language-service-server@2.12.1-canary-c21932cc.0","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-L0AP7IoGuYozGJ3OMJuFZPfcp8ZioXD1uDyHWs8oedVyDcLhe3QZmTI1fMDnU68yOXzDSHjpZOCAfQaAljLrjA==","shasum":"23423148647346998df72f007c91e2087e1c702e","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.1-canary-c21932cc.0.tgz","fileCount":162,"unpackedSize":606029,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC0RKnplo47FxmjA+V6ema29I8NvLsgnnKkA1/wa4pyZwIhAMzd83jUsPesUbaM5Z1/46jY8OYOW1NdyVPsgaS7WGO7"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.1-canary-c21932cc.0_1708290069472_0.27686655900196344"},"_hasShrinkwrap":false},"2.12.1-canary-99c5d9c8.0":{"name":"graphql-language-service-server","version":"2.12.1-canary-99c5d9c8.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"COMMENT":"please do not remove depenencies without thorough testing. many dependencies are not imported directly, as they are peer dependencies","dependencies":{"@astrojs/compiler":"^2.5.0","@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","astrojs-compiler-sync":"^0.3.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","source-map-js":"1.0.2","svelte":"^4.1.1","svelte2tsx":"^0.7.0","typescript":"^5.3.3","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","@types/mock-fs":"^4.13.4","cross-env":"^7.0.2","graphql":"^16.8.1","mock-fs":"^5.2.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"99c5d9c8108c97b1b6f70c98b06e7157ac189b1d","_id":"graphql-language-service-server@2.12.1-canary-99c5d9c8.0","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-ssH+p5APiJaFrzP2YHZ2rpdlOSD1MaYdowMSl/xky8QfSfcSQzV3AO/6LpXjTaAg/YFcKGh4p/yDTl3wtE9UtA==","shasum":"3a5bd7d30ae8e3dac6a9042b328e4d39c61f31cb","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.1-canary-99c5d9c8.0.tgz","fileCount":161,"unpackedSize":611235,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCID7BNuEfWGs+kLh01jOkuYNLmDCJuu+ughvPXPxLOL6fAiEAkGFLedzex2dZvalyDUXm5JLCprOmaZ5ITwwoKhv0/ho="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.1-canary-99c5d9c8.0_1708402483302_0.086773089968605"},"_hasShrinkwrap":false},"2.12.1-canary-73b40723.0":{"name":"graphql-language-service-server","version":"2.12.1-canary-73b40723.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"COMMENT":"please do not remove depenencies without thorough testing. many dependencies are not imported directly, as they are peer dependencies","dependencies":{"@astrojs/compiler":"^2.5.0","@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","astrojs-compiler-sync":"^0.3.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","source-map-js":"1.0.2","svelte":"^4.1.1","svelte2tsx":"^0.7.0","typescript":"^5.3.3","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","@types/mock-fs":"^4.13.4","cross-env":"^7.0.2","graphql":"^16.8.1","mock-fs":"^5.2.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"73b40723440409d7447b5c2d720da4ba143fff10","_id":"graphql-language-service-server@2.12.1-canary-73b40723.0","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-RUthKMyO8vAS0lpii5hnvZVH0X/3YPomiFDiJLeotYOXrrvpecNFHYHX3UHl1+Rr1lpOtsvpX226CErRg1PFSA==","shasum":"07c53fbc8d31739576a5b04c33a25d3f81b1a58d","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.1-canary-73b40723.0.tgz","fileCount":161,"unpackedSize":611235,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD2pjgsebKPq0HS9PxuD+Wj3XUP+RmJ2NMs6d6UMEqnaAIhANfBw3l561dRaCNiVnuKWb2R/NadcUDySn6JylsvFeSf"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.1-canary-73b40723.0_1708402672359_0.24744058351675147"},"_hasShrinkwrap":false},"2.12.1-canary-a9a6ccd4.0":{"name":"graphql-language-service-server","version":"2.12.1-canary-a9a6ccd4.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"COMMENT":"please do not remove depenencies without thorough testing. many dependencies are not imported directly, as they are peer dependencies","dependencies":{"@astrojs/compiler":"^2.5.0","@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","astrojs-compiler-sync":"^0.3.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","source-map-js":"1.0.2","svelte":"^4.1.1","svelte2tsx":"^0.7.0","typescript":"^5.3.3","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","@types/mock-fs":"^4.13.4","cross-env":"^7.0.2","graphql":"^16.8.1","mock-fs":"^5.2.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"a9a6ccd4edba9c2b7bda50b0b9b62aa74541e392","_id":"graphql-language-service-server@2.12.1-canary-a9a6ccd4.0","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-VU/9pPSArI8WiriFspTV01so/wclyLDCrzHw7+BRFdY8RbkrIh6q3y93BWkwth4Z7RitxAWFQY+hZKsB9/RSxg==","shasum":"b6d5bec279d5c0d006c1854a1d91594b46b62be6","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.1-canary-a9a6ccd4.0.tgz","fileCount":162,"unpackedSize":611315,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCtRpwK5JtryhrjzLylqYWuw3KYb6xJBP5mr3nCRfFjwwIhAPU4UA9JYOH6t4I/iidtjcwnIXrIeIBxMqZuy7EMN3iH"}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.1-canary-a9a6ccd4.0_1708471772073_0.030644223192523468"},"_hasShrinkwrap":false},"2.12.1-canary-6b500814.0":{"name":"graphql-language-service-server","version":"2.12.1-canary-6b500814.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"COMMENT":"please do not remove depenencies without thorough testing. many dependencies are not imported directly, as they are peer dependencies","dependencies":{"@astrojs/compiler":"^2.5.0","@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","astrojs-compiler-sync":"^0.3.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","source-map-js":"1.0.2","svelte":"^4.1.1","svelte2tsx":"^0.7.0","typescript":"^5.3.3","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","@types/mock-fs":"^4.13.4","cross-env":"^7.0.2","graphql":"^16.8.1","mock-fs":"^5.2.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"6b5008140184733df2285b141a2bed90c8544662","_id":"graphql-language-service-server@2.12.1-canary-6b500814.0","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-CHZ91ruiSPLD2t4QGtbvdIQdJtjywPJuYfXoEDVd2uYswbeOVhtKj4lA5xOPz22pK5BCO8YPTh5zXhzS6vDjiw==","shasum":"b6c1fa250701e89f23ddc076b599616c3317e2cc","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.1-canary-6b500814.0.tgz","fileCount":162,"unpackedSize":615506,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAWWe7V7w8E8IbrH2oimPQiMhhoWpJJbXSIR8Wa/l/3vAiEAjGwH3ipDgjYLR4NiXqaD4rd5xdimNv2IMMOL6ZfNy1k="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.1-canary-6b500814.0_1709066266410_0.40185361891325133"},"_hasShrinkwrap":false},"2.12.1-canary-cfd3ee8c.0":{"name":"graphql-language-service-server","version":"2.12.1-canary-cfd3ee8c.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"COMMENT":"please do not remove depenencies without thorough testing. many dependencies are not imported directly, as they are peer dependencies","dependencies":{"@astrojs/compiler":"^2.5.0","@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","astrojs-compiler-sync":"^0.3.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","source-map-js":"1.0.2","svelte":"^4.1.1","svelte2tsx":"^0.7.0","typescript":"^5.3.3","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","@types/mock-fs":"^4.13.4","cross-env":"^7.0.2","graphql":"^16.8.1","mock-fs":"^5.2.0"},"gitHead":"cfd3ee8c1f5f84c208febea34b0285f36279d794","readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.12.1-canary-cfd3ee8c.0","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-A+GXPAiX4RLhezz6bV3vl8SRl9PH07mZGiFWSsPc2EDHAi4+hbu23HtgRv0V8qA+qbtrINoIB/dIOz7xpje7tA==","shasum":"aa815359a3a63ff50db216efa027d3c9f36270f8","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.1-canary-cfd3ee8c.0.tgz","fileCount":162,"unpackedSize":615507,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGAk1+ghzA4WU2DEnZ/z8M1WshOfzNG78FbUE2ajQitqAiBhy8u6sfYje5We4u2EmI+lh4Yz9R6bTQAj5kcpbKqfjQ=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.1-canary-cfd3ee8c.0_1709066615938_0.7910400783631901"},"_hasShrinkwrap":false},"2.12.1-canary-061ad590.0":{"name":"graphql-language-service-server","version":"2.12.1-canary-061ad590.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"COMMENT":"please do not remove depenencies without thorough testing. many dependencies are not imported directly, as they are peer dependencies","dependencies":{"@astrojs/compiler":"^2.5.0","@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","astrojs-compiler-sync":"^0.3.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","source-map-js":"1.0.2","svelte":"^4.1.1","svelte2tsx":"^0.7.0","typescript":"^5.3.3","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","@types/mock-fs":"^4.13.4","cross-env":"^7.0.2","graphql":"^16.8.1","mock-fs":"^5.2.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"061ad59058fb673aeb563a8850a07a1c1efab729","_id":"graphql-language-service-server@2.12.1-canary-061ad590.0","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-kUlkTXtQ45prNgynNCfxGOulWlfObHSFo8UAFnGOZJWRZ7pUfqELUxyKE28XtEfAI5VLiSZgCdHZOOnue7GiUQ==","shasum":"bc9fb152d0959887097826af60a4778e976ac208","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.1-canary-061ad590.0.tgz","fileCount":162,"unpackedSize":615941,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICA2HPHsHtnEL9ePxKqAcuemAdkAcOZ6hgVPzvQ1jue0AiEA+YN8m4XSop5vo4FznrtbV3zy30cwlbiUkq+8Hqkg88g="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.1-canary-061ad590.0_1709071617680_0.6533472126727604"},"_hasShrinkwrap":false},"2.12.1-canary-acfcc769.0":{"name":"graphql-language-service-server","version":"2.12.1-canary-acfcc769.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"COMMENT":"please do not remove depenencies without thorough testing. many dependencies are not imported directly, as they are peer dependencies","dependencies":{"@astrojs/compiler":"^2.5.0","@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","astrojs-compiler-sync":"^0.3.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","source-map-js":"1.0.2","svelte":"^4.1.1","svelte2tsx":"^0.7.0","typescript":"^5.3.3","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","@types/mock-fs":"^4.13.4","cross-env":"^7.0.2","graphql":"^16.8.1","mock-fs":"^5.2.0"},"gitHead":"acfcc769c43f0943db5678f69be7819ee9d3b8a2","readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","_id":"graphql-language-service-server@2.12.1-canary-acfcc769.0","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-uCGcsbhrjqCn+/tA/lHDw87Q13L9Rk/HUsx0w72msbIWsH9ignos+1VZOT7uH/Jn3QT36fSR02Z2wtEIHcZ36A==","shasum":"c144128ab4d1116df4755555853b76e7eb0451b4","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.1-canary-acfcc769.0.tgz","fileCount":162,"unpackedSize":616240,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIChgHQ2ChOXwDHRPEnAaV2nvr0FUp4YF//RZJVhqlP+eAiBSKXN4ObrTZOyW0SoOgyHMNmN5fUkplTwul2uRlQMTWg=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.1-canary-acfcc769.0_1709459269378_0.49091483711089023"},"_hasShrinkwrap":false},"2.12.1-canary-74cb22ae.0":{"name":"graphql-language-service-server","version":"2.12.1-canary-74cb22ae.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"COMMENT":"please do not remove depenencies without thorough testing. many dependencies are not imported directly, as they are peer dependencies","dependencies":{"@astrojs/compiler":"^2.5.0","@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","astrojs-compiler-sync":"^0.3.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","source-map-js":"1.0.2","svelte":"^4.1.1","svelte2tsx":"^0.7.0","typescript":"^5.3.3","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","@types/mock-fs":"^4.13.4","cross-env":"^7.0.2","graphql":"^16.8.1","mock-fs":"^5.2.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"74cb22aeca3f25a68b307654428c5d03645dd4ea","_id":"graphql-language-service-server@2.12.1-canary-74cb22ae.0","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-D/RKTqG8OsVqmU7pqXGabC9ro/DnGh2HsGRcz5jd6AQiAUb+Pa92lQwoJ9XpAm0YJ2oa0tW6H8n0cGQWgkq4+w==","shasum":"a50e931aa29c16e4815e950cb96b56f6019bdf24","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.1-canary-74cb22ae.0.tgz","fileCount":162,"unpackedSize":618075,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC6SyWMJIjlP/UQO/dJtcufQ8LEKVOv8/fWDacv7GL9RwIgHdoofY0BwypqTzTxOZpTQpN6cAEiIv+G76mzJ6YCrFU="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.1-canary-74cb22ae.0_1709484962686_0.28858338948258133"},"_hasShrinkwrap":false},"2.12.1-canary-0f788ef9.0":{"name":"graphql-language-service-server","version":"2.12.1-canary-0f788ef9.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"COMMENT":"please do not remove depenencies without thorough testing. many dependencies are not imported directly, as they are peer dependencies","dependencies":{"@astrojs/compiler":"^2.5.0","@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","astrojs-compiler-sync":"^0.3.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","source-map-js":"1.0.2","svelte":"^4.1.1","svelte2tsx":"^0.7.0","typescript":"^5.3.3","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","@types/mock-fs":"^4.13.4","cross-env":"^7.0.2","graphql":"^16.8.1","mock-fs":"^5.2.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"0f788ef90272374f48d6354813bb5a78ccd45b3a","_id":"graphql-language-service-server@2.12.1-canary-0f788ef9.0","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-+1KqoQ2LxXzncvmqFsUegRdpcdVPsjAcFgkbX9Z299JUmTv2uPXVyo6MF9lJRPelO/a+VkPdisRGfY6su9uhDQ==","shasum":"0c5f5bc58c09e0ef3fbd443c0fe03f8297128744","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.1-canary-0f788ef9.0.tgz","fileCount":163,"unpackedSize":632922,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICVnNoYb3LKp/Y3c6o2stSh4q1oz3zmtwbbw+pHHYspAAiAacFmFGddfP72wvAMmZGiy6Ecst7IyYjO3hBaoHn3pZA=="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.1-canary-0f788ef9.0_1709494746004_0.2095933618973973"},"_hasShrinkwrap":false},"2.12.1-canary-e4221d66.0":{"name":"graphql-language-service-server","version":"2.12.1-canary-e4221d66.0","description":"Server process backing the GraphQL Language Service","contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"license":"MIT","keywords":["graphql","language server","LSP","vue","svelte","typescript"],"main":"dist/index.js","module":"esm/index.js","typings":"esm/index.d.ts","peerDependencies":{"graphql":"^15.5.0 || ^16.0.0"},"COMMENT":"please do not remove depenencies without thorough testing. many dependencies are not imported directly, as they are peer dependencies","dependencies":{"@astrojs/compiler":"^2.5.0","@babel/parser":"^7.23.6","@babel/types":"^7.23.5","@graphql-tools/code-file-loader":"8.0.3","@vue/compiler-sfc":"^3.4.5","astrojs-compiler-sync":"^0.3.5","cosmiconfig-toml-loader":"^1.0.0","dotenv":"10.0.0","fast-glob":"^3.2.7","glob":"^7.2.0","graphql-config":"5.0.3","graphql-language-service":"^5.2.0","mkdirp":"^1.0.4","node-abort-controller":"^3.0.1","nullthrows":"^1.0.0","source-map-js":"1.0.2","svelte":"^4.1.1","svelte2tsx":"^0.7.0","typescript":"^5.3.3","vscode-jsonrpc":"^8.0.1","vscode-languageserver":"^8.0.1","vscode-languageserver-types":"^3.17.2","vscode-uri":"^3.0.2"},"devDependencies":{"@types/glob":"^8.1.0","@types/mkdirp":"^1.0.1","@types/mock-fs":"^4.13.4","cross-env":"^7.0.2","graphql":"^16.8.1","mock-fs":"^5.2.0"},"readme":"# graphql-language-service-server\n\n[![NPM](https://img.shields.io/npm/v/graphql-language-service-server.svg?style=flat-square)](https://npmjs.com/graphql-language-service-server)\n![npm downloads](https://img.shields.io/npm/dm/graphql-language-service-server?label=npm%20downloads)\n[![License](https://img.shields.io/npm/l/graphql-language-service-server.svg?style=flat-square)](LICENSE)\n\n[Changelog](https://github.com/graphql/graphiql/blob/main/packages/graphql-language-service-server/CHANGELOG.md)\n|\n[API Docs](https://graphiql-test.netlify.app/typedoc/modules/graphql_language_service_server.html)\n| [Discord Channel](https://discord.gg/PXaRYrpgK4)\n\nServer process backing the\n[GraphQL Language Service](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service).\n\nGraphQL Language Service Server provides an interface for building GraphQL\nlanguage services for IDEs.\n\nPartial support for\n[Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol)\nis in place, with more to come in the future.\n\nSupported features include:\n\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions and named types (type, input, enum)\n  definitions (**spec-compliant**)\n- Outline view support for queries\n- Support for `gql` `graphql` and other template tags inside javascript,\n  typescript, jsx, ts, vue and svelte files, and an interface to allow custom\n  parsing of all files.\n\n## Installation and Usage\n\n### Dependencies\n\nAn LSP compatible client with its own file watcher, that sends watch\nnotifications to the server.\n\n**DROPPED**: GraphQL Language Service no longer depends on\n[Watchman](https://facebook.github.io/watchman/)\n\n### Installation\n\n```bash\nnpm install --save graphql-language-service-server\n# or\nyarn add graphql-language-service-server\n```\n\nWe also provide a CLI interface to this server, see\n[`graphql-language-service-cli`](../graphql-language-service-cli/)\n\n### Usage\n\nInitialize the GraphQL Language Server with the `startServer` function:\n\n```ts\nimport { startServer } from 'graphql-language-service-server';\n\nawait startServer({\n  method: 'node',\n});\n```\n\nIf you are developing a service or extension, this is the LSP language server\nyou want to run.\n\nWhen developing vscode extensions, just the above is enough to get started for\nyour extension's `ServerOptions.run.module`, for example.\n\n`startServer` function takes the following parameters:\n\n| Parameter      | Required                                             | Description                                                                       |\n| -------------- | ---------------------------------------------------- | --------------------------------------------------------------------------------- |\n| port           | `true` when method is `socket`, `false` otherwise    | port for the LSP server to run on                                                 |\n| method         | `false`                                              | `socket`, `streams`, or `node` (ipc)                                              |\n| config         | `false`                                              | custom `graphql-config` instance from `loadConfig` (see example above)            |\n| configDir      | `false`                                              | the directory where graphql-config is found                                       |\n| extensions     | `false`                                              | array of functions to transform the graphql-config and add extensions dynamically |\n| parser         | `false`                                              | Customize _all_ file parsing by overriding the default `parseDocument` function   |\n| fileExtensions | `false`. defaults to `['.js', '.ts', '.tsx, '.jsx']` | Customize file extensions used by the default LSP parser                          |\n\n### GraphQL configuration file\n\nYou _must_ provide a graphql config file\n\nCheck out [graphql-config](https://graphql-config.com/introduction) to learn the\nmany ways you can define your graphql config\n\n#### `.graphqlrc` or `.graphqlrc.yml/yaml` or `graphql.config.yml`\n\n```yaml\nschema: 'packages/api/src/schema.graphql'\ndocuments: 'packages/app/src/components/**/*.{tsx,ts}'\nextensions:\n  endpoints:\n    example:\n      url: 'http://localhost:8000'\n  customExtension:\n    foo: true\n```\n\n#### `.graphqlrc` or `.graphqlrc.json` or `graphql.config.json`\n\n```json\n{\n  \"schema\": \"https://localhost:8000\"\n}\n```\n\n#### `graphql.config.js` or `.graphqlrc.js`\n\n```js\nmodule.exports = { schema: 'https://localhost:8000' };\n```\n\n#### custom `startServer`\n\nuse graphql config [`loadConfig`](https://graphql-config.com/load-config) for\nfurther customization:\n\n```ts\nimport { loadConfig } from 'graphql-config'; // 3.0.0 or later!\n\nawait startServer({\n  method: 'node',\n  // or instead of configName, an exact path (relative from rootDir or absolute)\n\n  // deprecated for: loadConfigOptions.rootDir. root directory for graphql config file(s), or for relative resolution for exact `filePath`. default process.cwd()\n  // configDir: '',\n  loadConfigOptions: {\n    // any of the options for graphql-config@3 `loadConfig()`\n\n    // rootDir is same as `configDir` before, the path where the graphql config file would be found by cosmic-config\n    rootDir: 'config/',\n    // or - the relative or absolute path to your file\n    filePath: 'exact/path/to/config.js', // (also supports yml, json, ts, toml)\n    // myPlatform.config.js/json/yaml works now!\n    configName: 'myPlatform',\n  },\n});\n```\n\n<span id=\"custom-graphql-config\" />\n\n#### Custom `graphql-config` features\n\nThe graphql-config features we support are:\n\n```js\nmodule.exports = {\n  extensions: {\n    // add customDirectives (legacy). you can now provide multiple schema pointers to config.schema/project.schema, including inline strings. same with scalars or any SDL type that you'd like to append to the schema\n    customDirectives: ['@myExampleDirective'],\n    // a function that returns an array of validation rules, ala https://github.com/graphql/graphql-js/tree/main/src/validation/rules\n    // note that this file will be loaded by the vscode runtime, so the node version and other factors will come into play\n    customValidationRules: require('./config/customValidationRules'),\n    languageService: {\n      // should the language service read schema for definition lookups from a cached file based on graphql config output?\n      // NOTE: this will disable all definition lookup for local SDL files\n      cacheSchemaFileForLookup: true,\n      // undefined by default which has the same effect as `true`, set to `false` if you are already using // `graphql-eslint` or some other tool for validating graphql in your IDE. Must be explicitly `false` to disable this feature, not just \"falsy\"\n      enableValidation: true,\n    },\n  },\n};\n```\n\nor for multi-project workspaces:\n\n```ts\n// graphql.config.ts\nexport default {\n  projects: {\n    myProject: {\n      schema: [\n        // internally in `graphql-config`, an attempt will be made to combine these schemas into one in-memory schema to use for validation, lookup, etc\n        'http://localhost:8080',\n        './my-project/schema.graphql',\n        './my-project/schema.ts',\n        '@customDirective(arg: String!)',\n        'scalar CustomScalar',\n      ],\n      // project specific defaults\n      extensions: {\n        languageService: {\n          cacheSchemaFileForLookup: true,\n          enableValidation: false,\n        },\n      },\n    },\n    anotherProject: {\n      schema: {\n        'http://localhost:8081': {\n          customHeaders: { Authorization: 'Bearer example' },\n        },\n      },\n    },\n  },\n  // global defaults for all projects\n  extensions: {\n    languageService: {\n      cacheSchemaFileForLookup: false,\n      enableValidation: true,\n    },\n  },\n};\n```\n\nYou can specify any of these settings globally as above, or per project. Read\nthe graphql-config docs to learn more about this!\n\nFor secrets (headers, urls, etc), you can import `dotenv()` and set a base path\nas you wish in your `graphql-config` file to pre-load `process.env` variables.\n\n### Troubleshooting notes\n\n- you may need to manually restart the language server for some of these\n  configurations to take effect\n- graphql-config's multi-project support is not related to multi-root workspaces\n  in vscode - in fact, each workspace can have multiple graphql config projects,\n  which is what makes multi-root workspaces tricky to support. coming soon!\n\n<span id=\"workspace-configuration\" />\n\n### Workspace Configuration\n\nThe LSP Server reads config by sending `workspace/configuration` method when it\ninitializes.\n\nNote: We still do not support LSP multi-root workspaces but will tackle this\nvery soon!\n\nMany LSP clients beyond vscode offer ways to set these configurations, such as\nvia `initializationOptions` in nvim.coc. The options are mostly designed to\nconfigure graphql-config's load parameters, the only thing we can't configure\nwith graphql config. The final option can be set in `graphql-config` as well\n\n| Parameter                                 | Default                         | Description                                                                                                                                                       |\n| ----------------------------------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `graphql-config.load.baseDir`             | workspace root or process.cwd() | the path where graphql config looks for config files                                                                                                              |\n| `graphql-config.load.filePath`            | `null`                          | exact filepath of the config file.                                                                                                                                |\n| `graphql-config.load.configName`          | `graphql`                       | config name prefix instead of `graphql`                                                                                                                           |\n| `graphql-config.load.legacy`              | `true`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `graphql-config.dotEnvPath`               | `null`                          | backwards compatibility with `graphql-config@2`                                                                                                                   |\n| `vscode-graphql.cacheSchemaFileForLookup` | `false`                         | generate an SDL file based on your graphql-config schema configuration for schema definition lookup and other features. useful when your `schema` config are urls |\n\nall the `graphql-config.load.*` configuration values come from static\n`loadConfig()` options in graphql config.\n\n(more coming soon!)\n\n### Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the\nIDE server. GraphQL server will receive/send RPC messages to perform language\nservice features, while caching the necessary GraphQL artifacts such as fragment\ndefinitions, GraphQL schemas etc. More about the server interface and RPC\nmessage format below.\n\nThe IDE server should launch a separate GraphQL server with its own child\nprocess for each `.graphqlrc.yml` file the IDE finds (using the nearest ancestor\ndirectory relative to the file currently being edited):\n\n```\n./application\n\n  ./productA\n    .graphqlrc.yml\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc.yml\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\n\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`,\neach with its own `.graphqlrc.yml` file, as illustrated in the directory\nstructure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the\nIDE server should spawn a child process for each of the GraphQL Language Service\nprocesses necessary, and gracefully exit the processes as the IDE closes. In\ncase of errors or a sudden halt the GraphQL Language Service will close as the\nstream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to\ncommunicate with the IDE servers. Microsoft's language server currently supports\ntwo communication transports: Stream (stdio) and IPC. For IPC transport, the\nreference guide to be used for development is\n[the language server protocol](https://microsoft.github.io/language-server-protocol/specification)\ndocumentation.\n\nFor each transport, there is a slight difference in JSON message format,\nespecially in how the methods to be invoked are defined - below are the\ncurrently supported methods for each transport (will be updated as progress is\nmade):\n\n|                      | Stream                       | IPC                                         |\n| -------------------: | ---------------------------- | ------------------------------------------- |\n|          Diagnostics | `getDiagnostics`             | `textDocument/publishDiagnostics`           |\n|       Autocompletion | `getAutocompleteSuggestions` | `textDocument/completion`                   |\n|              Outline | `getOutline`                 | `textDocument/outline`                      |\n|     Document Symbols | `getDocumentSymbols`         | `textDocument/symbols`                      |\n|    Workspace Symbols | `getWorkspaceSymbols`        | `workspace/symbols`                         |\n|     Go-to definition | `getDefinition`              | `textDocument/definition`                   |\n| Workspace Definition | `getWorkspaceDefinition`     | `workspace/definition`                      |\n|          File Events | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n","readmeFilename":"README.md","gitHead":"e4221d66987fcc59ad1001b84fbe5b2e4e35f23c","_id":"graphql-language-service-server@2.12.1-canary-e4221d66.0","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-fs04Km8yHXjIeXdRh+Lznx5/sV1YVfuKo3vjpNHG4OkhNqg8JK4mOfNevywuSg/xnYJj/XAUfmHFE4598Zi/gQ==","shasum":"5d890c8b0d5c7d3a81ab898ac5c118ecd7d3c7e5","tarball":"https://registry.npmjs.org/graphql-language-service-server/-/graphql-language-service-server-2.12.1-canary-e4221d66.0.tgz","fileCount":164,"unpackedSize":628299,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHhBHBvt5eGzysq1Ts2rPaUxpr7VyF3ayPpsYSd8ZuJiAiEA62KeNfqwG4pa749WQrHb1Phl3gttIN1pqvg/pwlXa7g="}]},"_npmUser":{"name":"acao","email":"rikki.schulte@gmail.com"},"directories":{},"maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graphql-language-service-server_2.12.1-canary-e4221d66.0_1709499711047_0.09931149038978893"},"_hasShrinkwrap":false}},"readme":"","maintainers":[{"name":"mjmahone","email":"mahoney.mattj@gmail.com"},{"name":"benjie","email":"npm@benjiegillam.com"},{"name":"acao","email":"rikki.schulte@gmail.com"},{"name":"i1g","email":"ivan.goncharov.ua@gmail.com"},{"name":"leebyron","email":"lee@leebyron.com"},{"name":"schickling","email":"schickling.j@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"wincent","email":"greg@hurrell.net"},{"name":"kassens","email":"jkassens@fb.com"},{"name":"orta","email":"orta.therox@gmail.com"},{"name":"asiandrummer","email":"asiandrummer@gmail.com"},{"name":"lostplan","email":"sol@twitter.com"},{"name":"mgadda","email":"mgadda@gmail.com"},{"name":"ags-","email":"agomezs@fb.com"}],"time":{"modified":"2024-03-03T21:01:51.635Z","created":"2017-02-18T07:29:17.632Z","0.0.1":"2017-02-18T07:29:17.632Z","0.0.2":"2017-02-21T21:37:36.387Z","0.0.3":"2017-03-29T00:24:53.878Z","0.0.4":"2017-04-02T05:46:07.926Z","0.0.5":"2017-04-04T23:53:59.736Z","0.0.6":"2017-04-11T01:17:55.059Z","0.0.7":"2017-04-17T19:58:32.055Z","0.0.8":"2017-04-18T08:07:40.260Z","0.0.9":"2017-04-21T01:34:51.163Z","0.0.10":"2017-04-25T21:54:01.144Z","0.0.11":"2017-04-27T20:53:26.017Z","0.0.12":"2017-05-01T20:42:17.822Z","0.0.13":"2017-05-02T08:03:40.660Z","0.0.14":"2017-05-03T20:29:45.726Z","0.0.15":"2017-05-12T20:45:58.583Z","0.0.16":"2017-05-16T17:49:55.745Z","0.0.17":"2017-05-16T22:55:04.183Z","0.0.18":"2017-05-18T20:03:44.161Z","0.0.19":"2017-05-26T02:56:29.854Z","0.0.20":"2017-05-26T09:48:50.009Z","0.0.21":"2017-05-26T23:48:59.754Z","0.0.22":"2017-06-01T10:30:30.969Z","0.0.23":"2017-06-06T00:28:46.746Z","0.0.24":"2017-06-06T18:32:08.090Z","0.0.25":"2017-06-10T02:51:34.993Z","0.0.26":"2017-06-23T20:14:21.712Z","0.0.27":"2017-06-23T21:31:40.672Z","0.0.28":"2017-06-25T04:48:12.580Z","0.0.29":"2017-06-26T06:19:03.231Z","0.0.30":"2017-06-30T22:30:14.694Z","0.0.31":"2017-07-03T06:05:55.413Z","0.0.32":"2017-07-10T08:36:06.729Z","0.0.33":"2017-07-17T10:20:02.908Z","0.0.34":"2017-07-17T10:39:20.311Z","0.0.35":"2017-07-19T21:41:02.636Z","0.0.36":"2017-08-07T08:11:08.856Z","0.0.37":"2017-08-07T08:33:50.196Z","0.1.0-0":"2017-08-10T21:43:15.884Z","0.1.5-0":"2017-08-10T23:31:46.416Z","0.1.5":"2017-08-14T15:30:32.156Z","0.1.6":"2017-08-15T21:28:48.490Z","0.1.7":"2017-08-16T01:23:27.119Z","0.1.8":"2017-08-18T03:32:46.061Z","0.1.9":"2017-08-18T03:50:34.761Z","0.1.10":"2017-08-19T00:49:53.210Z","0.1.11":"2017-08-20T07:18:38.976Z","0.1.12":"2017-08-21T17:35:08.730Z","0.1.13":"2017-08-24T02:40:51.550Z","0.1.14":"2017-09-29T06:12:51.352Z","1.0.15":"2017-10-02T22:20:36.263Z","1.0.16":"2017-11-21T20:24:39.680Z","1.0.18":"2018-01-04T02:09:39.743Z","1.1.0":"2018-04-09T21:38:47.632Z","1.1.1":"2018-04-18T09:27:19.395Z","1.1.2":"2018-04-19T16:23:16.762Z","1.2.0":"2018-06-04T06:00:45.657Z","1.2.2":"2018-06-11T13:00:29.644Z","1.3.2":"2018-09-06T21:01:12.864Z","2.0.0":"2018-09-18T15:01:47.605Z","2.1.0":"2019-08-18T17:47:24.602Z","2.3.0":"2019-10-04T06:22:23.657Z","2.3.1":"2019-11-26T23:12:35.274Z","2.3.2":"2019-12-03T03:52:41.350Z","2.3.3":"2019-12-09T13:59:00.405Z","2.4.0-alpha.0":"2020-01-18T14:44:25.634Z","2.4.0-alpha.1":"2020-01-18T14:59:21.250Z","2.4.0-alpha.3":"2020-03-20T22:27:28.199Z","2.4.0-alpha.4":"2020-04-03T01:08:53.075Z","2.4.0-alpha.5":"2020-04-06T00:36:31.894Z","2.4.0-alpha.6":"2020-04-10T17:54:52.334Z","2.4.0-alpha.7":"2020-04-10T19:26:30.702Z","2.4.0-alpha.8":"2020-05-17T02:16:49.536Z","2.4.0-alpha.9":"2020-05-19T21:52:47.753Z","2.4.0-alpha.10":"2020-05-28T17:28:05.880Z","2.4.0-alpha.12":"2020-06-04T13:56:57.687Z","2.4.0":"2020-06-11T16:15:36.793Z","2.4.1":"2020-08-06T20:38:21.229Z","2.5.0-alpha.0":"2020-08-10T04:01:50.080Z","2.5.0-alpha.1":"2020-08-12T20:05:40.622Z","2.5.0-alpha.2":"2020-08-12T21:09:20.595Z","2.5.0-alpha.3":"2020-08-22T17:13:32.167Z","2.5.0-alpha.4":"2020-08-26T03:18:55.055Z","2.5.0-alpha.5":"2020-09-11T15:42:50.127Z","2.5.0":"2020-09-18T15:38:47.752Z","2.5.1":"2020-09-20T16:39:42.495Z","2.5.2":"2020-09-20T17:57:08.859Z","2.5.3":"2020-09-23T19:16:36.601Z","2.5.4":"2020-09-23T20:54:16.340Z","2.5.5":"2020-10-20T14:17:07.473Z","2.5.6":"2020-11-28T18:48:25.245Z","2.5.7":"2020-12-08T18:54:04.056Z","2.5.8":"2020-12-28T16:00:48.715Z","2.5.9":"2021-01-03T15:56:29.427Z","2.6.0":"2021-01-07T15:45:56.983Z","2.6.1":"2021-01-07T19:01:15.449Z","2.6.2":"2021-01-07T20:48:49.308Z","2.6.3":"2021-04-10T22:17:22.803Z","2.6.4":"2021-10-28T11:57:14.104Z","2.6.5":"2021-10-29T12:17:53.962Z","2.7.0":"2021-11-07T16:40:17.309Z","2.7.1":"2021-11-09T07:56:11.041Z","2.7.2-canary-66346cbd.0":"2021-11-14T16:36:40.440Z","2.7.2-canary-dcd21ef1.0":"2021-11-22T07:41:34.244Z","2.7.2-canary-669af9ec.0":"2021-11-22T07:44:50.014Z","2.7.2-canary-26511707.0":"2021-11-22T08:17:31.164Z","2.7.2-canary-86d7df95.0":"2021-11-22T17:31:32.877Z","2.7.2-canary-86c05353.0":"2021-11-22T22:56:36.276Z","2.7.2-canary-efc41fcd.0":"2021-11-22T23:06:42.689Z","2.7.2":"2021-11-23T20:20:56.104Z","2.7.3-canary-3410d799.0":"2021-11-24T09:46:35.231Z","2.7.3-canary-98364dae.0":"2021-11-24T09:58:50.780Z","2.7.3":"2021-11-24T10:10:09.088Z","2.7.4":"2021-11-24T14:10:04.355Z","2.7.5-canary-2e150b92.0":"2021-11-25T18:51:25.319Z","2.7.5-canary-dd03c544.0":"2021-11-25T18:56:40.167Z","2.7.5-canary-d8b89752.0":"2021-11-25T23:07:25.234Z","2.7.5-canary-f79bdd43.0":"2021-11-25T23:36:39.336Z","2.7.5-canary-acdaffca.0":"2021-11-25T23:43:06.967Z","2.7.5-canary-4939a666.0":"2021-11-25T23:50:47.349Z","2.7.5-canary-1d1d33de.0":"2021-11-26T00:01:34.508Z","2.7.5":"2021-11-26T00:05:11.998Z","2.7.6-canary-3125e31e.0":"2021-11-26T10:48:43.402Z","2.7.6":"2021-11-26T10:58:27.924Z","2.7.7-canary-3dcdd158.0":"2021-11-28T00:32:51.076Z","2.7.7-canary-6f6c49b0.0":"2021-11-29T20:14:19.673Z","2.7.7-canary-58e99aa6.0":"2021-11-29T20:16:45.324Z","2.7.7-canary-412904c6.0":"2021-11-30T12:09:02.783Z","2.7.7-canary-fea49557.0":"2021-11-30T12:53:42.707Z","2.7.7-canary-325c04b9.0":"2021-11-30T12:56:33.802Z","2.7.7-canary-8ce9e283.0":"2021-11-30T13:00:02.192Z","2.7.7-canary-48f9cb01.0":"2021-11-30T13:03:49.376Z","2.7.7-canary-6db6f986.0":"2021-11-30T18:29:16.503Z","2.7.7-canary-e824ae9d.0":"2021-11-30T18:52:16.083Z","2.7.7":"2021-12-01T10:44:24.574Z","2.7.8-canary-eb5c4300.0":"2021-12-03T22:27:47.117Z","2.7.8-canary-fae7d199.0":"2021-12-04T16:06:02.916Z","2.7.8-canary-b5aba87e.0":"2021-12-04T16:08:48.378Z","2.7.8-canary-1a140c54.0":"2021-12-05T16:08:25.225Z","2.7.8-canary-321acad7.0":"2021-12-05T16:40:04.096Z","2.7.8-canary-0d171c9c.0":"2021-12-05T17:01:32.658Z","2.7.8-canary-033a43d2.0":"2021-12-05T17:19:35.168Z","2.7.8-canary-0b6fa337.0":"2021-12-05T17:23:44.661Z","2.7.8-canary-8af33604.0":"2021-12-05T20:55:32.288Z","2.7.8-canary-1d118d28.0":"2021-12-05T21:08:50.862Z","2.7.8-canary-343f1670.0":"2021-12-05T22:52:12.375Z","2.7.8-canary-aba5a940.0":"2021-12-06T00:45:46.630Z","2.7.8":"2021-12-06T08:10:49.885Z","2.7.9-canary-75700e01.0":"2021-12-06T13:37:55.906Z","2.7.9":"2021-12-06T14:57:46.513Z","2.7.10-canary-b9c71c81.0":"2021-12-06T16:59:43.116Z","2.7.10-canary-bdd62cc3.0":"2021-12-06T17:07:54.778Z","2.7.10-canary-742288e7.0":"2021-12-06T17:13:35.421Z","2.7.10-canary-ec866cba.0":"2021-12-06T17:27:12.382Z","2.7.10-canary-ab0be4f0.0":"2021-12-06T17:42:41.597Z","2.7.10-canary-2f2c1b4d.0":"2021-12-06T17:45:09.603Z","2.7.10-canary-35604620.0":"2021-12-06T17:49:52.060Z","2.7.10-canary-07a2840d.0":"2021-12-06T17:52:03.458Z","2.7.10-canary-a19d0748.0":"2021-12-06T17:53:23.420Z","2.7.10-canary-166ffd7a.0":"2021-12-06T18:07:10.627Z","2.7.10-canary-07e866d1.0":"2021-12-06T18:13:56.521Z","2.7.10":"2021-12-06T18:21:04.293Z","2.7.11-canary-f20fe1e2.0":"2021-12-06T18:30:56.388Z","2.7.11-canary-75bdc860.0":"2021-12-07T20:08:52.531Z","2.7.11-canary-5edec51e.0":"2021-12-07T20:27:02.754Z","2.7.11":"2021-12-07T20:35:46.373Z","2.7.12-canary-312f863b.0":"2021-12-07T20:57:14.679Z","2.7.12-canary-b96f3d10.0":"2021-12-07T21:43:00.516Z","2.7.12-canary-b8d145d7.0":"2021-12-07T21:50:33.616Z","2.7.12":"2021-12-07T21:57:59.477Z","2.7.13-canary-8383e03e.0":"2021-12-09T20:42:12.239Z","2.7.13-canary-05e10ab8.0":"2021-12-09T21:06:25.297Z","2.7.13-canary-bf97503d.0":"2021-12-09T21:19:15.536Z","2.7.13-canary-05b863ab.0":"2021-12-09T21:51:57.232Z","2.7.13":"2021-12-09T22:03:20.707Z","2.7.14":"2022-02-18T20:23:31.092Z","2.7.15":"2022-03-08T12:26:56.728Z","2.7.16-canary-8fa698e7.0":"2022-03-08T13:13:21.333Z","2.7.16":"2022-03-11T11:43:03.810Z","2.7.17-canary-9e6d341c.0":"2022-03-19T11:47:12.688Z","2.7.17":"2022-03-23T16:07:32.491Z","2.7.18-canary-a7362f99.0":"2022-04-02T08:18:46.035Z","2.7.18-canary-5991895d.0":"2022-04-02T09:28:46.457Z","2.7.18-canary-c9d291ea.0":"2022-04-02T15:44:05.381Z","2.7.18":"2022-04-07T07:24:16.053Z","2.7.19-canary-fb52a553.0":"2022-04-11T06:11:37.856Z","2.7.19-canary-63a8a0dd.0":"2022-04-11T06:15:15.444Z","2.7.19":"2022-04-11T14:11:21.118Z","2.7.20":"2022-04-14T04:53:43.153Z","2.7.21":"2022-04-26T14:37:37.771Z","2.7.22":"2022-05-04T05:17:21.222Z","2.7.23":"2022-05-22T07:51:26.452Z","2.7.24-canary-6116786d.0":"2022-06-03T14:35:07.999Z","2.7.24":"2022-06-04T06:48:00.285Z","2.7.25-canary-500eef41.0":"2022-06-05T07:44:00.282Z","2.7.25":"2022-06-06T08:03:29.116Z","2.7.26-canary-85c69db3.0":"2022-06-08T10:25:48.410Z","2.7.26-canary-6f259838.0":"2022-06-08T10:27:08.629Z","2.7.26":"2022-06-09T10:37:15.253Z","2.7.27-canary-4bf7a139.0":"2022-06-15T06:28:37.960Z","2.7.27":"2022-06-15T06:46:35.666Z","2.7.28-canary-0ac0349e.0":"2022-06-26T08:47:56.004Z","2.7.28":"2022-07-06T17:36:02.279Z","2.7.29-canary-e992d7a6.0":"2022-07-08T19:52:11.865Z","2.7.29":"2022-07-08T20:22:59.472Z","2.8.0-canary-e5a02d24.0":"2022-07-10T14:46:41.103Z","2.8.0-canary-7773f5f1.0":"2022-07-10T14:49:53.677Z","2.8.0-canary-8d6d7f38.0":"2022-07-10T15:20:06.871Z","2.8.0-canary-0ab0e498.0":"2022-07-10T16:31:27.110Z","2.8.0":"2022-07-10T19:41:00.633Z","2.8.1":"2022-08-04T17:01:17.260Z","2.8.2-canary-814664ed.0":"2022-08-11T12:26:36.727Z","2.8.2":"2022-08-11T16:54:48.973Z","2.8.3-canary-b2565cf9.0":"2022-08-11T22:31:41.262Z","2.8.3":"2022-08-11T22:48:00.042Z","2.8.4":"2022-08-24T12:53:36.000Z","2.8.5-canary-8fbd0032.0":"2022-10-08T23:13:05.385Z","2.8.5":"2022-10-10T21:38:21.770Z","2.8.6-canary-10955e87.0":"2022-10-10T23:42:22.561Z","2.8.6":"2022-10-10T23:48:34.407Z","2.8.7-canary-c8f1bc6a.0":"2022-10-11T00:47:34.815Z","2.8.7-canary-d39212e4.0":"2022-10-11T00:53:18.893Z","2.8.7-canary-d7f4c083.0":"2022-10-11T00:55:48.007Z","2.8.7-canary-00f81e5c.0":"2022-10-11T01:05:00.269Z","2.8.7":"2022-10-11T01:28:39.263Z","2.8.8-canary-ee05ccbf.0":"2022-10-11T01:43:15.713Z","2.8.8":"2022-10-11T01:47:16.359Z","2.8.9-canary-54be86b3.0":"2022-10-16T12:48:58.671Z","2.8.9":"2022-10-16T13:00:45.456Z","2.9.0-canary-9942c5ce.0":"2022-10-22T16:21:44.814Z","2.9.0-canary-9b2f4b81.0":"2022-10-22T16:26:09.514Z","2.9.0-canary-cd06255e.0":"2022-10-22T16:28:44.672Z","2.9.0-canary-31714127.0":"2022-10-22T16:35:25.135Z","2.9.0-canary-9ad678ad.0":"2022-10-22T16:51:28.526Z","2.9.0":"2022-10-22T17:03:45.496Z","2.9.1":"2022-10-22T19:12:18.726Z","2.9.2-canary-0e3571ca.0":"2022-10-22T22:11:28.950Z","2.9.2-canary-229a9a9b.0":"2022-10-22T22:21:23.019Z","2.9.2-canary-a593ca85.0":"2022-10-22T22:28:42.421Z","2.9.2-canary-6b5ad5f3.0":"2022-10-23T00:49:59.238Z","2.9.2-canary-27ecf339.0":"2022-10-27T12:19:46.182Z","2.9.2":"2022-11-05T22:56:38.260Z","2.9.3-canary-c3ab8cb3.0":"2022-11-12T15:11:35.363Z","2.9.3":"2022-11-12T15:19:08.250Z","2.9.4-canary-1be0389f.0":"2022-11-12T16:34:51.557Z","2.9.4":"2022-11-25T15:20:33.495Z","2.9.5":"2023-01-18T14:30:22.658Z","2.9.6":"2023-03-02T19:28:31.370Z","2.9.7":"2023-03-26T20:50:19.096Z","2.9.8":"2023-05-03T08:29:03.881Z","2.9.9":"2023-05-05T11:40:22.606Z","2.9.10":"2023-05-08T11:48:37.599Z","2.10.0":"2023-05-08T12:00:19.673Z","2.11.0":"2023-05-11T12:00:32.100Z","2.11.1":"2023-05-27T22:22:19.000Z","2.11.2-alpha.0":"2023-06-20T21:19:22.159Z","2.12.0-canary-616f8a33.0":"2023-06-21T22:30:40.236Z","2.12.0-canary-2f7f1266.0":"2023-06-21T22:34:08.022Z","2.12.0-canary-6698dc22.0":"2023-06-21T22:39:40.733Z","2.12.0-canary-0ef186a2.0":"2023-06-22T00:20:24.671Z","2.12.0-canary-8cc6cc6c.0":"2023-06-22T00:34:38.320Z","2.12.0-canary-df664982.0":"2023-06-22T07:47:59.805Z","2.12.0-canary-8f7aa55c.0":"2023-06-22T07:55:30.101Z","2.12.0-canary-a8496344.0":"2023-06-22T08:03:32.351Z","2.12.0-canary-b6d81c61.0":"2023-06-23T21:16:56.102Z","2.12.0-canary-5a3b95d3.0":"2023-06-23T21:24:33.588Z","2.12.0-canary-0b758ed3.0":"2023-06-23T22:01:59.341Z","2.12.0-canary-8d17bd3c.0":"2023-06-23T22:15:41.895Z","2.12.0-canary-f5992ff0.0":"2023-06-23T22:29:37.688Z","2.12.0-canary-70c9456e.0":"2023-06-23T23:29:54.528Z","2.12.0-canary-73a4ac55.0":"2023-06-23T23:30:04.990Z","2.12.0-canary-943fcbde.0":"2023-06-24T06:57:28.570Z","2.12.0-canary-a97151b3.0":"2023-06-24T07:02:23.807Z","2.12.0-canary-88c53ea4.0":"2023-06-24T07:25:15.289Z","2.11.2":"2023-06-24T07:48:39.638Z","2.11.3-canary-b538d656.0":"2023-07-05T11:29:38.738Z","3.0.0-canary-5d4865df.0":"2023-07-05T16:15:23.035Z","3.0.0-canary-38c2c299.0":"2023-07-05T16:26:33.408Z","3.0.0-canary-d52fbc57.0":"2023-07-05T16:28:14.457Z","2.11.3-canary-5ea73def.0":"2023-07-05T16:28:38.162Z","2.11.3-canary-8b7c69cb.0":"2023-07-05T17:07:58.283Z","3.0.0-canary-6de7e53f.0":"2023-07-05T17:32:41.886Z","3.0.0-canary-d4eae891.0":"2023-07-05T19:47:27.607Z","3.0.0-canary-a6d20235.0":"2023-07-06T08:21:54.450Z","3.0.0-canary-6bb88229.0":"2023-07-06T08:53:45.194Z","3.0.0-canary-351ba549.0":"2023-07-06T09:00:15.906Z","3.0.0-canary-a08e9aea.0":"2023-07-06T09:35:20.801Z","3.0.0-canary-f0f5afb3.0":"2023-07-06T09:41:58.442Z","3.0.0-canary-b5674a4f.0":"2023-07-06T12:40:56.414Z","3.0.0-canary-344df134.0":"2023-07-07T11:25:18.713Z","3.0.0-canary-f648417e.0":"2023-07-07T13:34:01.374Z","3.0.0-canary-30653157.0":"2023-07-08T06:53:06.593Z","3.0.0-canary-3e72a1f9.0":"2023-07-08T07:03:53.593Z","3.0.0-canary-d86e51b8.0":"2023-07-08T07:11:26.856Z","3.0.0-canary-d38d8126.0":"2023-07-08T08:59:29.402Z","3.0.0-canary-6610f112.0":"2023-07-08T09:01:43.496Z","3.0.0-canary-dfb20ee6.0":"2023-07-08T09:08:46.104Z","3.0.0-canary-a9e38be1.0":"2023-07-08T09:30:00.157Z","3.0.0-canary-f5830f58.0":"2023-07-08T09:35:39.679Z","3.0.0-canary-cd4cdaba.0":"2023-07-08T09:51:47.030Z","3.0.0-canary-298f53ab.0":"2023-07-08T10:54:14.565Z","3.0.0-canary-2b03fdd0.0":"2023-07-09T13:57:45.803Z","3.0.0-canary-de420cd7.0":"2023-07-09T14:28:32.245Z","3.0.0-canary-9eb9e2fb.0":"2023-07-09T14:34:03.075Z","3.0.0-canary-e0e2c15a.0":"2023-07-09T14:34:52.246Z","3.0.0-canary-6ba9ba38.0":"2023-07-10T15:15:01.563Z","2.11.3":"2023-07-11T13:14:25.602Z","2.11.4":"2023-09-17T20:42:27.925Z","2.11.5":"2023-09-26T21:16:29.715Z","2.11.6":"2023-11-20T13:33:35.906Z","2.11.7-canary-36f0bac1.0":"2024-01-06T23:18:08.064Z","2.11.7-canary-be0f874f.0":"2024-01-08T00:35:10.841Z","2.11.7":"2024-01-10T18:36:28.441Z","2.11.8-canary-43444e74.0":"2024-01-13T05:45:05.940Z","2.11.8-canary-d47bc2eb.0":"2024-01-13T05:46:30.478Z","2.11.8":"2024-01-13T05:54:38.660Z","2.11.9-canary-d1f52525.0":"2024-01-13T07:42:51.132Z","2.11.9":"2024-01-13T08:30:22.725Z","2.11.10-canary-8ff51d17.0":"2024-01-13T11:10:18.601Z","2.11.10":"2024-01-13T11:22:31.587Z","2.11.11-canary-1b8df5e7.0":"2024-01-24T22:20:31.006Z","2.12.0":"2024-01-25T06:23:11.234Z","2.12.1-canary-71275a35.0":"2024-01-27T15:21:29.363Z","2.12.1-canary-c159d531.0":"2024-01-27T15:28:38.425Z","2.12.1-canary-031fe458.0":"2024-01-27T18:39:16.063Z","2.12.1-canary-cac64260.0":"2024-01-27T20:06:26.626Z","2.12.1-canary-c600d82b.0":"2024-01-27T21:24:47.704Z","2.12.1-canary-0e2cd118.0":"2024-01-28T10:59:55.048Z","2.12.1-canary-eb558a23.0":"2024-02-01T22:20:40.811Z","2.12.1-canary-5815ea6e.0":"2024-02-04T14:15:32.158Z","2.12.1-canary-1569230c.0":"2024-02-16T22:39:10.110Z","2.12.1-canary-bf7a0f53.0":"2024-02-18T12:05:29.746Z","2.12.1-canary-c21932cc.0":"2024-02-18T21:01:09.680Z","2.12.1-canary-99c5d9c8.0":"2024-02-20T04:14:43.527Z","2.12.1-canary-73b40723.0":"2024-02-20T04:17:52.704Z","2.12.1-canary-a9a6ccd4.0":"2024-02-20T23:29:32.265Z","2.12.1-canary-6b500814.0":"2024-02-27T20:37:46.605Z","2.12.1-canary-cfd3ee8c.0":"2024-02-27T20:43:36.152Z","2.12.1-canary-061ad590.0":"2024-02-27T22:06:57.903Z","2.12.1-canary-acfcc769.0":"2024-03-03T09:47:49.508Z","2.12.1-canary-74cb22ae.0":"2024-03-03T16:56:02.846Z","2.12.1-canary-0f788ef9.0":"2024-03-03T19:39:06.186Z","2.12.1-canary-e4221d66.0":"2024-03-03T21:01:51.195Z"},"keywords":["graphql","language server","LSP","vue","svelte","typescript"],"repository":{"type":"git","url":"git+ssh://git@github.com/graphql/graphiql.git","directory":"packages/graphql-language-service-server"},"contributors":[{"name":"Greg Hurrell","email":"greg@hurrell.net","url":"https://greg.hurrell.net/"},{"name":"Hyohyeon Jeong","email":"asiandrummer@fb.com"},{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"}],"bugs":{"url":"https://github.com/graphql/graphiql/issues?q=issue+label:lsp-server"},"readmeFilename":"","homepage":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-server#readme","license":"MIT"}